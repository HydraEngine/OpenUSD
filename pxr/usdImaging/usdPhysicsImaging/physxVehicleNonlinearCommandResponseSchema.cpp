//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleNonlinearCommandResponseSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_NONLINEAR_COMMAND_RESPONSE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetCommandValues() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->commandValues);
}

HdVec2fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetSpeedResponses() const
{
    return _GetTypedDataSource<HdVec2fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponses);
}

HdIntArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetSpeedResponsesPerCommandValue() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponsesPerCommandValue);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::BuildRetained(
        const HdFloatArrayDataSourceHandle &commandValues,
        const HdVec2fArrayDataSourceHandle &speedResponses,
        const HdIntArrayDataSourceHandle &speedResponsesPerCommandValue
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (commandValues) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->commandValues;
        _values[_count++] = commandValues;
    }

    if (speedResponses) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponses;
        _values[_count++] = speedResponses;
    }

    if (speedResponsesPerCommandValue) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponsesPerCommandValue;
        _values[_count++] = speedResponsesPerCommandValue;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder::SetCommandValues(
    const HdFloatArrayDataSourceHandle &commandValues)
{
    _commandValues = commandValues;
    return *this;
}

UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder::SetSpeedResponses(
    const HdVec2fArrayDataSourceHandle &speedResponses)
{
    _speedResponses = speedResponses;
    return *this;
}

UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder::SetSpeedResponsesPerCommandValue(
    const HdIntArrayDataSourceHandle &speedResponsesPerCommandValue)
{
    _speedResponsesPerCommandValue = speedResponsesPerCommandValue;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::BuildRetained(
        _commandValues,
        _speedResponses,
        _speedResponsesPerCommandValue
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->physxVehicleNonlinearCommandResponse))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->physxVehicleNonlinearCommandResponse;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetCommandValuesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->commandValues);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetSpeedResponsesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponses);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchema::GetSpeedResponsesPerCommandValueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleNonlinearCommandResponseSchemaTokens->speedResponsesPerCommandValue);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE