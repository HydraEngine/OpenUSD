//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleSuspensionComplianceSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_SUSPENSION_COMPLIANCE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec4fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetSuspensionForceAppPoint() const
{
    return _GetTypedDataSource<HdVec4fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->suspensionForceAppPoint);
}

HdVec4fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetTireForceAppPoint() const
{
    return _GetTypedDataSource<HdVec4fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->tireForceAppPoint);
}

HdVec2fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetWheelCamberAngle() const
{
    return _GetTypedDataSource<HdVec2fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelCamberAngle);
}

HdVec2fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetWheelToeAngle() const
{
    return _GetTypedDataSource<HdVec2fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelToeAngle);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::BuildRetained(
        const HdVec4fArrayDataSourceHandle &suspensionForceAppPoint,
        const HdVec4fArrayDataSourceHandle &tireForceAppPoint,
        const HdVec2fArrayDataSourceHandle &wheelCamberAngle,
        const HdVec2fArrayDataSourceHandle &wheelToeAngle
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (suspensionForceAppPoint) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->suspensionForceAppPoint;
        _values[_count++] = suspensionForceAppPoint;
    }

    if (tireForceAppPoint) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->tireForceAppPoint;
        _values[_count++] = tireForceAppPoint;
    }

    if (wheelCamberAngle) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelCamberAngle;
        _values[_count++] = wheelCamberAngle;
    }

    if (wheelToeAngle) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelToeAngle;
        _values[_count++] = wheelToeAngle;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder::SetSuspensionForceAppPoint(
    const HdVec4fArrayDataSourceHandle &suspensionForceAppPoint)
{
    _suspensionForceAppPoint = suspensionForceAppPoint;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder::SetTireForceAppPoint(
    const HdVec4fArrayDataSourceHandle &tireForceAppPoint)
{
    _tireForceAppPoint = tireForceAppPoint;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder::SetWheelCamberAngle(
    const HdVec2fArrayDataSourceHandle &wheelCamberAngle)
{
    _wheelCamberAngle = wheelCamberAngle;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder::SetWheelToeAngle(
    const HdVec2fArrayDataSourceHandle &wheelToeAngle)
{
    _wheelToeAngle = wheelToeAngle;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::BuildRetained(
        _suspensionForceAppPoint,
        _tireForceAppPoint,
        _wheelCamberAngle,
        _wheelToeAngle
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->physxVehicleSuspensionCompliance))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->physxVehicleSuspensionCompliance;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetSuspensionForceAppPointLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->suspensionForceAppPoint);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetTireForceAppPointLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->tireForceAppPoint);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetWheelCamberAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelCamberAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchema::GetWheelToeAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionComplianceSchemaTokens->wheelToeAngle);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE