//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxTriangleMeshCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_TRIANGLE_MESH_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::GetWeldTolerance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens->weldTolerance);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::BuildRetained(
        const HdFloatDataSourceHandle &weldTolerance
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (weldTolerance) {
        _names[_count] = UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens->weldTolerance;
        _values[_count++] = weldTolerance;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::Builder &
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::Builder::SetWeldTolerance(
    const HdFloatDataSourceHandle &weldTolerance)
{
    _weldTolerance = weldTolerance;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::BuildRetained(
        _weldTolerance
    );
}

/*static*/
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxTriangleMeshCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens->physxTriangleMeshCollision))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens->physxTriangleMeshCollision;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxTriangleMeshCollisionSchema::GetWeldToleranceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxTriangleMeshCollisionSchemaTokens->weldTolerance);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE