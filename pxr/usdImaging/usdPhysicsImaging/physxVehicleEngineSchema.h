//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_VEHICLE_ENGINE_SCHEMA_H
#define PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_VEHICLE_ENGINE_SCHEMA_H

/// \file

#include "pxr/usdImaging/usdPhysicsImaging/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define USD_PHYSICS_IMAGING_PHYSX_VEHICLE_ENGINE_SCHEMA_TOKENS \
    (physxVehicleEngine) \
    (dampingRateFullThrottle) \
    (dampingRateZeroThrottleClutchDisengaged) \
    (dampingRateZeroThrottleClutchEngaged) \
    (idleRotationSpeed) \
    (maxRotationSpeed) \
    (moi) \
    (peakTorque) \
    (torqueCurve) \

TF_DECLARE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleEngineSchemaTokens, USDPHYSICSIMAGING_API,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_ENGINE_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class UsdPhysicsImagingPhysxVehicleEngineSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    UsdPhysicsImagingPhysxVehicleEngineSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "physxVehicleEngine" from the parent container and constructs a
    /// UsdPhysicsImagingPhysxVehicleEngineSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    USDPHYSICSIMAGING_API
    static UsdPhysicsImagingPhysxVehicleEngineSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetDampingRateFullThrottle() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetDampingRateZeroThrottleClutchDisengaged() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetDampingRateZeroThrottleClutchEngaged() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetIdleRotationSpeed() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetMaxRotationSpeed() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetMoi() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetPeakTorque() const;

    USDPHYSICSIMAGING_API
    HdVec2fDataSourceHandle GetTorqueCurve() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    USDPHYSICSIMAGING_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate dampingRateFullThrottle.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDampingRateFullThrottleLocator();

    /// Prim-level relative data source locator to locate dampingRateZeroThrottleClutchDisengaged.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDampingRateZeroThrottleClutchDisengagedLocator();

    /// Prim-level relative data source locator to locate dampingRateZeroThrottleClutchEngaged.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDampingRateZeroThrottleClutchEngagedLocator();

    /// Prim-level relative data source locator to locate idleRotationSpeed.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetIdleRotationSpeedLocator();

    /// Prim-level relative data source locator to locate maxRotationSpeed.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMaxRotationSpeedLocator();

    /// Prim-level relative data source locator to locate moi.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMoiLocator();

    /// Prim-level relative data source locator to locate peakTorque.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetPeakTorqueLocator();

    /// Prim-level relative data source locator to locate torqueCurve.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetTorqueCurveLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    USDPHYSICSIMAGING_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdFloatDataSourceHandle &dampingRateFullThrottle,
        const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchDisengaged,
        const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchEngaged,
        const HdFloatDataSourceHandle &idleRotationSpeed,
        const HdFloatDataSourceHandle &maxRotationSpeed,
        const HdFloatDataSourceHandle &moi,
        const HdFloatDataSourceHandle &peakTorque,
        const HdVec2fDataSourceHandle &torqueCurve
    );

    /// \class UsdPhysicsImagingPhysxVehicleEngineSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        USDPHYSICSIMAGING_API
        Builder &SetDampingRateFullThrottle(
            const HdFloatDataSourceHandle &dampingRateFullThrottle);
        USDPHYSICSIMAGING_API
        Builder &SetDampingRateZeroThrottleClutchDisengaged(
            const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchDisengaged);
        USDPHYSICSIMAGING_API
        Builder &SetDampingRateZeroThrottleClutchEngaged(
            const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchEngaged);
        USDPHYSICSIMAGING_API
        Builder &SetIdleRotationSpeed(
            const HdFloatDataSourceHandle &idleRotationSpeed);
        USDPHYSICSIMAGING_API
        Builder &SetMaxRotationSpeed(
            const HdFloatDataSourceHandle &maxRotationSpeed);
        USDPHYSICSIMAGING_API
        Builder &SetMoi(
            const HdFloatDataSourceHandle &moi);
        USDPHYSICSIMAGING_API
        Builder &SetPeakTorque(
            const HdFloatDataSourceHandle &peakTorque);
        USDPHYSICSIMAGING_API
        Builder &SetTorqueCurve(
            const HdVec2fDataSourceHandle &torqueCurve);

        /// Returns a container data source containing the members set thus far.
        USDPHYSICSIMAGING_API
        HdContainerDataSourceHandle Build();

    private:
        HdFloatDataSourceHandle _dampingRateFullThrottle;
        HdFloatDataSourceHandle _dampingRateZeroThrottleClutchDisengaged;
        HdFloatDataSourceHandle _dampingRateZeroThrottleClutchEngaged;
        HdFloatDataSourceHandle _idleRotationSpeed;
        HdFloatDataSourceHandle _maxRotationSpeed;
        HdFloatDataSourceHandle _moi;
        HdFloatDataSourceHandle _peakTorque;
        HdVec2fDataSourceHandle _torqueCurve;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif