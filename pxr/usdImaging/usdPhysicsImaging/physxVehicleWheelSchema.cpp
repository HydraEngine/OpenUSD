//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleWheelSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleWheelSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_WHEEL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::GetDampingRate() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->dampingRate);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::GetMass() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->mass);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::GetMoi() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->moi);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::GetRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->radius);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::GetWidth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->width);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::BuildRetained(
        const HdFloatDataSourceHandle &dampingRate,
        const HdFloatDataSourceHandle &mass,
        const HdFloatDataSourceHandle &moi,
        const HdFloatDataSourceHandle &radius,
        const HdFloatDataSourceHandle &width
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (dampingRate) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->dampingRate;
        _values[_count++] = dampingRate;
    }

    if (mass) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->mass;
        _values[_count++] = mass;
    }

    if (moi) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->moi;
        _values[_count++] = moi;
    }

    if (radius) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->radius;
        _values[_count++] = radius;
    }

    if (width) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->width;
        _values[_count++] = width;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleWheelSchema::Builder &
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::SetDampingRate(
    const HdFloatDataSourceHandle &dampingRate)
{
    _dampingRate = dampingRate;
    return *this;
}

UsdPhysicsImagingPhysxVehicleWheelSchema::Builder &
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::SetMass(
    const HdFloatDataSourceHandle &mass)
{
    _mass = mass;
    return *this;
}

UsdPhysicsImagingPhysxVehicleWheelSchema::Builder &
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::SetMoi(
    const HdFloatDataSourceHandle &moi)
{
    _moi = moi;
    return *this;
}

UsdPhysicsImagingPhysxVehicleWheelSchema::Builder &
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::SetRadius(
    const HdFloatDataSourceHandle &radius)
{
    _radius = radius;
    return *this;
}

UsdPhysicsImagingPhysxVehicleWheelSchema::Builder &
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::SetWidth(
    const HdFloatDataSourceHandle &width)
{
    _width = width;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleWheelSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleWheelSchema::BuildRetained(
        _dampingRate,
        _mass,
        _moi,
        _radius,
        _width
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleWheelSchema
UsdPhysicsImagingPhysxVehicleWheelSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleWheelSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->physxVehicleWheel))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->physxVehicleWheel;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetDampingRateLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->dampingRate);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->mass);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetMoiLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->moi);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->radius);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleWheelSchema::GetWidthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleWheelSchemaTokens->width);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE