//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleSuspensionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_SUSPENSION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSpringDamperRate() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springDamperRate);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSpringStrength() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springStrength);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSprungMass() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->sprungMass);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetTravelDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->travelDistance);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::BuildRetained(
        const HdFloatDataSourceHandle &springDamperRate,
        const HdFloatDataSourceHandle &springStrength,
        const HdFloatDataSourceHandle &sprungMass,
        const HdFloatDataSourceHandle &travelDistance
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (springDamperRate) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springDamperRate;
        _values[_count++] = springDamperRate;
    }

    if (springStrength) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springStrength;
        _values[_count++] = springStrength;
    }

    if (sprungMass) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->sprungMass;
        _values[_count++] = sprungMass;
    }

    if (travelDistance) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->travelDistance;
        _values[_count++] = travelDistance;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder::SetSpringDamperRate(
    const HdFloatDataSourceHandle &springDamperRate)
{
    _springDamperRate = springDamperRate;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder::SetSpringStrength(
    const HdFloatDataSourceHandle &springStrength)
{
    _springStrength = springStrength;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder::SetSprungMass(
    const HdFloatDataSourceHandle &sprungMass)
{
    _sprungMass = sprungMass;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder::SetTravelDistance(
    const HdFloatDataSourceHandle &travelDistance)
{
    _travelDistance = travelDistance;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSuspensionSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleSuspensionSchema::BuildRetained(
        _springDamperRate,
        _springStrength,
        _sprungMass,
        _travelDistance
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleSuspensionSchema
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleSuspensionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->physxVehicleSuspension))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->physxVehicleSuspension;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSpringDamperRateLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springDamperRate);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSpringStrengthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->springStrength);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetSprungMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->sprungMass);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSuspensionSchema::GetTravelDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSuspensionSchemaTokens->travelDistance);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE