//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxMimicJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxMimicJointSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_MIMIC_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxMimicJointSchema::GetGearing() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxMimicJointSchemaTokens->gearing);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxMimicJointSchema::GetOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxMimicJointSchemaTokens->offset);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxMimicJointSchema::GetReferenceJointAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxMimicJointSchemaTokens->referenceJointAxis);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxMimicJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &gearing,
        const HdFloatDataSourceHandle &offset,
        const HdTokenDataSourceHandle &referenceJointAxis
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (gearing) {
        _names[_count] = UsdPhysicsImagingPhysxMimicJointSchemaTokens->gearing;
        _values[_count++] = gearing;
    }

    if (offset) {
        _names[_count] = UsdPhysicsImagingPhysxMimicJointSchemaTokens->offset;
        _values[_count++] = offset;
    }

    if (referenceJointAxis) {
        _names[_count] = UsdPhysicsImagingPhysxMimicJointSchemaTokens->referenceJointAxis;
        _values[_count++] = referenceJointAxis;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxMimicJointSchema::Builder &
UsdPhysicsImagingPhysxMimicJointSchema::Builder::SetGearing(
    const HdFloatDataSourceHandle &gearing)
{
    _gearing = gearing;
    return *this;
}

UsdPhysicsImagingPhysxMimicJointSchema::Builder &
UsdPhysicsImagingPhysxMimicJointSchema::Builder::SetOffset(
    const HdFloatDataSourceHandle &offset)
{
    _offset = offset;
    return *this;
}

UsdPhysicsImagingPhysxMimicJointSchema::Builder &
UsdPhysicsImagingPhysxMimicJointSchema::Builder::SetReferenceJointAxis(
    const HdTokenDataSourceHandle &referenceJointAxis)
{
    _referenceJointAxis = referenceJointAxis;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxMimicJointSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxMimicJointSchema::BuildRetained(
        _gearing,
        _offset,
        _referenceJointAxis
    );
}

/*static*/
UsdPhysicsImagingPhysxMimicJointSchema
UsdPhysicsImagingPhysxMimicJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxMimicJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxMimicJointSchemaTokens->physxMimicJoint))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxMimicJointSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxMimicJointSchemaTokens->physxMimicJoint;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxMimicJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxMimicJointSchema::GetGearingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxMimicJointSchemaTokens->gearing);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxMimicJointSchema::GetOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxMimicJointSchemaTokens->offset);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxMimicJointSchema::GetReferenceJointAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxMimicJointSchemaTokens->referenceJointAxis);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE