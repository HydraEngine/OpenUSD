//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxSphereFillCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_SPHERE_FILL_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetFillMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->fillMode);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetMaxSpheres() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->maxSpheres);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetSeedCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->seedCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetVoxelResolution() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->voxelResolution);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::BuildRetained(
        const HdTokenDataSourceHandle &fillMode,
        const HdIntDataSourceHandle &maxSpheres,
        const HdIntDataSourceHandle &seedCount,
        const HdIntDataSourceHandle &voxelResolution
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (fillMode) {
        _names[_count] = UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->fillMode;
        _values[_count++] = fillMode;
    }

    if (maxSpheres) {
        _names[_count] = UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->maxSpheres;
        _values[_count++] = maxSpheres;
    }

    if (seedCount) {
        _names[_count] = UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->seedCount;
        _values[_count++] = seedCount;
    }

    if (voxelResolution) {
        _names[_count] = UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->voxelResolution;
        _values[_count++] = voxelResolution;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder::SetFillMode(
    const HdTokenDataSourceHandle &fillMode)
{
    _fillMode = fillMode;
    return *this;
}

UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder::SetMaxSpheres(
    const HdIntDataSourceHandle &maxSpheres)
{
    _maxSpheres = maxSpheres;
    return *this;
}

UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder::SetSeedCount(
    const HdIntDataSourceHandle &seedCount)
{
    _seedCount = seedCount;
    return *this;
}

UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder::SetVoxelResolution(
    const HdIntDataSourceHandle &voxelResolution)
{
    _voxelResolution = voxelResolution;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxSphereFillCollisionSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxSphereFillCollisionSchema::BuildRetained(
        _fillMode,
        _maxSpheres,
        _seedCount,
        _voxelResolution
    );
}

/*static*/
UsdPhysicsImagingPhysxSphereFillCollisionSchema
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxSphereFillCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->physxSphereFillCollision))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->physxSphereFillCollision;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetFillModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->fillMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetMaxSpheresLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->maxSpheres);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetSeedCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->seedCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSphereFillCollisionSchema::GetVoxelResolutionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSphereFillCollisionSchemaTokens->voxelResolution);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE