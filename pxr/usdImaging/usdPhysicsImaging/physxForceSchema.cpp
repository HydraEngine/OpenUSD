//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxForceSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxForceSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_FORCE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec3fDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::GetForce() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingPhysxForceSchemaTokens->force);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::GetForceEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxForceSchemaTokens->forceEnabled);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::GetMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxForceSchemaTokens->mode);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::GetTorque() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingPhysxForceSchemaTokens->torque);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::GetWorldFrameEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxForceSchemaTokens->worldFrameEnabled);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::BuildRetained(
        const HdVec3fDataSourceHandle &force,
        const HdBoolDataSourceHandle &forceEnabled,
        const HdTokenDataSourceHandle &mode,
        const HdVec3fDataSourceHandle &torque,
        const HdBoolDataSourceHandle &worldFrameEnabled
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (force) {
        _names[_count] = UsdPhysicsImagingPhysxForceSchemaTokens->force;
        _values[_count++] = force;
    }

    if (forceEnabled) {
        _names[_count] = UsdPhysicsImagingPhysxForceSchemaTokens->forceEnabled;
        _values[_count++] = forceEnabled;
    }

    if (mode) {
        _names[_count] = UsdPhysicsImagingPhysxForceSchemaTokens->mode;
        _values[_count++] = mode;
    }

    if (torque) {
        _names[_count] = UsdPhysicsImagingPhysxForceSchemaTokens->torque;
        _values[_count++] = torque;
    }

    if (worldFrameEnabled) {
        _names[_count] = UsdPhysicsImagingPhysxForceSchemaTokens->worldFrameEnabled;
        _values[_count++] = worldFrameEnabled;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxForceSchema::Builder &
UsdPhysicsImagingPhysxForceSchema::Builder::SetForce(
    const HdVec3fDataSourceHandle &force)
{
    _force = force;
    return *this;
}

UsdPhysicsImagingPhysxForceSchema::Builder &
UsdPhysicsImagingPhysxForceSchema::Builder::SetForceEnabled(
    const HdBoolDataSourceHandle &forceEnabled)
{
    _forceEnabled = forceEnabled;
    return *this;
}

UsdPhysicsImagingPhysxForceSchema::Builder &
UsdPhysicsImagingPhysxForceSchema::Builder::SetMode(
    const HdTokenDataSourceHandle &mode)
{
    _mode = mode;
    return *this;
}

UsdPhysicsImagingPhysxForceSchema::Builder &
UsdPhysicsImagingPhysxForceSchema::Builder::SetTorque(
    const HdVec3fDataSourceHandle &torque)
{
    _torque = torque;
    return *this;
}

UsdPhysicsImagingPhysxForceSchema::Builder &
UsdPhysicsImagingPhysxForceSchema::Builder::SetWorldFrameEnabled(
    const HdBoolDataSourceHandle &worldFrameEnabled)
{
    _worldFrameEnabled = worldFrameEnabled;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxForceSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxForceSchema::BuildRetained(
        _force,
        _forceEnabled,
        _mode,
        _torque,
        _worldFrameEnabled
    );
}

/*static*/
UsdPhysicsImagingPhysxForceSchema
UsdPhysicsImagingPhysxForceSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxForceSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxForceSchemaTokens->physxForce))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxForceSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxForceSchemaTokens->physxForce;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetForceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxForceSchemaTokens->force);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetForceEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxForceSchemaTokens->forceEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxForceSchemaTokens->mode);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxForceSchemaTokens->torque);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxForceSchema::GetWorldFrameEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxForceSchemaTokens->worldFrameEnabled);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE