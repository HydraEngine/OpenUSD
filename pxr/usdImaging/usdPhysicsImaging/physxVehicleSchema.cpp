//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetHighForwardSpeedSubStepCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireDamping);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireThresholdSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireThresholdTime() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLimitSuspensionExpansionVelocity() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireDamping);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireThresholdSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireThresholdTime() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetLowForwardSpeedSubStepCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetMinActiveLongitudinalSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetMinLateralSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->minLateralSlipDenominator);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetMinPassiveLongitudinalSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetSubStepThresholdLongitudinalSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetSuspensionLineQueryType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->suspensionLineQueryType);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::GetVehicleEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxVehicleSchemaTokens->vehicleEnabled);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::BuildRetained(
        const HdIntDataSourceHandle &highForwardSpeedSubStepCount,
        const HdFloatDataSourceHandle &lateralStickyTireDamping,
        const HdFloatDataSourceHandle &lateralStickyTireThresholdSpeed,
        const HdFloatDataSourceHandle &lateralStickyTireThresholdTime,
        const HdBoolDataSourceHandle &limitSuspensionExpansionVelocity,
        const HdFloatDataSourceHandle &longitudinalStickyTireDamping,
        const HdFloatDataSourceHandle &longitudinalStickyTireThresholdSpeed,
        const HdFloatDataSourceHandle &longitudinalStickyTireThresholdTime,
        const HdIntDataSourceHandle &lowForwardSpeedSubStepCount,
        const HdFloatDataSourceHandle &minActiveLongitudinalSlipDenominator,
        const HdFloatDataSourceHandle &minLateralSlipDenominator,
        const HdFloatDataSourceHandle &minPassiveLongitudinalSlipDenominator,
        const HdFloatDataSourceHandle &subStepThresholdLongitudinalSpeed,
        const HdTokenDataSourceHandle &suspensionLineQueryType,
        const HdBoolDataSourceHandle &vehicleEnabled
)
{
    TfToken _names[15];
    HdDataSourceBaseHandle _values[15];

    size_t _count = 0;

    if (highForwardSpeedSubStepCount) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount;
        _values[_count++] = highForwardSpeedSubStepCount;
    }

    if (lateralStickyTireDamping) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireDamping;
        _values[_count++] = lateralStickyTireDamping;
    }

    if (lateralStickyTireThresholdSpeed) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed;
        _values[_count++] = lateralStickyTireThresholdSpeed;
    }

    if (lateralStickyTireThresholdTime) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime;
        _values[_count++] = lateralStickyTireThresholdTime;
    }

    if (limitSuspensionExpansionVelocity) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity;
        _values[_count++] = limitSuspensionExpansionVelocity;
    }

    if (longitudinalStickyTireDamping) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireDamping;
        _values[_count++] = longitudinalStickyTireDamping;
    }

    if (longitudinalStickyTireThresholdSpeed) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed;
        _values[_count++] = longitudinalStickyTireThresholdSpeed;
    }

    if (longitudinalStickyTireThresholdTime) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime;
        _values[_count++] = longitudinalStickyTireThresholdTime;
    }

    if (lowForwardSpeedSubStepCount) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount;
        _values[_count++] = lowForwardSpeedSubStepCount;
    }

    if (minActiveLongitudinalSlipDenominator) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator;
        _values[_count++] = minActiveLongitudinalSlipDenominator;
    }

    if (minLateralSlipDenominator) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->minLateralSlipDenominator;
        _values[_count++] = minLateralSlipDenominator;
    }

    if (minPassiveLongitudinalSlipDenominator) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator;
        _values[_count++] = minPassiveLongitudinalSlipDenominator;
    }

    if (subStepThresholdLongitudinalSpeed) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed;
        _values[_count++] = subStepThresholdLongitudinalSpeed;
    }

    if (suspensionLineQueryType) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->suspensionLineQueryType;
        _values[_count++] = suspensionLineQueryType;
    }

    if (vehicleEnabled) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSchemaTokens->vehicleEnabled;
        _values[_count++] = vehicleEnabled;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetHighForwardSpeedSubStepCount(
    const HdIntDataSourceHandle &highForwardSpeedSubStepCount)
{
    _highForwardSpeedSubStepCount = highForwardSpeedSubStepCount;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLateralStickyTireDamping(
    const HdFloatDataSourceHandle &lateralStickyTireDamping)
{
    _lateralStickyTireDamping = lateralStickyTireDamping;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLateralStickyTireThresholdSpeed(
    const HdFloatDataSourceHandle &lateralStickyTireThresholdSpeed)
{
    _lateralStickyTireThresholdSpeed = lateralStickyTireThresholdSpeed;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLateralStickyTireThresholdTime(
    const HdFloatDataSourceHandle &lateralStickyTireThresholdTime)
{
    _lateralStickyTireThresholdTime = lateralStickyTireThresholdTime;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLimitSuspensionExpansionVelocity(
    const HdBoolDataSourceHandle &limitSuspensionExpansionVelocity)
{
    _limitSuspensionExpansionVelocity = limitSuspensionExpansionVelocity;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLongitudinalStickyTireDamping(
    const HdFloatDataSourceHandle &longitudinalStickyTireDamping)
{
    _longitudinalStickyTireDamping = longitudinalStickyTireDamping;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLongitudinalStickyTireThresholdSpeed(
    const HdFloatDataSourceHandle &longitudinalStickyTireThresholdSpeed)
{
    _longitudinalStickyTireThresholdSpeed = longitudinalStickyTireThresholdSpeed;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLongitudinalStickyTireThresholdTime(
    const HdFloatDataSourceHandle &longitudinalStickyTireThresholdTime)
{
    _longitudinalStickyTireThresholdTime = longitudinalStickyTireThresholdTime;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetLowForwardSpeedSubStepCount(
    const HdIntDataSourceHandle &lowForwardSpeedSubStepCount)
{
    _lowForwardSpeedSubStepCount = lowForwardSpeedSubStepCount;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetMinActiveLongitudinalSlipDenominator(
    const HdFloatDataSourceHandle &minActiveLongitudinalSlipDenominator)
{
    _minActiveLongitudinalSlipDenominator = minActiveLongitudinalSlipDenominator;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetMinLateralSlipDenominator(
    const HdFloatDataSourceHandle &minLateralSlipDenominator)
{
    _minLateralSlipDenominator = minLateralSlipDenominator;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetMinPassiveLongitudinalSlipDenominator(
    const HdFloatDataSourceHandle &minPassiveLongitudinalSlipDenominator)
{
    _minPassiveLongitudinalSlipDenominator = minPassiveLongitudinalSlipDenominator;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetSubStepThresholdLongitudinalSpeed(
    const HdFloatDataSourceHandle &subStepThresholdLongitudinalSpeed)
{
    _subStepThresholdLongitudinalSpeed = subStepThresholdLongitudinalSpeed;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetSuspensionLineQueryType(
    const HdTokenDataSourceHandle &suspensionLineQueryType)
{
    _suspensionLineQueryType = suspensionLineQueryType;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSchema::Builder &
UsdPhysicsImagingPhysxVehicleSchema::Builder::SetVehicleEnabled(
    const HdBoolDataSourceHandle &vehicleEnabled)
{
    _vehicleEnabled = vehicleEnabled;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleSchema::BuildRetained(
        _highForwardSpeedSubStepCount,
        _lateralStickyTireDamping,
        _lateralStickyTireThresholdSpeed,
        _lateralStickyTireThresholdTime,
        _limitSuspensionExpansionVelocity,
        _longitudinalStickyTireDamping,
        _longitudinalStickyTireThresholdSpeed,
        _longitudinalStickyTireThresholdTime,
        _lowForwardSpeedSubStepCount,
        _minActiveLongitudinalSlipDenominator,
        _minLateralSlipDenominator,
        _minPassiveLongitudinalSlipDenominator,
        _subStepThresholdLongitudinalSpeed,
        _suspensionLineQueryType,
        _vehicleEnabled
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleSchema
UsdPhysicsImagingPhysxVehicleSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleSchemaTokens->physxVehicle))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleSchemaTokens->physxVehicle;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetHighForwardSpeedSubStepCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireThresholdSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLateralStickyTireThresholdTimeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLimitSuspensionExpansionVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireThresholdSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLongitudinalStickyTireThresholdTimeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetLowForwardSpeedSubStepCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetMinActiveLongitudinalSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetMinLateralSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->minLateralSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetMinPassiveLongitudinalSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetSubStepThresholdLongitudinalSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetSuspensionLineQueryTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->suspensionLineQueryType);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSchema::GetVehicleEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSchemaTokens->vehicleEnabled);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE