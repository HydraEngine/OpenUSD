//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleDriveBasicSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_DRIVE_BASIC_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::GetPeakTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens->peakTorque);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::BuildRetained(
        const HdFloatDataSourceHandle &peakTorque
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (peakTorque) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens->peakTorque;
        _values[_count++] = peakTorque;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleDriveBasicSchema::Builder &
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::Builder::SetPeakTorque(
    const HdFloatDataSourceHandle &peakTorque)
{
    _peakTorque = peakTorque;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleDriveBasicSchema::BuildRetained(
        _peakTorque
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleDriveBasicSchema
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleDriveBasicSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens->physxVehicleDriveBasic))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens->physxVehicleDriveBasic;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleDriveBasicSchema::GetPeakTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleDriveBasicSchemaTokens->peakTorque);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE