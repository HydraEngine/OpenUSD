//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleBrakesSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_BRAKES_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetMaxBrakeTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->maxBrakeTorque);
}

HdFloatArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetTorqueMultipliers() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->torqueMultipliers);
}

HdIntArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetWheels() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->wheels);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleBrakesSchema::BuildRetained(
        const HdFloatDataSourceHandle &maxBrakeTorque,
        const HdFloatArrayDataSourceHandle &torqueMultipliers,
        const HdIntArrayDataSourceHandle &wheels
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (maxBrakeTorque) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->maxBrakeTorque;
        _values[_count++] = maxBrakeTorque;
    }

    if (torqueMultipliers) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->torqueMultipliers;
        _values[_count++] = torqueMultipliers;
    }

    if (wheels) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->wheels;
        _values[_count++] = wheels;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder &
UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder::SetMaxBrakeTorque(
    const HdFloatDataSourceHandle &maxBrakeTorque)
{
    _maxBrakeTorque = maxBrakeTorque;
    return *this;
}

UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder &
UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder::SetTorqueMultipliers(
    const HdFloatArrayDataSourceHandle &torqueMultipliers)
{
    _torqueMultipliers = torqueMultipliers;
    return *this;
}

UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder &
UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder::SetWheels(
    const HdIntArrayDataSourceHandle &wheels)
{
    _wheels = wheels;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleBrakesSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleBrakesSchema::BuildRetained(
        _maxBrakeTorque,
        _torqueMultipliers,
        _wheels
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleBrakesSchema
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleBrakesSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->physxVehicleBrakes))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->physxVehicleBrakes;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetMaxBrakeTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->maxBrakeTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetTorqueMultipliersLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->torqueMultipliers);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleBrakesSchema::GetWheelsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleBrakesSchemaTokens->wheels);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE