//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/collisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingCollisionSchemaTokens,
    USD_PHYSICS_IMAGING_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
UsdPhysicsImagingCollisionSchema::GetCollisionEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingCollisionSchemaTokens->collisionEnabled);
}

HdPathArrayDataSourceHandle
UsdPhysicsImagingCollisionSchema::GetSimulationOwner() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        UsdPhysicsImagingCollisionSchemaTokens->simulationOwner);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingCollisionSchema::BuildRetained(
        const HdBoolDataSourceHandle &collisionEnabled,
        const HdPathArrayDataSourceHandle &simulationOwner
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (collisionEnabled) {
        _names[_count] = UsdPhysicsImagingCollisionSchemaTokens->collisionEnabled;
        _values[_count++] = collisionEnabled;
    }

    if (simulationOwner) {
        _names[_count] = UsdPhysicsImagingCollisionSchemaTokens->simulationOwner;
        _values[_count++] = simulationOwner;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingCollisionSchema::Builder &
UsdPhysicsImagingCollisionSchema::Builder::SetCollisionEnabled(
    const HdBoolDataSourceHandle &collisionEnabled)
{
    _collisionEnabled = collisionEnabled;
    return *this;
}

UsdPhysicsImagingCollisionSchema::Builder &
UsdPhysicsImagingCollisionSchema::Builder::SetSimulationOwner(
    const HdPathArrayDataSourceHandle &simulationOwner)
{
    _simulationOwner = simulationOwner;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingCollisionSchema::Builder::Build()
{
    return UsdPhysicsImagingCollisionSchema::BuildRetained(
        _collisionEnabled,
        _simulationOwner
    );
}

/*static*/
UsdPhysicsImagingCollisionSchema
UsdPhysicsImagingCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingCollisionSchemaTokens->collision))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingCollisionSchema::GetSchemaToken()
{
    return UsdPhysicsImagingCollisionSchemaTokens->collision;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingCollisionSchema::GetCollisionEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingCollisionSchemaTokens->collisionEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingCollisionSchema::GetSimulationOwnerLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingCollisionSchemaTokens->simulationOwner);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE