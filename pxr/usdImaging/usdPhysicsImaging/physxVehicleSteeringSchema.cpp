//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleSteeringSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_STEERING_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetAngleMultipliers() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->angleMultipliers);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetMaxSteerAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->maxSteerAngle);
}

HdIntArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetWheels() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->wheels);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSteeringSchema::BuildRetained(
        const HdFloatArrayDataSourceHandle &angleMultipliers,
        const HdFloatDataSourceHandle &maxSteerAngle,
        const HdIntArrayDataSourceHandle &wheels
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (angleMultipliers) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->angleMultipliers;
        _values[_count++] = angleMultipliers;
    }

    if (maxSteerAngle) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->maxSteerAngle;
        _values[_count++] = maxSteerAngle;
    }

    if (wheels) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->wheels;
        _values[_count++] = wheels;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder &
UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder::SetAngleMultipliers(
    const HdFloatArrayDataSourceHandle &angleMultipliers)
{
    _angleMultipliers = angleMultipliers;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder &
UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder::SetMaxSteerAngle(
    const HdFloatDataSourceHandle &maxSteerAngle)
{
    _maxSteerAngle = maxSteerAngle;
    return *this;
}

UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder &
UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder::SetWheels(
    const HdIntArrayDataSourceHandle &wheels)
{
    _wheels = wheels;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleSteeringSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleSteeringSchema::BuildRetained(
        _angleMultipliers,
        _maxSteerAngle,
        _wheels
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleSteeringSchema
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleSteeringSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->physxVehicleSteering))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->physxVehicleSteering;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetAngleMultipliersLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->angleMultipliers);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetMaxSteerAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->maxSteerAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleSteeringSchema::GetWheelsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleSteeringSchemaTokens->wheels);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE