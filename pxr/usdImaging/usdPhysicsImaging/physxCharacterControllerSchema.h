//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_CHARACTER_CONTROLLER_SCHEMA_H
#define PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_CHARACTER_CONTROLLER_SCHEMA_H

/// \file

#include "pxr/usdImaging/usdPhysicsImaging/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define USD_PHYSICS_IMAGING_PHYSX_CHARACTER_CONTROLLER_SCHEMA_TOKENS \
    (physxCharacterController) \
    (climbingMode) \
    (contactOffset) \
    (invisibleWallHeight) \
    (maxJumpHeight) \
    (moveTarget) \
    (nonWalkableMode) \
    (scaleCoeff) \
    (slopeLimit) \
    (stepOffset) \
    (upAxis) \
    (volumeGrowth) \

TF_DECLARE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxCharacterControllerSchemaTokens, USDPHYSICSIMAGING_API,
    USD_PHYSICS_IMAGING_PHYSX_CHARACTER_CONTROLLER_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class UsdPhysicsImagingPhysxCharacterControllerSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    UsdPhysicsImagingPhysxCharacterControllerSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "physxCharacterController" from the parent container and constructs a
    /// UsdPhysicsImagingPhysxCharacterControllerSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    USDPHYSICSIMAGING_API
    static UsdPhysicsImagingPhysxCharacterControllerSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    USDPHYSICSIMAGING_API
    HdTokenDataSourceHandle GetClimbingMode() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetContactOffset() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetInvisibleWallHeight() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetMaxJumpHeight() const;

    USDPHYSICSIMAGING_API
    HdVec3fDataSourceHandle GetMoveTarget() const;

    USDPHYSICSIMAGING_API
    HdTokenDataSourceHandle GetNonWalkableMode() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetScaleCoeff() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetSlopeLimit() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetStepOffset() const;

    USDPHYSICSIMAGING_API
    HdTokenDataSourceHandle GetUpAxis() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetVolumeGrowth() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    USDPHYSICSIMAGING_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate climbingMode.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetClimbingModeLocator();

    /// Prim-level relative data source locator to locate contactOffset.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetContactOffsetLocator();

    /// Prim-level relative data source locator to locate invisibleWallHeight.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetInvisibleWallHeightLocator();

    /// Prim-level relative data source locator to locate maxJumpHeight.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMaxJumpHeightLocator();

    /// Prim-level relative data source locator to locate moveTarget.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMoveTargetLocator();

    /// Prim-level relative data source locator to locate nonWalkableMode.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetNonWalkableModeLocator();

    /// Prim-level relative data source locator to locate scaleCoeff.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetScaleCoeffLocator();

    /// Prim-level relative data source locator to locate slopeLimit.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetSlopeLimitLocator();

    /// Prim-level relative data source locator to locate stepOffset.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetStepOffsetLocator();

    /// Prim-level relative data source locator to locate upAxis.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetUpAxisLocator();

    /// Prim-level relative data source locator to locate volumeGrowth.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetVolumeGrowthLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    USDPHYSICSIMAGING_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdTokenDataSourceHandle &climbingMode,
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &invisibleWallHeight,
        const HdFloatDataSourceHandle &maxJumpHeight,
        const HdVec3fDataSourceHandle &moveTarget,
        const HdTokenDataSourceHandle &nonWalkableMode,
        const HdFloatDataSourceHandle &scaleCoeff,
        const HdFloatDataSourceHandle &slopeLimit,
        const HdFloatDataSourceHandle &stepOffset,
        const HdTokenDataSourceHandle &upAxis,
        const HdFloatDataSourceHandle &volumeGrowth
    );

    /// \class UsdPhysicsImagingPhysxCharacterControllerSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        USDPHYSICSIMAGING_API
        Builder &SetClimbingMode(
            const HdTokenDataSourceHandle &climbingMode);
        USDPHYSICSIMAGING_API
        Builder &SetContactOffset(
            const HdFloatDataSourceHandle &contactOffset);
        USDPHYSICSIMAGING_API
        Builder &SetInvisibleWallHeight(
            const HdFloatDataSourceHandle &invisibleWallHeight);
        USDPHYSICSIMAGING_API
        Builder &SetMaxJumpHeight(
            const HdFloatDataSourceHandle &maxJumpHeight);
        USDPHYSICSIMAGING_API
        Builder &SetMoveTarget(
            const HdVec3fDataSourceHandle &moveTarget);
        USDPHYSICSIMAGING_API
        Builder &SetNonWalkableMode(
            const HdTokenDataSourceHandle &nonWalkableMode);
        USDPHYSICSIMAGING_API
        Builder &SetScaleCoeff(
            const HdFloatDataSourceHandle &scaleCoeff);
        USDPHYSICSIMAGING_API
        Builder &SetSlopeLimit(
            const HdFloatDataSourceHandle &slopeLimit);
        USDPHYSICSIMAGING_API
        Builder &SetStepOffset(
            const HdFloatDataSourceHandle &stepOffset);
        USDPHYSICSIMAGING_API
        Builder &SetUpAxis(
            const HdTokenDataSourceHandle &upAxis);
        USDPHYSICSIMAGING_API
        Builder &SetVolumeGrowth(
            const HdFloatDataSourceHandle &volumeGrowth);

        /// Returns a container data source containing the members set thus far.
        USDPHYSICSIMAGING_API
        HdContainerDataSourceHandle Build();

    private:
        HdTokenDataSourceHandle _climbingMode;
        HdFloatDataSourceHandle _contactOffset;
        HdFloatDataSourceHandle _invisibleWallHeight;
        HdFloatDataSourceHandle _maxJumpHeight;
        HdVec3fDataSourceHandle _moveTarget;
        HdTokenDataSourceHandle _nonWalkableMode;
        HdFloatDataSourceHandle _scaleCoeff;
        HdFloatDataSourceHandle _slopeLimit;
        HdFloatDataSourceHandle _stepOffset;
        HdTokenDataSourceHandle _upAxis;
        HdFloatDataSourceHandle _volumeGrowth;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif