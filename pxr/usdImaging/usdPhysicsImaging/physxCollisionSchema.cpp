//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxCollisionSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::GetContactOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCollisionSchemaTokens->contactOffset);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::GetMinTorsionalPatchRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCollisionSchemaTokens->minTorsionalPatchRadius);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::GetRestOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCollisionSchemaTokens->restOffset);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::GetTorsionalPatchRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCollisionSchemaTokens->torsionalPatchRadius);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::BuildRetained(
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &minTorsionalPatchRadius,
        const HdFloatDataSourceHandle &restOffset,
        const HdFloatDataSourceHandle &torsionalPatchRadius
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (contactOffset) {
        _names[_count] = UsdPhysicsImagingPhysxCollisionSchemaTokens->contactOffset;
        _values[_count++] = contactOffset;
    }

    if (minTorsionalPatchRadius) {
        _names[_count] = UsdPhysicsImagingPhysxCollisionSchemaTokens->minTorsionalPatchRadius;
        _values[_count++] = minTorsionalPatchRadius;
    }

    if (restOffset) {
        _names[_count] = UsdPhysicsImagingPhysxCollisionSchemaTokens->restOffset;
        _values[_count++] = restOffset;
    }

    if (torsionalPatchRadius) {
        _names[_count] = UsdPhysicsImagingPhysxCollisionSchemaTokens->torsionalPatchRadius;
        _values[_count++] = torsionalPatchRadius;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxCollisionSchema::Builder &
UsdPhysicsImagingPhysxCollisionSchema::Builder::SetContactOffset(
    const HdFloatDataSourceHandle &contactOffset)
{
    _contactOffset = contactOffset;
    return *this;
}

UsdPhysicsImagingPhysxCollisionSchema::Builder &
UsdPhysicsImagingPhysxCollisionSchema::Builder::SetMinTorsionalPatchRadius(
    const HdFloatDataSourceHandle &minTorsionalPatchRadius)
{
    _minTorsionalPatchRadius = minTorsionalPatchRadius;
    return *this;
}

UsdPhysicsImagingPhysxCollisionSchema::Builder &
UsdPhysicsImagingPhysxCollisionSchema::Builder::SetRestOffset(
    const HdFloatDataSourceHandle &restOffset)
{
    _restOffset = restOffset;
    return *this;
}

UsdPhysicsImagingPhysxCollisionSchema::Builder &
UsdPhysicsImagingPhysxCollisionSchema::Builder::SetTorsionalPatchRadius(
    const HdFloatDataSourceHandle &torsionalPatchRadius)
{
    _torsionalPatchRadius = torsionalPatchRadius;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxCollisionSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxCollisionSchema::BuildRetained(
        _contactOffset,
        _minTorsionalPatchRadius,
        _restOffset,
        _torsionalPatchRadius
    );
}

/*static*/
UsdPhysicsImagingPhysxCollisionSchema
UsdPhysicsImagingPhysxCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxCollisionSchemaTokens->physxCollision))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxCollisionSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxCollisionSchemaTokens->physxCollision;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCollisionSchema::GetContactOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCollisionSchemaTokens->contactOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCollisionSchema::GetMinTorsionalPatchRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCollisionSchemaTokens->minTorsionalPatchRadius);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCollisionSchema::GetRestOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCollisionSchemaTokens->restOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCollisionSchema::GetTorsionalPatchRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCollisionSchemaTokens->torsionalPatchRadius);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE