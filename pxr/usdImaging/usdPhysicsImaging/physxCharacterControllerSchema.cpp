//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxCharacterControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxCharacterControllerSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_CHARACTER_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetClimbingMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->climbingMode);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetContactOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->contactOffset);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetInvisibleWallHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetMaxJumpHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->maxJumpHeight);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetMoveTarget() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->moveTarget);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetNonWalkableMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->nonWalkableMode);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetScaleCoeff() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->scaleCoeff);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetSlopeLimit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->slopeLimit);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetStepOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->stepOffset);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetUpAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->upAxis);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::GetVolumeGrowth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->volumeGrowth);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::BuildRetained(
        const HdTokenDataSourceHandle &climbingMode,
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &invisibleWallHeight,
        const HdFloatDataSourceHandle &maxJumpHeight,
        const HdVec3fDataSourceHandle &moveTarget,
        const HdTokenDataSourceHandle &nonWalkableMode,
        const HdFloatDataSourceHandle &scaleCoeff,
        const HdFloatDataSourceHandle &slopeLimit,
        const HdFloatDataSourceHandle &stepOffset,
        const HdTokenDataSourceHandle &upAxis,
        const HdFloatDataSourceHandle &volumeGrowth
)
{
    TfToken _names[11];
    HdDataSourceBaseHandle _values[11];

    size_t _count = 0;

    if (climbingMode) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->climbingMode;
        _values[_count++] = climbingMode;
    }

    if (contactOffset) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->contactOffset;
        _values[_count++] = contactOffset;
    }

    if (invisibleWallHeight) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->invisibleWallHeight;
        _values[_count++] = invisibleWallHeight;
    }

    if (maxJumpHeight) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->maxJumpHeight;
        _values[_count++] = maxJumpHeight;
    }

    if (moveTarget) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->moveTarget;
        _values[_count++] = moveTarget;
    }

    if (nonWalkableMode) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->nonWalkableMode;
        _values[_count++] = nonWalkableMode;
    }

    if (scaleCoeff) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->scaleCoeff;
        _values[_count++] = scaleCoeff;
    }

    if (slopeLimit) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->slopeLimit;
        _values[_count++] = slopeLimit;
    }

    if (stepOffset) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->stepOffset;
        _values[_count++] = stepOffset;
    }

    if (upAxis) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->upAxis;
        _values[_count++] = upAxis;
    }

    if (volumeGrowth) {
        _names[_count] = UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->volumeGrowth;
        _values[_count++] = volumeGrowth;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetClimbingMode(
    const HdTokenDataSourceHandle &climbingMode)
{
    _climbingMode = climbingMode;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetContactOffset(
    const HdFloatDataSourceHandle &contactOffset)
{
    _contactOffset = contactOffset;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetInvisibleWallHeight(
    const HdFloatDataSourceHandle &invisibleWallHeight)
{
    _invisibleWallHeight = invisibleWallHeight;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetMaxJumpHeight(
    const HdFloatDataSourceHandle &maxJumpHeight)
{
    _maxJumpHeight = maxJumpHeight;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetMoveTarget(
    const HdVec3fDataSourceHandle &moveTarget)
{
    _moveTarget = moveTarget;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetNonWalkableMode(
    const HdTokenDataSourceHandle &nonWalkableMode)
{
    _nonWalkableMode = nonWalkableMode;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetScaleCoeff(
    const HdFloatDataSourceHandle &scaleCoeff)
{
    _scaleCoeff = scaleCoeff;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetSlopeLimit(
    const HdFloatDataSourceHandle &slopeLimit)
{
    _slopeLimit = slopeLimit;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetStepOffset(
    const HdFloatDataSourceHandle &stepOffset)
{
    _stepOffset = stepOffset;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetUpAxis(
    const HdTokenDataSourceHandle &upAxis)
{
    _upAxis = upAxis;
    return *this;
}

UsdPhysicsImagingPhysxCharacterControllerSchema::Builder &
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::SetVolumeGrowth(
    const HdFloatDataSourceHandle &volumeGrowth)
{
    _volumeGrowth = volumeGrowth;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxCharacterControllerSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxCharacterControllerSchema::BuildRetained(
        _climbingMode,
        _contactOffset,
        _invisibleWallHeight,
        _maxJumpHeight,
        _moveTarget,
        _nonWalkableMode,
        _scaleCoeff,
        _slopeLimit,
        _stepOffset,
        _upAxis,
        _volumeGrowth
    );
}

/*static*/
UsdPhysicsImagingPhysxCharacterControllerSchema
UsdPhysicsImagingPhysxCharacterControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxCharacterControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->physxCharacterController))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->physxCharacterController;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetClimbingModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->climbingMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetContactOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->contactOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetInvisibleWallHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetMaxJumpHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->maxJumpHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetMoveTargetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->moveTarget);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetNonWalkableModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->nonWalkableMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetScaleCoeffLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->scaleCoeff);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetSlopeLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->slopeLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetStepOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->stepOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetUpAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->upAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxCharacterControllerSchema::GetVolumeGrowthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxCharacterControllerSchemaTokens->volumeGrowth);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE