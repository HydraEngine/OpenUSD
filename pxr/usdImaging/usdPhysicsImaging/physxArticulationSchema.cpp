//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxArticulationSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxArticulationSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_ARTICULATION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetArticulationEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->articulationEnabled);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetEnabledSelfCollisions() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->enabledSelfCollisions);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetSleepThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->sleepThreshold);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetSolverPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->solverPositionIterationCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetSolverVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->solverVelocityIterationCount);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::GetStabilizationThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxArticulationSchemaTokens->stabilizationThreshold);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::BuildRetained(
        const HdBoolDataSourceHandle &articulationEnabled,
        const HdBoolDataSourceHandle &enabledSelfCollisions,
        const HdFloatDataSourceHandle &sleepThreshold,
        const HdIntDataSourceHandle &solverPositionIterationCount,
        const HdIntDataSourceHandle &solverVelocityIterationCount,
        const HdFloatDataSourceHandle &stabilizationThreshold
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (articulationEnabled) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->articulationEnabled;
        _values[_count++] = articulationEnabled;
    }

    if (enabledSelfCollisions) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->enabledSelfCollisions;
        _values[_count++] = enabledSelfCollisions;
    }

    if (sleepThreshold) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->sleepThreshold;
        _values[_count++] = sleepThreshold;
    }

    if (solverPositionIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->solverPositionIterationCount;
        _values[_count++] = solverPositionIterationCount;
    }

    if (solverVelocityIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->solverVelocityIterationCount;
        _values[_count++] = solverVelocityIterationCount;
    }

    if (stabilizationThreshold) {
        _names[_count] = UsdPhysicsImagingPhysxArticulationSchemaTokens->stabilizationThreshold;
        _values[_count++] = stabilizationThreshold;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetArticulationEnabled(
    const HdBoolDataSourceHandle &articulationEnabled)
{
    _articulationEnabled = articulationEnabled;
    return *this;
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetEnabledSelfCollisions(
    const HdBoolDataSourceHandle &enabledSelfCollisions)
{
    _enabledSelfCollisions = enabledSelfCollisions;
    return *this;
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetSleepThreshold(
    const HdFloatDataSourceHandle &sleepThreshold)
{
    _sleepThreshold = sleepThreshold;
    return *this;
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetSolverPositionIterationCount(
    const HdIntDataSourceHandle &solverPositionIterationCount)
{
    _solverPositionIterationCount = solverPositionIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetSolverVelocityIterationCount(
    const HdIntDataSourceHandle &solverVelocityIterationCount)
{
    _solverVelocityIterationCount = solverVelocityIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxArticulationSchema::Builder &
UsdPhysicsImagingPhysxArticulationSchema::Builder::SetStabilizationThreshold(
    const HdFloatDataSourceHandle &stabilizationThreshold)
{
    _stabilizationThreshold = stabilizationThreshold;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxArticulationSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxArticulationSchema::BuildRetained(
        _articulationEnabled,
        _enabledSelfCollisions,
        _sleepThreshold,
        _solverPositionIterationCount,
        _solverVelocityIterationCount,
        _stabilizationThreshold
    );
}

/*static*/
UsdPhysicsImagingPhysxArticulationSchema
UsdPhysicsImagingPhysxArticulationSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxArticulationSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxArticulationSchemaTokens->physxArticulation))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxArticulationSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxArticulationSchemaTokens->physxArticulation;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetArticulationEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->articulationEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetEnabledSelfCollisionsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->enabledSelfCollisions);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetSleepThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->sleepThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetSolverPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->solverPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetSolverVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->solverVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxArticulationSchema::GetStabilizationThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxArticulationSchemaTokens->stabilizationThreshold);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE