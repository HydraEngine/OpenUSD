//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/materialSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingMaterialSchemaTokens,
    USD_PHYSICS_IMAGING_MATERIAL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingMaterialSchema::GetDensity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingMaterialSchemaTokens->density);
}

HdFloatDataSourceHandle
UsdPhysicsImagingMaterialSchema::GetRestitution() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingMaterialSchemaTokens->restitution);
}

HdFloatDataSourceHandle
UsdPhysicsImagingMaterialSchema::GetDynamicFriction() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingMaterialSchemaTokens->dynamicFriction);
}

HdFloatDataSourceHandle
UsdPhysicsImagingMaterialSchema::GetStaticFriction() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingMaterialSchemaTokens->staticFriction);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingMaterialSchema::BuildRetained(
        const HdFloatDataSourceHandle &density,
        const HdFloatDataSourceHandle &restitution,
        const HdFloatDataSourceHandle &dynamicFriction,
        const HdFloatDataSourceHandle &staticFriction
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (density) {
        _names[_count] = UsdPhysicsImagingMaterialSchemaTokens->density;
        _values[_count++] = density;
    }

    if (restitution) {
        _names[_count] = UsdPhysicsImagingMaterialSchemaTokens->restitution;
        _values[_count++] = restitution;
    }

    if (dynamicFriction) {
        _names[_count] = UsdPhysicsImagingMaterialSchemaTokens->dynamicFriction;
        _values[_count++] = dynamicFriction;
    }

    if (staticFriction) {
        _names[_count] = UsdPhysicsImagingMaterialSchemaTokens->staticFriction;
        _values[_count++] = staticFriction;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingMaterialSchema::Builder &
UsdPhysicsImagingMaterialSchema::Builder::SetDensity(
    const HdFloatDataSourceHandle &density)
{
    _density = density;
    return *this;
}

UsdPhysicsImagingMaterialSchema::Builder &
UsdPhysicsImagingMaterialSchema::Builder::SetRestitution(
    const HdFloatDataSourceHandle &restitution)
{
    _restitution = restitution;
    return *this;
}

UsdPhysicsImagingMaterialSchema::Builder &
UsdPhysicsImagingMaterialSchema::Builder::SetDynamicFriction(
    const HdFloatDataSourceHandle &dynamicFriction)
{
    _dynamicFriction = dynamicFriction;
    return *this;
}

UsdPhysicsImagingMaterialSchema::Builder &
UsdPhysicsImagingMaterialSchema::Builder::SetStaticFriction(
    const HdFloatDataSourceHandle &staticFriction)
{
    _staticFriction = staticFriction;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingMaterialSchema::Builder::Build()
{
    return UsdPhysicsImagingMaterialSchema::BuildRetained(
        _density,
        _restitution,
        _dynamicFriction,
        _staticFriction
    );
}

/*static*/
UsdPhysicsImagingMaterialSchema
UsdPhysicsImagingMaterialSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingMaterialSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingMaterialSchemaTokens->material))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingMaterialSchema::GetSchemaToken()
{
    return UsdPhysicsImagingMaterialSchemaTokens->material;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingMaterialSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingMaterialSchema::GetDensityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingMaterialSchemaTokens->density);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingMaterialSchema::GetRestitutionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingMaterialSchemaTokens->restitution);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingMaterialSchema::GetDynamicFrictionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingMaterialSchemaTokens->dynamicFriction);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingMaterialSchema::GetStaticFrictionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingMaterialSchemaTokens->staticFriction);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE