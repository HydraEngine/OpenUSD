//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxSceneSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxSceneSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_SCENE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetBounceThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->bounceThreshold);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetBroadphaseType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->broadphaseType);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetCollisionSystem() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->collisionSystem);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableCCD);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableEnhancedDeterminism() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableEnhancedDeterminism);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableExternalForcesEveryIteration() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableExternalForcesEveryIteration);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableGPUDynamics() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableGPUDynamics);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableResidualReporting() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableResidualReporting);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableSceneQuerySupport() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableSceneQuerySupport);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetEnableStabilization() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->enableStabilization);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetFrictionCorrelationDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->frictionCorrelationDistance);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetFrictionOffsetThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->frictionOffsetThreshold);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetFrictionType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->frictionType);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuCollisionStackSize() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuCollisionStackSize);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuFoundLostAggregatePairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuFoundLostPairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuHeapCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuHeapCapacity);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxDeformableSurfaceContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxHairContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxHairContacts);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxNumPartitions() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxNumPartitions);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxParticleContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxParticleContacts);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxRigidContactCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidContactCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxRigidPatchCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidPatchCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxSoftBodyContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuTempBufferCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTempBufferCapacity);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetGpuTotalAggregatePairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetInvertCollisionGroupFilter() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->invertCollisionGroupFilter);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetMaxBiasCoefficient() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->maxBiasCoefficient);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetMaxPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->maxPositionIterationCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetMaxVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->maxVelocityIterationCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetMinPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->minPositionIterationCount);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetMinVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->minVelocityIterationCount);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetReportKinematicKinematicPairs() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicKinematicPairs);
}

HdBoolDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetReportKinematicStaticPairs() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicStaticPairs);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetSolverType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->solverType);
}

HdIntDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetTimeStepsPerSecond() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->timeStepsPerSecond);
}

HdTokenDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::GetUpdateType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdPhysicsImagingPhysxSceneSchemaTokens->updateType);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::BuildRetained(
        const HdFloatDataSourceHandle &bounceThreshold,
        const HdTokenDataSourceHandle &broadphaseType,
        const HdTokenDataSourceHandle &collisionSystem,
        const HdBoolDataSourceHandle &enableCCD,
        const HdBoolDataSourceHandle &enableEnhancedDeterminism,
        const HdBoolDataSourceHandle &enableExternalForcesEveryIteration,
        const HdBoolDataSourceHandle &enableGPUDynamics,
        const HdBoolDataSourceHandle &enableResidualReporting,
        const HdBoolDataSourceHandle &enableSceneQuerySupport,
        const HdBoolDataSourceHandle &enableStabilization,
        const HdFloatDataSourceHandle &frictionCorrelationDistance,
        const HdFloatDataSourceHandle &frictionOffsetThreshold,
        const HdTokenDataSourceHandle &frictionType,
        const HdIntDataSourceHandle &gpuCollisionStackSize,
        const HdIntDataSourceHandle &gpuFoundLostAggregatePairsCapacity,
        const HdIntDataSourceHandle &gpuFoundLostPairsCapacity,
        const HdIntDataSourceHandle &gpuHeapCapacity,
        const HdIntDataSourceHandle &gpuMaxDeformableSurfaceContacts,
        const HdIntDataSourceHandle &gpuMaxHairContacts,
        const HdIntDataSourceHandle &gpuMaxNumPartitions,
        const HdIntDataSourceHandle &gpuMaxParticleContacts,
        const HdIntDataSourceHandle &gpuMaxRigidContactCount,
        const HdIntDataSourceHandle &gpuMaxRigidPatchCount,
        const HdIntDataSourceHandle &gpuMaxSoftBodyContacts,
        const HdIntDataSourceHandle &gpuTempBufferCapacity,
        const HdIntDataSourceHandle &gpuTotalAggregatePairsCapacity,
        const HdBoolDataSourceHandle &invertCollisionGroupFilter,
        const HdFloatDataSourceHandle &maxBiasCoefficient,
        const HdIntDataSourceHandle &maxPositionIterationCount,
        const HdIntDataSourceHandle &maxVelocityIterationCount,
        const HdIntDataSourceHandle &minPositionIterationCount,
        const HdIntDataSourceHandle &minVelocityIterationCount,
        const HdBoolDataSourceHandle &reportKinematicKinematicPairs,
        const HdBoolDataSourceHandle &reportKinematicStaticPairs,
        const HdTokenDataSourceHandle &solverType,
        const HdIntDataSourceHandle &timeStepsPerSecond,
        const HdTokenDataSourceHandle &updateType
)
{
    TfToken _names[37];
    HdDataSourceBaseHandle _values[37];

    size_t _count = 0;

    if (bounceThreshold) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->bounceThreshold;
        _values[_count++] = bounceThreshold;
    }

    if (broadphaseType) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->broadphaseType;
        _values[_count++] = broadphaseType;
    }

    if (collisionSystem) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->collisionSystem;
        _values[_count++] = collisionSystem;
    }

    if (enableCCD) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableCCD;
        _values[_count++] = enableCCD;
    }

    if (enableEnhancedDeterminism) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableEnhancedDeterminism;
        _values[_count++] = enableEnhancedDeterminism;
    }

    if (enableExternalForcesEveryIteration) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableExternalForcesEveryIteration;
        _values[_count++] = enableExternalForcesEveryIteration;
    }

    if (enableGPUDynamics) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableGPUDynamics;
        _values[_count++] = enableGPUDynamics;
    }

    if (enableResidualReporting) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableResidualReporting;
        _values[_count++] = enableResidualReporting;
    }

    if (enableSceneQuerySupport) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableSceneQuerySupport;
        _values[_count++] = enableSceneQuerySupport;
    }

    if (enableStabilization) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->enableStabilization;
        _values[_count++] = enableStabilization;
    }

    if (frictionCorrelationDistance) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->frictionCorrelationDistance;
        _values[_count++] = frictionCorrelationDistance;
    }

    if (frictionOffsetThreshold) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->frictionOffsetThreshold;
        _values[_count++] = frictionOffsetThreshold;
    }

    if (frictionType) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->frictionType;
        _values[_count++] = frictionType;
    }

    if (gpuCollisionStackSize) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuCollisionStackSize;
        _values[_count++] = gpuCollisionStackSize;
    }

    if (gpuFoundLostAggregatePairsCapacity) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity;
        _values[_count++] = gpuFoundLostAggregatePairsCapacity;
    }

    if (gpuFoundLostPairsCapacity) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity;
        _values[_count++] = gpuFoundLostPairsCapacity;
    }

    if (gpuHeapCapacity) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuHeapCapacity;
        _values[_count++] = gpuHeapCapacity;
    }

    if (gpuMaxDeformableSurfaceContacts) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts;
        _values[_count++] = gpuMaxDeformableSurfaceContacts;
    }

    if (gpuMaxHairContacts) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxHairContacts;
        _values[_count++] = gpuMaxHairContacts;
    }

    if (gpuMaxNumPartitions) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxNumPartitions;
        _values[_count++] = gpuMaxNumPartitions;
    }

    if (gpuMaxParticleContacts) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxParticleContacts;
        _values[_count++] = gpuMaxParticleContacts;
    }

    if (gpuMaxRigidContactCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidContactCount;
        _values[_count++] = gpuMaxRigidContactCount;
    }

    if (gpuMaxRigidPatchCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidPatchCount;
        _values[_count++] = gpuMaxRigidPatchCount;
    }

    if (gpuMaxSoftBodyContacts) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts;
        _values[_count++] = gpuMaxSoftBodyContacts;
    }

    if (gpuTempBufferCapacity) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTempBufferCapacity;
        _values[_count++] = gpuTempBufferCapacity;
    }

    if (gpuTotalAggregatePairsCapacity) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity;
        _values[_count++] = gpuTotalAggregatePairsCapacity;
    }

    if (invertCollisionGroupFilter) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->invertCollisionGroupFilter;
        _values[_count++] = invertCollisionGroupFilter;
    }

    if (maxBiasCoefficient) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->maxBiasCoefficient;
        _values[_count++] = maxBiasCoefficient;
    }

    if (maxPositionIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->maxPositionIterationCount;
        _values[_count++] = maxPositionIterationCount;
    }

    if (maxVelocityIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->maxVelocityIterationCount;
        _values[_count++] = maxVelocityIterationCount;
    }

    if (minPositionIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->minPositionIterationCount;
        _values[_count++] = minPositionIterationCount;
    }

    if (minVelocityIterationCount) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->minVelocityIterationCount;
        _values[_count++] = minVelocityIterationCount;
    }

    if (reportKinematicKinematicPairs) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicKinematicPairs;
        _values[_count++] = reportKinematicKinematicPairs;
    }

    if (reportKinematicStaticPairs) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicStaticPairs;
        _values[_count++] = reportKinematicStaticPairs;
    }

    if (solverType) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->solverType;
        _values[_count++] = solverType;
    }

    if (timeStepsPerSecond) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->timeStepsPerSecond;
        _values[_count++] = timeStepsPerSecond;
    }

    if (updateType) {
        _names[_count] = UsdPhysicsImagingPhysxSceneSchemaTokens->updateType;
        _values[_count++] = updateType;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetBounceThreshold(
    const HdFloatDataSourceHandle &bounceThreshold)
{
    _bounceThreshold = bounceThreshold;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetBroadphaseType(
    const HdTokenDataSourceHandle &broadphaseType)
{
    _broadphaseType = broadphaseType;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetCollisionSystem(
    const HdTokenDataSourceHandle &collisionSystem)
{
    _collisionSystem = collisionSystem;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableCCD(
    const HdBoolDataSourceHandle &enableCCD)
{
    _enableCCD = enableCCD;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableEnhancedDeterminism(
    const HdBoolDataSourceHandle &enableEnhancedDeterminism)
{
    _enableEnhancedDeterminism = enableEnhancedDeterminism;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableExternalForcesEveryIteration(
    const HdBoolDataSourceHandle &enableExternalForcesEveryIteration)
{
    _enableExternalForcesEveryIteration = enableExternalForcesEveryIteration;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableGPUDynamics(
    const HdBoolDataSourceHandle &enableGPUDynamics)
{
    _enableGPUDynamics = enableGPUDynamics;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableResidualReporting(
    const HdBoolDataSourceHandle &enableResidualReporting)
{
    _enableResidualReporting = enableResidualReporting;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableSceneQuerySupport(
    const HdBoolDataSourceHandle &enableSceneQuerySupport)
{
    _enableSceneQuerySupport = enableSceneQuerySupport;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetEnableStabilization(
    const HdBoolDataSourceHandle &enableStabilization)
{
    _enableStabilization = enableStabilization;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetFrictionCorrelationDistance(
    const HdFloatDataSourceHandle &frictionCorrelationDistance)
{
    _frictionCorrelationDistance = frictionCorrelationDistance;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetFrictionOffsetThreshold(
    const HdFloatDataSourceHandle &frictionOffsetThreshold)
{
    _frictionOffsetThreshold = frictionOffsetThreshold;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetFrictionType(
    const HdTokenDataSourceHandle &frictionType)
{
    _frictionType = frictionType;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuCollisionStackSize(
    const HdIntDataSourceHandle &gpuCollisionStackSize)
{
    _gpuCollisionStackSize = gpuCollisionStackSize;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuFoundLostAggregatePairsCapacity(
    const HdIntDataSourceHandle &gpuFoundLostAggregatePairsCapacity)
{
    _gpuFoundLostAggregatePairsCapacity = gpuFoundLostAggregatePairsCapacity;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuFoundLostPairsCapacity(
    const HdIntDataSourceHandle &gpuFoundLostPairsCapacity)
{
    _gpuFoundLostPairsCapacity = gpuFoundLostPairsCapacity;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuHeapCapacity(
    const HdIntDataSourceHandle &gpuHeapCapacity)
{
    _gpuHeapCapacity = gpuHeapCapacity;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxDeformableSurfaceContacts(
    const HdIntDataSourceHandle &gpuMaxDeformableSurfaceContacts)
{
    _gpuMaxDeformableSurfaceContacts = gpuMaxDeformableSurfaceContacts;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxHairContacts(
    const HdIntDataSourceHandle &gpuMaxHairContacts)
{
    _gpuMaxHairContacts = gpuMaxHairContacts;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxNumPartitions(
    const HdIntDataSourceHandle &gpuMaxNumPartitions)
{
    _gpuMaxNumPartitions = gpuMaxNumPartitions;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxParticleContacts(
    const HdIntDataSourceHandle &gpuMaxParticleContacts)
{
    _gpuMaxParticleContacts = gpuMaxParticleContacts;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxRigidContactCount(
    const HdIntDataSourceHandle &gpuMaxRigidContactCount)
{
    _gpuMaxRigidContactCount = gpuMaxRigidContactCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxRigidPatchCount(
    const HdIntDataSourceHandle &gpuMaxRigidPatchCount)
{
    _gpuMaxRigidPatchCount = gpuMaxRigidPatchCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuMaxSoftBodyContacts(
    const HdIntDataSourceHandle &gpuMaxSoftBodyContacts)
{
    _gpuMaxSoftBodyContacts = gpuMaxSoftBodyContacts;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuTempBufferCapacity(
    const HdIntDataSourceHandle &gpuTempBufferCapacity)
{
    _gpuTempBufferCapacity = gpuTempBufferCapacity;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetGpuTotalAggregatePairsCapacity(
    const HdIntDataSourceHandle &gpuTotalAggregatePairsCapacity)
{
    _gpuTotalAggregatePairsCapacity = gpuTotalAggregatePairsCapacity;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetInvertCollisionGroupFilter(
    const HdBoolDataSourceHandle &invertCollisionGroupFilter)
{
    _invertCollisionGroupFilter = invertCollisionGroupFilter;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetMaxBiasCoefficient(
    const HdFloatDataSourceHandle &maxBiasCoefficient)
{
    _maxBiasCoefficient = maxBiasCoefficient;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetMaxPositionIterationCount(
    const HdIntDataSourceHandle &maxPositionIterationCount)
{
    _maxPositionIterationCount = maxPositionIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetMaxVelocityIterationCount(
    const HdIntDataSourceHandle &maxVelocityIterationCount)
{
    _maxVelocityIterationCount = maxVelocityIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetMinPositionIterationCount(
    const HdIntDataSourceHandle &minPositionIterationCount)
{
    _minPositionIterationCount = minPositionIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetMinVelocityIterationCount(
    const HdIntDataSourceHandle &minVelocityIterationCount)
{
    _minVelocityIterationCount = minVelocityIterationCount;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetReportKinematicKinematicPairs(
    const HdBoolDataSourceHandle &reportKinematicKinematicPairs)
{
    _reportKinematicKinematicPairs = reportKinematicKinematicPairs;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetReportKinematicStaticPairs(
    const HdBoolDataSourceHandle &reportKinematicStaticPairs)
{
    _reportKinematicStaticPairs = reportKinematicStaticPairs;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetSolverType(
    const HdTokenDataSourceHandle &solverType)
{
    _solverType = solverType;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetTimeStepsPerSecond(
    const HdIntDataSourceHandle &timeStepsPerSecond)
{
    _timeStepsPerSecond = timeStepsPerSecond;
    return *this;
}

UsdPhysicsImagingPhysxSceneSchema::Builder &
UsdPhysicsImagingPhysxSceneSchema::Builder::SetUpdateType(
    const HdTokenDataSourceHandle &updateType)
{
    _updateType = updateType;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxSceneSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxSceneSchema::BuildRetained(
        _bounceThreshold,
        _broadphaseType,
        _collisionSystem,
        _enableCCD,
        _enableEnhancedDeterminism,
        _enableExternalForcesEveryIteration,
        _enableGPUDynamics,
        _enableResidualReporting,
        _enableSceneQuerySupport,
        _enableStabilization,
        _frictionCorrelationDistance,
        _frictionOffsetThreshold,
        _frictionType,
        _gpuCollisionStackSize,
        _gpuFoundLostAggregatePairsCapacity,
        _gpuFoundLostPairsCapacity,
        _gpuHeapCapacity,
        _gpuMaxDeformableSurfaceContacts,
        _gpuMaxHairContacts,
        _gpuMaxNumPartitions,
        _gpuMaxParticleContacts,
        _gpuMaxRigidContactCount,
        _gpuMaxRigidPatchCount,
        _gpuMaxSoftBodyContacts,
        _gpuTempBufferCapacity,
        _gpuTotalAggregatePairsCapacity,
        _invertCollisionGroupFilter,
        _maxBiasCoefficient,
        _maxPositionIterationCount,
        _maxVelocityIterationCount,
        _minPositionIterationCount,
        _minVelocityIterationCount,
        _reportKinematicKinematicPairs,
        _reportKinematicStaticPairs,
        _solverType,
        _timeStepsPerSecond,
        _updateType
    );
}

/*static*/
UsdPhysicsImagingPhysxSceneSchema
UsdPhysicsImagingPhysxSceneSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxSceneSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxSceneSchemaTokens->physxScene))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxSceneSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxSceneSchemaTokens->physxScene;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetBounceThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->bounceThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetBroadphaseTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->broadphaseType);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetCollisionSystemLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->collisionSystem);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableEnhancedDeterminismLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableEnhancedDeterminism);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableExternalForcesEveryIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableExternalForcesEveryIteration);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableGPUDynamicsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableGPUDynamics);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableResidualReportingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableResidualReporting);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableSceneQuerySupportLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableSceneQuerySupport);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetEnableStabilizationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->enableStabilization);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetFrictionCorrelationDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->frictionCorrelationDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetFrictionOffsetThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->frictionOffsetThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetFrictionTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->frictionType);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuCollisionStackSizeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuCollisionStackSize);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuFoundLostAggregatePairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuFoundLostPairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuHeapCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuHeapCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxDeformableSurfaceContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxHairContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxHairContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxNumPartitionsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxNumPartitions);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxParticleContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxParticleContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxRigidContactCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidContactCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxRigidPatchCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxRigidPatchCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuMaxSoftBodyContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuTempBufferCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTempBufferCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetGpuTotalAggregatePairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetInvertCollisionGroupFilterLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->invertCollisionGroupFilter);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetMaxBiasCoefficientLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->maxBiasCoefficient);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetMaxPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->maxPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetMaxVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->maxVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetMinPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->minPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetMinVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->minVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetReportKinematicKinematicPairsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicKinematicPairs);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetReportKinematicStaticPairsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->reportKinematicStaticPairs);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetSolverTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->solverType);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetTimeStepsPerSecondLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->timeStepsPerSecond);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxSceneSchema::GetUpdateTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxSceneSchemaTokens->updateType);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE