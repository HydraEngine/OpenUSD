//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxResidualReportingSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxResidualReportingSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_RESIDUAL_REPORTING_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::GetMaxResidualPositionIteration() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualPositionIteration);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::GetMaxResidualVelocityIteration() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualVelocityIteration);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::GetRmsResidualPositionIteration() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualPositionIteration);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::GetRmsResidualVelocityIteration() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualVelocityIteration);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::BuildRetained(
        const HdFloatDataSourceHandle &maxResidualPositionIteration,
        const HdFloatDataSourceHandle &maxResidualVelocityIteration,
        const HdFloatDataSourceHandle &rmsResidualPositionIteration,
        const HdFloatDataSourceHandle &rmsResidualVelocityIteration
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (maxResidualPositionIteration) {
        _names[_count] = UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualPositionIteration;
        _values[_count++] = maxResidualPositionIteration;
    }

    if (maxResidualVelocityIteration) {
        _names[_count] = UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualVelocityIteration;
        _values[_count++] = maxResidualVelocityIteration;
    }

    if (rmsResidualPositionIteration) {
        _names[_count] = UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualPositionIteration;
        _values[_count++] = rmsResidualPositionIteration;
    }

    if (rmsResidualVelocityIteration) {
        _names[_count] = UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualVelocityIteration;
        _values[_count++] = rmsResidualVelocityIteration;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxResidualReportingSchema::Builder &
UsdPhysicsImagingPhysxResidualReportingSchema::Builder::SetMaxResidualPositionIteration(
    const HdFloatDataSourceHandle &maxResidualPositionIteration)
{
    _maxResidualPositionIteration = maxResidualPositionIteration;
    return *this;
}

UsdPhysicsImagingPhysxResidualReportingSchema::Builder &
UsdPhysicsImagingPhysxResidualReportingSchema::Builder::SetMaxResidualVelocityIteration(
    const HdFloatDataSourceHandle &maxResidualVelocityIteration)
{
    _maxResidualVelocityIteration = maxResidualVelocityIteration;
    return *this;
}

UsdPhysicsImagingPhysxResidualReportingSchema::Builder &
UsdPhysicsImagingPhysxResidualReportingSchema::Builder::SetRmsResidualPositionIteration(
    const HdFloatDataSourceHandle &rmsResidualPositionIteration)
{
    _rmsResidualPositionIteration = rmsResidualPositionIteration;
    return *this;
}

UsdPhysicsImagingPhysxResidualReportingSchema::Builder &
UsdPhysicsImagingPhysxResidualReportingSchema::Builder::SetRmsResidualVelocityIteration(
    const HdFloatDataSourceHandle &rmsResidualVelocityIteration)
{
    _rmsResidualVelocityIteration = rmsResidualVelocityIteration;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxResidualReportingSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxResidualReportingSchema::BuildRetained(
        _maxResidualPositionIteration,
        _maxResidualVelocityIteration,
        _rmsResidualPositionIteration,
        _rmsResidualVelocityIteration
    );
}

/*static*/
UsdPhysicsImagingPhysxResidualReportingSchema
UsdPhysicsImagingPhysxResidualReportingSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxResidualReportingSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxResidualReportingSchemaTokens->physxResidualReporting))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxResidualReportingSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxResidualReportingSchemaTokens->physxResidualReporting;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxResidualReportingSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxResidualReportingSchema::GetMaxResidualPositionIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualPositionIteration);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxResidualReportingSchema::GetMaxResidualVelocityIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxResidualReportingSchemaTokens->maxResidualVelocityIteration);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxResidualReportingSchema::GetRmsResidualPositionIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualPositionIteration);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxResidualReportingSchema::GetRmsResidualVelocityIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxResidualReportingSchemaTokens->rmsResidualVelocityIteration);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE