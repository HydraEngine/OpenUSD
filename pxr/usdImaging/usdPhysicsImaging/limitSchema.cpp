//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/limitSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingLimitSchemaTokens,
    USD_PHYSICS_IMAGING_LIMIT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingLimitSchema::GetLow() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingLimitSchemaTokens->low);
}

HdFloatDataSourceHandle
UsdPhysicsImagingLimitSchema::GetHigh() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingLimitSchemaTokens->high);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingLimitSchema::BuildRetained(
        const HdFloatDataSourceHandle &low,
        const HdFloatDataSourceHandle &high
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (low) {
        _names[_count] = UsdPhysicsImagingLimitSchemaTokens->low;
        _values[_count++] = low;
    }

    if (high) {
        _names[_count] = UsdPhysicsImagingLimitSchemaTokens->high;
        _values[_count++] = high;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingLimitSchema::Builder &
UsdPhysicsImagingLimitSchema::Builder::SetLow(
    const HdFloatDataSourceHandle &low)
{
    _low = low;
    return *this;
}

UsdPhysicsImagingLimitSchema::Builder &
UsdPhysicsImagingLimitSchema::Builder::SetHigh(
    const HdFloatDataSourceHandle &high)
{
    _high = high;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingLimitSchema::Builder::Build()
{
    return UsdPhysicsImagingLimitSchema::BuildRetained(
        _low,
        _high
    );
}

/*static*/
UsdPhysicsImagingLimitSchema
UsdPhysicsImagingLimitSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingLimitSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingLimitSchemaTokens->limit))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingLimitSchema::GetSchemaToken()
{
    return UsdPhysicsImagingLimitSchemaTokens->limit;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingLimitSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingLimitSchema::GetLowLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingLimitSchemaTokens->low);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingLimitSchema::GetHighLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingLimitSchemaTokens->high);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE