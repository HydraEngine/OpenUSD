//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/collisionGroupSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingCollisionGroupSchemaTokens,
    USD_PHYSICS_IMAGING_COLLISION_GROUP_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdStringDataSourceHandle
UsdPhysicsImagingCollisionGroupSchema::GetMergeGroupName() const
{
    return _GetTypedDataSource<HdStringDataSource>(
        UsdPhysicsImagingCollisionGroupSchemaTokens->mergeGroupName);
}

HdBoolDataSourceHandle
UsdPhysicsImagingCollisionGroupSchema::GetInvertFilteredGroups() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingCollisionGroupSchemaTokens->invertFilteredGroups);
}

HdPathDataSourceHandle
UsdPhysicsImagingCollisionGroupSchema::GetFilteredGroups() const
{
    return _GetTypedDataSource<HdPathDataSource>(
        UsdPhysicsImagingCollisionGroupSchemaTokens->filteredGroups);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingCollisionGroupSchema::BuildRetained(
        const HdStringDataSourceHandle &mergeGroupName,
        const HdBoolDataSourceHandle &invertFilteredGroups,
        const HdPathDataSourceHandle &filteredGroups
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (mergeGroupName) {
        _names[_count] = UsdPhysicsImagingCollisionGroupSchemaTokens->mergeGroupName;
        _values[_count++] = mergeGroupName;
    }

    if (invertFilteredGroups) {
        _names[_count] = UsdPhysicsImagingCollisionGroupSchemaTokens->invertFilteredGroups;
        _values[_count++] = invertFilteredGroups;
    }

    if (filteredGroups) {
        _names[_count] = UsdPhysicsImagingCollisionGroupSchemaTokens->filteredGroups;
        _values[_count++] = filteredGroups;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingCollisionGroupSchema::Builder &
UsdPhysicsImagingCollisionGroupSchema::Builder::SetMergeGroupName(
    const HdStringDataSourceHandle &mergeGroupName)
{
    _mergeGroupName = mergeGroupName;
    return *this;
}

UsdPhysicsImagingCollisionGroupSchema::Builder &
UsdPhysicsImagingCollisionGroupSchema::Builder::SetInvertFilteredGroups(
    const HdBoolDataSourceHandle &invertFilteredGroups)
{
    _invertFilteredGroups = invertFilteredGroups;
    return *this;
}

UsdPhysicsImagingCollisionGroupSchema::Builder &
UsdPhysicsImagingCollisionGroupSchema::Builder::SetFilteredGroups(
    const HdPathDataSourceHandle &filteredGroups)
{
    _filteredGroups = filteredGroups;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingCollisionGroupSchema::Builder::Build()
{
    return UsdPhysicsImagingCollisionGroupSchema::BuildRetained(
        _mergeGroupName,
        _invertFilteredGroups,
        _filteredGroups
    );
}

/*static*/
UsdPhysicsImagingCollisionGroupSchema
UsdPhysicsImagingCollisionGroupSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingCollisionGroupSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingCollisionGroupSchemaTokens->collisionGroup))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingCollisionGroupSchema::GetSchemaToken()
{
    return UsdPhysicsImagingCollisionGroupSchemaTokens->collisionGroup;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingCollisionGroupSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingCollisionGroupSchema::GetMergeGroupNameLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingCollisionGroupSchemaTokens->mergeGroupName);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingCollisionGroupSchema::GetInvertFilteredGroupsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingCollisionGroupSchemaTokens->invertFilteredGroups);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingCollisionGroupSchema::GetFilteredGroupsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingCollisionGroupSchemaTokens->filteredGroups);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE