//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleTireSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleTireSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_TIRE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::GetCamberStiffness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleTireSchemaTokens->camberStiffness);
}

HdVec2fArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::GetFrictionVsSlipGraph() const
{
    return _GetTypedDataSource<HdVec2fArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleTireSchemaTokens->frictionVsSlipGraph);
}

HdVec2fDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::GetLateralStiffnessGraph() const
{
    return _GetTypedDataSource<HdVec2fDataSource>(
        UsdPhysicsImagingPhysxVehicleTireSchemaTokens->lateralStiffnessGraph);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::GetLongitudinalStiffness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleTireSchemaTokens->longitudinalStiffness);
}

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::GetRestLoad() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleTireSchemaTokens->restLoad);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::BuildRetained(
        const HdFloatDataSourceHandle &camberStiffness,
        const HdVec2fArrayDataSourceHandle &frictionVsSlipGraph,
        const HdVec2fDataSourceHandle &lateralStiffnessGraph,
        const HdFloatDataSourceHandle &longitudinalStiffness,
        const HdFloatDataSourceHandle &restLoad
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (camberStiffness) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireSchemaTokens->camberStiffness;
        _values[_count++] = camberStiffness;
    }

    if (frictionVsSlipGraph) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireSchemaTokens->frictionVsSlipGraph;
        _values[_count++] = frictionVsSlipGraph;
    }

    if (lateralStiffnessGraph) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireSchemaTokens->lateralStiffnessGraph;
        _values[_count++] = lateralStiffnessGraph;
    }

    if (longitudinalStiffness) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireSchemaTokens->longitudinalStiffness;
        _values[_count++] = longitudinalStiffness;
    }

    if (restLoad) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireSchemaTokens->restLoad;
        _values[_count++] = restLoad;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleTireSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::SetCamberStiffness(
    const HdFloatDataSourceHandle &camberStiffness)
{
    _camberStiffness = camberStiffness;
    return *this;
}

UsdPhysicsImagingPhysxVehicleTireSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::SetFrictionVsSlipGraph(
    const HdVec2fArrayDataSourceHandle &frictionVsSlipGraph)
{
    _frictionVsSlipGraph = frictionVsSlipGraph;
    return *this;
}

UsdPhysicsImagingPhysxVehicleTireSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::SetLateralStiffnessGraph(
    const HdVec2fDataSourceHandle &lateralStiffnessGraph)
{
    _lateralStiffnessGraph = lateralStiffnessGraph;
    return *this;
}

UsdPhysicsImagingPhysxVehicleTireSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::SetLongitudinalStiffness(
    const HdFloatDataSourceHandle &longitudinalStiffness)
{
    _longitudinalStiffness = longitudinalStiffness;
    return *this;
}

UsdPhysicsImagingPhysxVehicleTireSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::SetRestLoad(
    const HdFloatDataSourceHandle &restLoad)
{
    _restLoad = restLoad;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleTireSchema::BuildRetained(
        _camberStiffness,
        _frictionVsSlipGraph,
        _lateralStiffnessGraph,
        _longitudinalStiffness,
        _restLoad
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleTireSchema
UsdPhysicsImagingPhysxVehicleTireSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleTireSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleTireSchemaTokens->physxVehicleTire))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleTireSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleTireSchemaTokens->physxVehicleTire;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetCamberStiffnessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireSchemaTokens->camberStiffness);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetFrictionVsSlipGraphLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireSchemaTokens->frictionVsSlipGraph);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetLateralStiffnessGraphLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireSchemaTokens->lateralStiffnessGraph);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetLongitudinalStiffnessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireSchemaTokens->longitudinalStiffness);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireSchema::GetRestLoadLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireSchemaTokens->restLoad);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE