//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_ISOSURFACE_SCHEMA_H
#define PXR_USD_IMAGING_USD_PHYSICS_IMAGING_PHYSX_ISOSURFACE_SCHEMA_H

/// \file

#include "pxr/usdImaging/usdPhysicsImaging/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define USD_PHYSICS_IMAGING_PHYSX_ISOSURFACE_SCHEMA_TOKENS \
    (physxIsosurface) \
    (anisotropyMax) \
    (anisotropyMin) \
    (anisotropyRadius) \
    (enableAnisotropy) \
    (gridFilteringPasses) \
    (gridSmoothingRadiusRelativeToCellSize) \
    (gridSpacing) \
    (isoSurfaceEnabled) \
    (isosurfaceLevel) \
    (kernelRadius) \
    (maxSubgrids) \
    (maxTriangles) \
    (maxVertices) \
    (numMeshSmoothingPasses) \

TF_DECLARE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxIsosurfaceSchemaTokens, USDPHYSICSIMAGING_API,
    USD_PHYSICS_IMAGING_PHYSX_ISOSURFACE_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class UsdPhysicsImagingPhysxIsosurfaceSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    UsdPhysicsImagingPhysxIsosurfaceSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "physxIsosurface" from the parent container and constructs a
    /// UsdPhysicsImagingPhysxIsosurfaceSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    USDPHYSICSIMAGING_API
    static UsdPhysicsImagingPhysxIsosurfaceSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetAnisotropyMax() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetAnisotropyMin() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetAnisotropyRadius() const;

    USDPHYSICSIMAGING_API
    HdBoolDataSourceHandle GetEnableAnisotropy() const;

    USDPHYSICSIMAGING_API
    HdStringDataSourceHandle GetGridFilteringPasses() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetGridSmoothingRadiusRelativeToCellSize() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetGridSpacing() const;

    USDPHYSICSIMAGING_API
    HdBoolDataSourceHandle GetIsoSurfaceEnabled() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetIsosurfaceLevel() const;

    USDPHYSICSIMAGING_API
    HdFloatDataSourceHandle GetKernelRadius() const;

    USDPHYSICSIMAGING_API
    HdIntDataSourceHandle GetMaxSubgrids() const;

    USDPHYSICSIMAGING_API
    HdIntDataSourceHandle GetMaxTriangles() const;

    USDPHYSICSIMAGING_API
    HdIntDataSourceHandle GetMaxVertices() const;

    USDPHYSICSIMAGING_API
    HdIntDataSourceHandle GetNumMeshSmoothingPasses() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    USDPHYSICSIMAGING_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate anisotropyMax.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetAnisotropyMaxLocator();

    /// Prim-level relative data source locator to locate anisotropyMin.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetAnisotropyMinLocator();

    /// Prim-level relative data source locator to locate anisotropyRadius.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetAnisotropyRadiusLocator();

    /// Prim-level relative data source locator to locate enableAnisotropy.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetEnableAnisotropyLocator();

    /// Prim-level relative data source locator to locate gridFilteringPasses.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetGridFilteringPassesLocator();

    /// Prim-level relative data source locator to locate gridSmoothingRadiusRelativeToCellSize.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetGridSmoothingRadiusRelativeToCellSizeLocator();

    /// Prim-level relative data source locator to locate gridSpacing.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetGridSpacingLocator();

    /// Prim-level relative data source locator to locate isoSurfaceEnabled.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetIsoSurfaceEnabledLocator();

    /// Prim-level relative data source locator to locate isosurfaceLevel.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetIsosurfaceLevelLocator();

    /// Prim-level relative data source locator to locate kernelRadius.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetKernelRadiusLocator();

    /// Prim-level relative data source locator to locate maxSubgrids.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMaxSubgridsLocator();

    /// Prim-level relative data source locator to locate maxTriangles.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMaxTrianglesLocator();

    /// Prim-level relative data source locator to locate maxVertices.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetMaxVerticesLocator();

    /// Prim-level relative data source locator to locate numMeshSmoothingPasses.
    USDPHYSICSIMAGING_API
    static const HdDataSourceLocator &GetNumMeshSmoothingPassesLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    USDPHYSICSIMAGING_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdFloatDataSourceHandle &anisotropyMax,
        const HdFloatDataSourceHandle &anisotropyMin,
        const HdFloatDataSourceHandle &anisotropyRadius,
        const HdBoolDataSourceHandle &enableAnisotropy,
        const HdStringDataSourceHandle &gridFilteringPasses,
        const HdFloatDataSourceHandle &gridSmoothingRadiusRelativeToCellSize,
        const HdFloatDataSourceHandle &gridSpacing,
        const HdBoolDataSourceHandle &isoSurfaceEnabled,
        const HdFloatDataSourceHandle &isosurfaceLevel,
        const HdFloatDataSourceHandle &kernelRadius,
        const HdIntDataSourceHandle &maxSubgrids,
        const HdIntDataSourceHandle &maxTriangles,
        const HdIntDataSourceHandle &maxVertices,
        const HdIntDataSourceHandle &numMeshSmoothingPasses
    );

    /// \class UsdPhysicsImagingPhysxIsosurfaceSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        USDPHYSICSIMAGING_API
        Builder &SetAnisotropyMax(
            const HdFloatDataSourceHandle &anisotropyMax);
        USDPHYSICSIMAGING_API
        Builder &SetAnisotropyMin(
            const HdFloatDataSourceHandle &anisotropyMin);
        USDPHYSICSIMAGING_API
        Builder &SetAnisotropyRadius(
            const HdFloatDataSourceHandle &anisotropyRadius);
        USDPHYSICSIMAGING_API
        Builder &SetEnableAnisotropy(
            const HdBoolDataSourceHandle &enableAnisotropy);
        USDPHYSICSIMAGING_API
        Builder &SetGridFilteringPasses(
            const HdStringDataSourceHandle &gridFilteringPasses);
        USDPHYSICSIMAGING_API
        Builder &SetGridSmoothingRadiusRelativeToCellSize(
            const HdFloatDataSourceHandle &gridSmoothingRadiusRelativeToCellSize);
        USDPHYSICSIMAGING_API
        Builder &SetGridSpacing(
            const HdFloatDataSourceHandle &gridSpacing);
        USDPHYSICSIMAGING_API
        Builder &SetIsoSurfaceEnabled(
            const HdBoolDataSourceHandle &isoSurfaceEnabled);
        USDPHYSICSIMAGING_API
        Builder &SetIsosurfaceLevel(
            const HdFloatDataSourceHandle &isosurfaceLevel);
        USDPHYSICSIMAGING_API
        Builder &SetKernelRadius(
            const HdFloatDataSourceHandle &kernelRadius);
        USDPHYSICSIMAGING_API
        Builder &SetMaxSubgrids(
            const HdIntDataSourceHandle &maxSubgrids);
        USDPHYSICSIMAGING_API
        Builder &SetMaxTriangles(
            const HdIntDataSourceHandle &maxTriangles);
        USDPHYSICSIMAGING_API
        Builder &SetMaxVertices(
            const HdIntDataSourceHandle &maxVertices);
        USDPHYSICSIMAGING_API
        Builder &SetNumMeshSmoothingPasses(
            const HdIntDataSourceHandle &numMeshSmoothingPasses);

        /// Returns a container data source containing the members set thus far.
        USDPHYSICSIMAGING_API
        HdContainerDataSourceHandle Build();

    private:
        HdFloatDataSourceHandle _anisotropyMax;
        HdFloatDataSourceHandle _anisotropyMin;
        HdFloatDataSourceHandle _anisotropyRadius;
        HdBoolDataSourceHandle _enableAnisotropy;
        HdStringDataSourceHandle _gridFilteringPasses;
        HdFloatDataSourceHandle _gridSmoothingRadiusRelativeToCellSize;
        HdFloatDataSourceHandle _gridSpacing;
        HdBoolDataSourceHandle _isoSurfaceEnabled;
        HdFloatDataSourceHandle _isosurfaceLevel;
        HdFloatDataSourceHandle _kernelRadius;
        HdIntDataSourceHandle _maxSubgrids;
        HdIntDataSourceHandle _maxTriangles;
        HdIntDataSourceHandle _maxVertices;
        HdIntDataSourceHandle _numMeshSmoothingPasses;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif