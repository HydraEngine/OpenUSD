//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxVehicleTireFrictionTableSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_VEHICLE_TIRE_FRICTION_TABLE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetDefaultFrictionValue() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->defaultFrictionValue);
}

HdFloatArrayDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetFrictionValues() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->frictionValues);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::BuildRetained(
        const HdFloatDataSourceHandle &defaultFrictionValue,
        const HdFloatArrayDataSourceHandle &frictionValues
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (defaultFrictionValue) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->defaultFrictionValue;
        _values[_count++] = defaultFrictionValue;
    }

    if (frictionValues) {
        _names[_count] = UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->frictionValues;
        _values[_count++] = frictionValues;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::Builder::SetDefaultFrictionValue(
    const HdFloatDataSourceHandle &defaultFrictionValue)
{
    _defaultFrictionValue = defaultFrictionValue;
    return *this;
}

UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::Builder &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::Builder::SetFrictionValues(
    const HdFloatArrayDataSourceHandle &frictionValues)
{
    _frictionValues = frictionValues;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::BuildRetained(
        _defaultFrictionValue,
        _frictionValues
    );
}

/*static*/
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->physxVehicleTireFrictionTable))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->physxVehicleTireFrictionTable;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetDefaultFrictionValueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->defaultFrictionValue);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxVehicleTireFrictionTableSchema::GetFrictionValuesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxVehicleTireFrictionTableSchemaTokens->frictionValues);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE