//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/physxPhysicsJointInstancerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens,
    USD_PHYSICS_IMAGING_PHYSX_PHYSICS_JOINT_INSTANCER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntArrayDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetBody0Indices() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body0Indices);
}

HdIntArrayDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetBody1Indices() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body1Indices);
}

HdVec3fArrayDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalPos0s() const
{
    return _GetTypedDataSource<HdVec3fArrayDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos0s);
}

HdVec3fArrayDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalPos1s() const
{
    return _GetTypedDataSource<HdVec3fArrayDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos1s);
}

HdQuatfDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalRot0s() const
{
    return _GetTypedDataSource<HdQuatfDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot0s);
}

HdQuatfDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalRot1s() const
{
    return _GetTypedDataSource<HdQuatfDataSource>(
        UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot1s);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::BuildRetained(
        const HdIntArrayDataSourceHandle &body0Indices,
        const HdIntArrayDataSourceHandle &body1Indices,
        const HdVec3fArrayDataSourceHandle &localPos0s,
        const HdVec3fArrayDataSourceHandle &localPos1s,
        const HdQuatfDataSourceHandle &localRot0s,
        const HdQuatfDataSourceHandle &localRot1s
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (body0Indices) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body0Indices;
        _values[_count++] = body0Indices;
    }

    if (body1Indices) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body1Indices;
        _values[_count++] = body1Indices;
    }

    if (localPos0s) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos0s;
        _values[_count++] = localPos0s;
    }

    if (localPos1s) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos1s;
        _values[_count++] = localPos1s;
    }

    if (localRot0s) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot0s;
        _values[_count++] = localRot0s;
    }

    if (localRot1s) {
        _names[_count] = UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot1s;
        _values[_count++] = localRot1s;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetBody0Indices(
    const HdIntArrayDataSourceHandle &body0Indices)
{
    _body0Indices = body0Indices;
    return *this;
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetBody1Indices(
    const HdIntArrayDataSourceHandle &body1Indices)
{
    _body1Indices = body1Indices;
    return *this;
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetLocalPos0s(
    const HdVec3fArrayDataSourceHandle &localPos0s)
{
    _localPos0s = localPos0s;
    return *this;
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetLocalPos1s(
    const HdVec3fArrayDataSourceHandle &localPos1s)
{
    _localPos1s = localPos1s;
    return *this;
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetLocalRot0s(
    const HdQuatfDataSourceHandle &localRot0s)
{
    _localRot0s = localRot0s;
    return *this;
}

UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::SetLocalRot1s(
    const HdQuatfDataSourceHandle &localRot1s)
{
    _localRot1s = localRot1s;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::Builder::Build()
{
    return UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::BuildRetained(
        _body0Indices,
        _body1Indices,
        _localPos0s,
        _localPos1s,
        _localRot0s,
        _localRot1s
    );
}

/*static*/
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingPhysxPhysicsJointInstancerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->physxPhysicsJointInstancer))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetSchemaToken()
{
    return UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->physxPhysicsJointInstancer;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetBody0IndicesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body0Indices);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetBody1IndicesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->body1Indices);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalPos0sLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos0s);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalPos1sLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localPos1s);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalRot0sLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot0s);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingPhysxPhysicsJointInstancerSchema::GetLocalRot1sLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingPhysxPhysicsJointInstancerSchemaTokens->localRot1s);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE