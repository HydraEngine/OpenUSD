//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/sceneSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingSceneSchemaTokens,
    USD_PHYSICS_IMAGING_SCENE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
UsdPhysicsImagingSceneSchema::GetGravityMagnitude() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingSceneSchemaTokens->gravityMagnitude);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingSceneSchema::GetGravityDirection() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingSceneSchemaTokens->gravityDirection);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingSceneSchema::BuildRetained(
        const HdFloatDataSourceHandle &gravityMagnitude,
        const HdVec3fDataSourceHandle &gravityDirection
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (gravityMagnitude) {
        _names[_count] = UsdPhysicsImagingSceneSchemaTokens->gravityMagnitude;
        _values[_count++] = gravityMagnitude;
    }

    if (gravityDirection) {
        _names[_count] = UsdPhysicsImagingSceneSchemaTokens->gravityDirection;
        _values[_count++] = gravityDirection;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingSceneSchema::Builder &
UsdPhysicsImagingSceneSchema::Builder::SetGravityMagnitude(
    const HdFloatDataSourceHandle &gravityMagnitude)
{
    _gravityMagnitude = gravityMagnitude;
    return *this;
}

UsdPhysicsImagingSceneSchema::Builder &
UsdPhysicsImagingSceneSchema::Builder::SetGravityDirection(
    const HdVec3fDataSourceHandle &gravityDirection)
{
    _gravityDirection = gravityDirection;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingSceneSchema::Builder::Build()
{
    return UsdPhysicsImagingSceneSchema::BuildRetained(
        _gravityMagnitude,
        _gravityDirection
    );
}

/*static*/
UsdPhysicsImagingSceneSchema
UsdPhysicsImagingSceneSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingSceneSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingSceneSchemaTokens->scene))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingSceneSchema::GetSchemaToken()
{
    return UsdPhysicsImagingSceneSchemaTokens->scene;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingSceneSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingSceneSchema::GetGravityMagnitudeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingSceneSchemaTokens->gravityMagnitude);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingSceneSchema::GetGravityDirectionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingSceneSchemaTokens->gravityDirection);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE