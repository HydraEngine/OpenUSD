//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdPhysicsImaging/jointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdPhysicsImagingJointSchemaTokens,
    USD_PHYSICS_IMAGING_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec3fDataSourceHandle
UsdPhysicsImagingJointSchema::GetLocalPos0() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingJointSchemaTokens->localPos0);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingJointSchema::GetLocalPos1() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingJointSchemaTokens->localPos1);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingJointSchema::GetLocalRot0() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingJointSchemaTokens->localRot0);
}

HdVec3fDataSourceHandle
UsdPhysicsImagingJointSchema::GetLocalRot1() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdPhysicsImagingJointSchemaTokens->localRot1);
}

HdBoolDataSourceHandle
UsdPhysicsImagingJointSchema::GetJointEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingJointSchemaTokens->jointEnabled);
}

HdBoolDataSourceHandle
UsdPhysicsImagingJointSchema::GetCollisionEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingJointSchemaTokens->collisionEnabled);
}

HdBoolDataSourceHandle
UsdPhysicsImagingJointSchema::GetExcludeFromArticulation() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdPhysicsImagingJointSchemaTokens->excludeFromArticulation);
}

HdFloatDataSourceHandle
UsdPhysicsImagingJointSchema::GetBreakForce() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingJointSchemaTokens->breakForce);
}

HdFloatDataSourceHandle
UsdPhysicsImagingJointSchema::GetBreakTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdPhysicsImagingJointSchemaTokens->breakTorque);
}

HdPathArrayDataSourceHandle
UsdPhysicsImagingJointSchema::GetBody0() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        UsdPhysicsImagingJointSchemaTokens->body0);
}

HdPathArrayDataSourceHandle
UsdPhysicsImagingJointSchema::GetBody1() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        UsdPhysicsImagingJointSchemaTokens->body1);
}

/*static*/
HdContainerDataSourceHandle
UsdPhysicsImagingJointSchema::BuildRetained(
        const HdVec3fDataSourceHandle &localPos0,
        const HdVec3fDataSourceHandle &localPos1,
        const HdVec3fDataSourceHandle &localRot0,
        const HdVec3fDataSourceHandle &localRot1,
        const HdBoolDataSourceHandle &jointEnabled,
        const HdBoolDataSourceHandle &collisionEnabled,
        const HdBoolDataSourceHandle &excludeFromArticulation,
        const HdFloatDataSourceHandle &breakForce,
        const HdFloatDataSourceHandle &breakTorque,
        const HdPathArrayDataSourceHandle &body0,
        const HdPathArrayDataSourceHandle &body1
)
{
    TfToken _names[11];
    HdDataSourceBaseHandle _values[11];

    size_t _count = 0;

    if (localPos0) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->localPos0;
        _values[_count++] = localPos0;
    }

    if (localPos1) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->localPos1;
        _values[_count++] = localPos1;
    }

    if (localRot0) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->localRot0;
        _values[_count++] = localRot0;
    }

    if (localRot1) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->localRot1;
        _values[_count++] = localRot1;
    }

    if (jointEnabled) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->jointEnabled;
        _values[_count++] = jointEnabled;
    }

    if (collisionEnabled) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->collisionEnabled;
        _values[_count++] = collisionEnabled;
    }

    if (excludeFromArticulation) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->excludeFromArticulation;
        _values[_count++] = excludeFromArticulation;
    }

    if (breakForce) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->breakForce;
        _values[_count++] = breakForce;
    }

    if (breakTorque) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->breakTorque;
        _values[_count++] = breakTorque;
    }

    if (body0) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->body0;
        _values[_count++] = body0;
    }

    if (body1) {
        _names[_count] = UsdPhysicsImagingJointSchemaTokens->body1;
        _values[_count++] = body1;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetLocalPos0(
    const HdVec3fDataSourceHandle &localPos0)
{
    _localPos0 = localPos0;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetLocalPos1(
    const HdVec3fDataSourceHandle &localPos1)
{
    _localPos1 = localPos1;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetLocalRot0(
    const HdVec3fDataSourceHandle &localRot0)
{
    _localRot0 = localRot0;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetLocalRot1(
    const HdVec3fDataSourceHandle &localRot1)
{
    _localRot1 = localRot1;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetJointEnabled(
    const HdBoolDataSourceHandle &jointEnabled)
{
    _jointEnabled = jointEnabled;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetCollisionEnabled(
    const HdBoolDataSourceHandle &collisionEnabled)
{
    _collisionEnabled = collisionEnabled;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetExcludeFromArticulation(
    const HdBoolDataSourceHandle &excludeFromArticulation)
{
    _excludeFromArticulation = excludeFromArticulation;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetBreakForce(
    const HdFloatDataSourceHandle &breakForce)
{
    _breakForce = breakForce;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetBreakTorque(
    const HdFloatDataSourceHandle &breakTorque)
{
    _breakTorque = breakTorque;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetBody0(
    const HdPathArrayDataSourceHandle &body0)
{
    _body0 = body0;
    return *this;
}

UsdPhysicsImagingJointSchema::Builder &
UsdPhysicsImagingJointSchema::Builder::SetBody1(
    const HdPathArrayDataSourceHandle &body1)
{
    _body1 = body1;
    return *this;
}

HdContainerDataSourceHandle
UsdPhysicsImagingJointSchema::Builder::Build()
{
    return UsdPhysicsImagingJointSchema::BuildRetained(
        _localPos0,
        _localPos1,
        _localRot0,
        _localRot1,
        _jointEnabled,
        _collisionEnabled,
        _excludeFromArticulation,
        _breakForce,
        _breakTorque,
        _body0,
        _body1
    );
}

/*static*/
UsdPhysicsImagingJointSchema
UsdPhysicsImagingJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdPhysicsImagingJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdPhysicsImagingJointSchemaTokens->joint))
        : nullptr);
}

/*static*/
const TfToken &
UsdPhysicsImagingJointSchema::GetSchemaToken()
{
    return UsdPhysicsImagingJointSchemaTokens->joint;
}

/*static*/
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetLocalPos0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->localPos0);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetLocalPos1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->localPos1);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetLocalRot0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->localRot0);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetLocalRot1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->localRot1);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetJointEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->jointEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetCollisionEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->collisionEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetExcludeFromArticulationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->excludeFromArticulation);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetBreakForceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->breakForce);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetBreakTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->breakTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetBody0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->body0);
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdPhysicsImagingJointSchema::GetBody1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdPhysicsImagingJointSchemaTokens->body1);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE