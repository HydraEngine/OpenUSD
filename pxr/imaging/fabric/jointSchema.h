//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_IMAGING_FABRIC_JOINT_SCHEMA_H
#define PXR_IMAGING_FABRIC_JOINT_SCHEMA_H

/// \file

#include "pxr/imaging/fabric/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define FABRIC_JOINT_SCHEMA_TOKENS \
    (joint) \
    (localPos0) \
    (localPos1) \
    (localRot0) \
    (localRot1) \
    (jointEnabled) \
    (collisionEnabled) \
    (excludeFromArticulation) \
    (breakForce) \
    (breakTorque) \
    (body0) \
    (body1) \

TF_DECLARE_PUBLIC_TOKENS(FabricJointSchemaTokens, FABRIC_API,
    FABRIC_JOINT_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class FabricJointSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    FabricJointSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "joint" from the parent container and constructs a
    /// FabricJointSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    FABRIC_API
    static FabricJointSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    FABRIC_API
    HdVec3fDataSourceHandle GetLocalPos0() const;

    FABRIC_API
    HdVec3fDataSourceHandle GetLocalPos1() const;

    FABRIC_API
    HdVec3fDataSourceHandle GetLocalRot0() const;

    FABRIC_API
    HdVec3fDataSourceHandle GetLocalRot1() const;

    FABRIC_API
    HdBoolDataSourceHandle GetJointEnabled() const;

    FABRIC_API
    HdBoolDataSourceHandle GetCollisionEnabled() const;

    FABRIC_API
    HdBoolDataSourceHandle GetExcludeFromArticulation() const;

    FABRIC_API
    HdFloatDataSourceHandle GetBreakForce() const;

    FABRIC_API
    HdFloatDataSourceHandle GetBreakTorque() const;

    FABRIC_API
    HdPathArrayDataSourceHandle GetBody0() const;

    FABRIC_API
    HdPathArrayDataSourceHandle GetBody1() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    FABRIC_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    FABRIC_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate localPos0.
    FABRIC_API
    static const HdDataSourceLocator &GetLocalPos0Locator();

    /// Prim-level relative data source locator to locate localPos1.
    FABRIC_API
    static const HdDataSourceLocator &GetLocalPos1Locator();

    /// Prim-level relative data source locator to locate localRot0.
    FABRIC_API
    static const HdDataSourceLocator &GetLocalRot0Locator();

    /// Prim-level relative data source locator to locate localRot1.
    FABRIC_API
    static const HdDataSourceLocator &GetLocalRot1Locator();

    /// Prim-level relative data source locator to locate jointEnabled.
    FABRIC_API
    static const HdDataSourceLocator &GetJointEnabledLocator();

    /// Prim-level relative data source locator to locate collisionEnabled.
    FABRIC_API
    static const HdDataSourceLocator &GetCollisionEnabledLocator();

    /// Prim-level relative data source locator to locate excludeFromArticulation.
    FABRIC_API
    static const HdDataSourceLocator &GetExcludeFromArticulationLocator();

    /// Prim-level relative data source locator to locate breakForce.
    FABRIC_API
    static const HdDataSourceLocator &GetBreakForceLocator();

    /// Prim-level relative data source locator to locate breakTorque.
    FABRIC_API
    static const HdDataSourceLocator &GetBreakTorqueLocator();

    /// Prim-level relative data source locator to locate body0.
    FABRIC_API
    static const HdDataSourceLocator &GetBody0Locator();

    /// Prim-level relative data source locator to locate body1.
    FABRIC_API
    static const HdDataSourceLocator &GetBody1Locator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    FABRIC_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdVec3fDataSourceHandle &localPos0,
        const HdVec3fDataSourceHandle &localPos1,
        const HdVec3fDataSourceHandle &localRot0,
        const HdVec3fDataSourceHandle &localRot1,
        const HdBoolDataSourceHandle &jointEnabled,
        const HdBoolDataSourceHandle &collisionEnabled,
        const HdBoolDataSourceHandle &excludeFromArticulation,
        const HdFloatDataSourceHandle &breakForce,
        const HdFloatDataSourceHandle &breakTorque,
        const HdPathArrayDataSourceHandle &body0,
        const HdPathArrayDataSourceHandle &body1
    );

    /// \class FabricJointSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        FABRIC_API
        Builder &SetLocalPos0(
            const HdVec3fDataSourceHandle &localPos0);
        FABRIC_API
        Builder &SetLocalPos1(
            const HdVec3fDataSourceHandle &localPos1);
        FABRIC_API
        Builder &SetLocalRot0(
            const HdVec3fDataSourceHandle &localRot0);
        FABRIC_API
        Builder &SetLocalRot1(
            const HdVec3fDataSourceHandle &localRot1);
        FABRIC_API
        Builder &SetJointEnabled(
            const HdBoolDataSourceHandle &jointEnabled);
        FABRIC_API
        Builder &SetCollisionEnabled(
            const HdBoolDataSourceHandle &collisionEnabled);
        FABRIC_API
        Builder &SetExcludeFromArticulation(
            const HdBoolDataSourceHandle &excludeFromArticulation);
        FABRIC_API
        Builder &SetBreakForce(
            const HdFloatDataSourceHandle &breakForce);
        FABRIC_API
        Builder &SetBreakTorque(
            const HdFloatDataSourceHandle &breakTorque);
        FABRIC_API
        Builder &SetBody0(
            const HdPathArrayDataSourceHandle &body0);
        FABRIC_API
        Builder &SetBody1(
            const HdPathArrayDataSourceHandle &body1);

        /// Returns a container data source containing the members set thus far.
        FABRIC_API
        HdContainerDataSourceHandle Build();

    private:
        HdVec3fDataSourceHandle _localPos0;
        HdVec3fDataSourceHandle _localPos1;
        HdVec3fDataSourceHandle _localRot0;
        HdVec3fDataSourceHandle _localRot1;
        HdBoolDataSourceHandle _jointEnabled;
        HdBoolDataSourceHandle _collisionEnabled;
        HdBoolDataSourceHandle _excludeFromArticulation;
        HdFloatDataSourceHandle _breakForce;
        HdFloatDataSourceHandle _breakTorque;
        HdPathArrayDataSourceHandle _body0;
        HdPathArrayDataSourceHandle _body1;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif