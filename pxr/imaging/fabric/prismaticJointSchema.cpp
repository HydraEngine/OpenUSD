//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/prismaticJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPrismaticJointSchemaTokens,
    FABRIC_PRISMATIC_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
FabricPrismaticJointSchema::GetAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPrismaticJointSchemaTokens->axis);
}

HdFloatDataSourceHandle
FabricPrismaticJointSchema::GetLowerLimit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPrismaticJointSchemaTokens->lowerLimit);
}

HdFloatDataSourceHandle
FabricPrismaticJointSchema::GetUpperLimit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPrismaticJointSchemaTokens->upperLimit);
}

/*static*/
HdContainerDataSourceHandle
FabricPrismaticJointSchema::BuildRetained(
        const HdTokenDataSourceHandle &axis,
        const HdFloatDataSourceHandle &lowerLimit,
        const HdFloatDataSourceHandle &upperLimit
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (axis) {
        _names[_count] = FabricPrismaticJointSchemaTokens->axis;
        _values[_count++] = axis;
    }

    if (lowerLimit) {
        _names[_count] = FabricPrismaticJointSchemaTokens->lowerLimit;
        _values[_count++] = lowerLimit;
    }

    if (upperLimit) {
        _names[_count] = FabricPrismaticJointSchemaTokens->upperLimit;
        _values[_count++] = upperLimit;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPrismaticJointSchema::Builder &
FabricPrismaticJointSchema::Builder::SetAxis(
    const HdTokenDataSourceHandle &axis)
{
    _axis = axis;
    return *this;
}

FabricPrismaticJointSchema::Builder &
FabricPrismaticJointSchema::Builder::SetLowerLimit(
    const HdFloatDataSourceHandle &lowerLimit)
{
    _lowerLimit = lowerLimit;
    return *this;
}

FabricPrismaticJointSchema::Builder &
FabricPrismaticJointSchema::Builder::SetUpperLimit(
    const HdFloatDataSourceHandle &upperLimit)
{
    _upperLimit = upperLimit;
    return *this;
}

HdContainerDataSourceHandle
FabricPrismaticJointSchema::Builder::Build()
{
    return FabricPrismaticJointSchema::BuildRetained(
        _axis,
        _lowerLimit,
        _upperLimit
    );
}

/*static*/
FabricPrismaticJointSchema
FabricPrismaticJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPrismaticJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPrismaticJointSchemaTokens->prismaticJoint))
        : nullptr);
}

/*static*/
const TfToken &
FabricPrismaticJointSchema::GetSchemaToken()
{
    return FabricPrismaticJointSchemaTokens->prismaticJoint;
}

/*static*/
const HdDataSourceLocator &
FabricPrismaticJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPrismaticJointSchema::GetAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPrismaticJointSchemaTokens->axis);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPrismaticJointSchema::GetLowerLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPrismaticJointSchemaTokens->lowerLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPrismaticJointSchema::GetUpperLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPrismaticJointSchemaTokens->upperLimit);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE