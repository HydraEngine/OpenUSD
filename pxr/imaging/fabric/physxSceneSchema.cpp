//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxSceneSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxSceneSchemaTokens,
    FABRIC_PHYSX_SCENE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxSceneSchema::GetBounceThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSceneSchemaTokens->bounceThreshold);
}

HdTokenDataSourceHandle
FabricPhysxSceneSchema::GetBroadphaseType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSceneSchemaTokens->broadphaseType);
}

HdTokenDataSourceHandle
FabricPhysxSceneSchema::GetCollisionSystem() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSceneSchemaTokens->collisionSystem);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableCCD);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableEnhancedDeterminism() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableEnhancedDeterminism);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableExternalForcesEveryIteration() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableExternalForcesEveryIteration);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableGPUDynamics() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableGPUDynamics);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableResidualReporting() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableResidualReporting);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableSceneQuerySupport() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableSceneQuerySupport);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetEnableStabilization() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->enableStabilization);
}

HdFloatDataSourceHandle
FabricPhysxSceneSchema::GetFrictionCorrelationDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSceneSchemaTokens->frictionCorrelationDistance);
}

HdFloatDataSourceHandle
FabricPhysxSceneSchema::GetFrictionOffsetThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSceneSchemaTokens->frictionOffsetThreshold);
}

HdTokenDataSourceHandle
FabricPhysxSceneSchema::GetFrictionType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSceneSchemaTokens->frictionType);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuCollisionStackSize() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuCollisionStackSize);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuFoundLostAggregatePairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuFoundLostPairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuHeapCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuHeapCapacity);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxDeformableSurfaceContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxHairContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxHairContacts);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxNumPartitions() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxNumPartitions);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxParticleContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxParticleContacts);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxRigidContactCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxRigidContactCount);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxRigidPatchCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxRigidPatchCount);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuMaxSoftBodyContacts() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuTempBufferCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuTempBufferCapacity);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetGpuTotalAggregatePairsCapacity() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetInvertCollisionGroupFilter() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->invertCollisionGroupFilter);
}

HdFloatDataSourceHandle
FabricPhysxSceneSchema::GetMaxBiasCoefficient() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSceneSchemaTokens->maxBiasCoefficient);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetMaxPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->maxPositionIterationCount);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetMaxVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->maxVelocityIterationCount);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetMinPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->minPositionIterationCount);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetMinVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->minVelocityIterationCount);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetReportKinematicKinematicPairs() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->reportKinematicKinematicPairs);
}

HdBoolDataSourceHandle
FabricPhysxSceneSchema::GetReportKinematicStaticPairs() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSceneSchemaTokens->reportKinematicStaticPairs);
}

HdTokenDataSourceHandle
FabricPhysxSceneSchema::GetSolverType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSceneSchemaTokens->solverType);
}

HdIntDataSourceHandle
FabricPhysxSceneSchema::GetTimeStepsPerSecond() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSceneSchemaTokens->timeStepsPerSecond);
}

HdTokenDataSourceHandle
FabricPhysxSceneSchema::GetUpdateType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSceneSchemaTokens->updateType);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxSceneSchema::BuildRetained(
        const HdFloatDataSourceHandle &bounceThreshold,
        const HdTokenDataSourceHandle &broadphaseType,
        const HdTokenDataSourceHandle &collisionSystem,
        const HdBoolDataSourceHandle &enableCCD,
        const HdBoolDataSourceHandle &enableEnhancedDeterminism,
        const HdBoolDataSourceHandle &enableExternalForcesEveryIteration,
        const HdBoolDataSourceHandle &enableGPUDynamics,
        const HdBoolDataSourceHandle &enableResidualReporting,
        const HdBoolDataSourceHandle &enableSceneQuerySupport,
        const HdBoolDataSourceHandle &enableStabilization,
        const HdFloatDataSourceHandle &frictionCorrelationDistance,
        const HdFloatDataSourceHandle &frictionOffsetThreshold,
        const HdTokenDataSourceHandle &frictionType,
        const HdIntDataSourceHandle &gpuCollisionStackSize,
        const HdIntDataSourceHandle &gpuFoundLostAggregatePairsCapacity,
        const HdIntDataSourceHandle &gpuFoundLostPairsCapacity,
        const HdIntDataSourceHandle &gpuHeapCapacity,
        const HdIntDataSourceHandle &gpuMaxDeformableSurfaceContacts,
        const HdIntDataSourceHandle &gpuMaxHairContacts,
        const HdIntDataSourceHandle &gpuMaxNumPartitions,
        const HdIntDataSourceHandle &gpuMaxParticleContacts,
        const HdIntDataSourceHandle &gpuMaxRigidContactCount,
        const HdIntDataSourceHandle &gpuMaxRigidPatchCount,
        const HdIntDataSourceHandle &gpuMaxSoftBodyContacts,
        const HdIntDataSourceHandle &gpuTempBufferCapacity,
        const HdIntDataSourceHandle &gpuTotalAggregatePairsCapacity,
        const HdBoolDataSourceHandle &invertCollisionGroupFilter,
        const HdFloatDataSourceHandle &maxBiasCoefficient,
        const HdIntDataSourceHandle &maxPositionIterationCount,
        const HdIntDataSourceHandle &maxVelocityIterationCount,
        const HdIntDataSourceHandle &minPositionIterationCount,
        const HdIntDataSourceHandle &minVelocityIterationCount,
        const HdBoolDataSourceHandle &reportKinematicKinematicPairs,
        const HdBoolDataSourceHandle &reportKinematicStaticPairs,
        const HdTokenDataSourceHandle &solverType,
        const HdIntDataSourceHandle &timeStepsPerSecond,
        const HdTokenDataSourceHandle &updateType
)
{
    TfToken _names[37];
    HdDataSourceBaseHandle _values[37];

    size_t _count = 0;

    if (bounceThreshold) {
        _names[_count] = FabricPhysxSceneSchemaTokens->bounceThreshold;
        _values[_count++] = bounceThreshold;
    }

    if (broadphaseType) {
        _names[_count] = FabricPhysxSceneSchemaTokens->broadphaseType;
        _values[_count++] = broadphaseType;
    }

    if (collisionSystem) {
        _names[_count] = FabricPhysxSceneSchemaTokens->collisionSystem;
        _values[_count++] = collisionSystem;
    }

    if (enableCCD) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableCCD;
        _values[_count++] = enableCCD;
    }

    if (enableEnhancedDeterminism) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableEnhancedDeterminism;
        _values[_count++] = enableEnhancedDeterminism;
    }

    if (enableExternalForcesEveryIteration) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableExternalForcesEveryIteration;
        _values[_count++] = enableExternalForcesEveryIteration;
    }

    if (enableGPUDynamics) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableGPUDynamics;
        _values[_count++] = enableGPUDynamics;
    }

    if (enableResidualReporting) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableResidualReporting;
        _values[_count++] = enableResidualReporting;
    }

    if (enableSceneQuerySupport) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableSceneQuerySupport;
        _values[_count++] = enableSceneQuerySupport;
    }

    if (enableStabilization) {
        _names[_count] = FabricPhysxSceneSchemaTokens->enableStabilization;
        _values[_count++] = enableStabilization;
    }

    if (frictionCorrelationDistance) {
        _names[_count] = FabricPhysxSceneSchemaTokens->frictionCorrelationDistance;
        _values[_count++] = frictionCorrelationDistance;
    }

    if (frictionOffsetThreshold) {
        _names[_count] = FabricPhysxSceneSchemaTokens->frictionOffsetThreshold;
        _values[_count++] = frictionOffsetThreshold;
    }

    if (frictionType) {
        _names[_count] = FabricPhysxSceneSchemaTokens->frictionType;
        _values[_count++] = frictionType;
    }

    if (gpuCollisionStackSize) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuCollisionStackSize;
        _values[_count++] = gpuCollisionStackSize;
    }

    if (gpuFoundLostAggregatePairsCapacity) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity;
        _values[_count++] = gpuFoundLostAggregatePairsCapacity;
    }

    if (gpuFoundLostPairsCapacity) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity;
        _values[_count++] = gpuFoundLostPairsCapacity;
    }

    if (gpuHeapCapacity) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuHeapCapacity;
        _values[_count++] = gpuHeapCapacity;
    }

    if (gpuMaxDeformableSurfaceContacts) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts;
        _values[_count++] = gpuMaxDeformableSurfaceContacts;
    }

    if (gpuMaxHairContacts) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxHairContacts;
        _values[_count++] = gpuMaxHairContacts;
    }

    if (gpuMaxNumPartitions) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxNumPartitions;
        _values[_count++] = gpuMaxNumPartitions;
    }

    if (gpuMaxParticleContacts) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxParticleContacts;
        _values[_count++] = gpuMaxParticleContacts;
    }

    if (gpuMaxRigidContactCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxRigidContactCount;
        _values[_count++] = gpuMaxRigidContactCount;
    }

    if (gpuMaxRigidPatchCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxRigidPatchCount;
        _values[_count++] = gpuMaxRigidPatchCount;
    }

    if (gpuMaxSoftBodyContacts) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts;
        _values[_count++] = gpuMaxSoftBodyContacts;
    }

    if (gpuTempBufferCapacity) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuTempBufferCapacity;
        _values[_count++] = gpuTempBufferCapacity;
    }

    if (gpuTotalAggregatePairsCapacity) {
        _names[_count] = FabricPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity;
        _values[_count++] = gpuTotalAggregatePairsCapacity;
    }

    if (invertCollisionGroupFilter) {
        _names[_count] = FabricPhysxSceneSchemaTokens->invertCollisionGroupFilter;
        _values[_count++] = invertCollisionGroupFilter;
    }

    if (maxBiasCoefficient) {
        _names[_count] = FabricPhysxSceneSchemaTokens->maxBiasCoefficient;
        _values[_count++] = maxBiasCoefficient;
    }

    if (maxPositionIterationCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->maxPositionIterationCount;
        _values[_count++] = maxPositionIterationCount;
    }

    if (maxVelocityIterationCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->maxVelocityIterationCount;
        _values[_count++] = maxVelocityIterationCount;
    }

    if (minPositionIterationCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->minPositionIterationCount;
        _values[_count++] = minPositionIterationCount;
    }

    if (minVelocityIterationCount) {
        _names[_count] = FabricPhysxSceneSchemaTokens->minVelocityIterationCount;
        _values[_count++] = minVelocityIterationCount;
    }

    if (reportKinematicKinematicPairs) {
        _names[_count] = FabricPhysxSceneSchemaTokens->reportKinematicKinematicPairs;
        _values[_count++] = reportKinematicKinematicPairs;
    }

    if (reportKinematicStaticPairs) {
        _names[_count] = FabricPhysxSceneSchemaTokens->reportKinematicStaticPairs;
        _values[_count++] = reportKinematicStaticPairs;
    }

    if (solverType) {
        _names[_count] = FabricPhysxSceneSchemaTokens->solverType;
        _values[_count++] = solverType;
    }

    if (timeStepsPerSecond) {
        _names[_count] = FabricPhysxSceneSchemaTokens->timeStepsPerSecond;
        _values[_count++] = timeStepsPerSecond;
    }

    if (updateType) {
        _names[_count] = FabricPhysxSceneSchemaTokens->updateType;
        _values[_count++] = updateType;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetBounceThreshold(
    const HdFloatDataSourceHandle &bounceThreshold)
{
    _bounceThreshold = bounceThreshold;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetBroadphaseType(
    const HdTokenDataSourceHandle &broadphaseType)
{
    _broadphaseType = broadphaseType;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetCollisionSystem(
    const HdTokenDataSourceHandle &collisionSystem)
{
    _collisionSystem = collisionSystem;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableCCD(
    const HdBoolDataSourceHandle &enableCCD)
{
    _enableCCD = enableCCD;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableEnhancedDeterminism(
    const HdBoolDataSourceHandle &enableEnhancedDeterminism)
{
    _enableEnhancedDeterminism = enableEnhancedDeterminism;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableExternalForcesEveryIteration(
    const HdBoolDataSourceHandle &enableExternalForcesEveryIteration)
{
    _enableExternalForcesEveryIteration = enableExternalForcesEveryIteration;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableGPUDynamics(
    const HdBoolDataSourceHandle &enableGPUDynamics)
{
    _enableGPUDynamics = enableGPUDynamics;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableResidualReporting(
    const HdBoolDataSourceHandle &enableResidualReporting)
{
    _enableResidualReporting = enableResidualReporting;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableSceneQuerySupport(
    const HdBoolDataSourceHandle &enableSceneQuerySupport)
{
    _enableSceneQuerySupport = enableSceneQuerySupport;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetEnableStabilization(
    const HdBoolDataSourceHandle &enableStabilization)
{
    _enableStabilization = enableStabilization;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetFrictionCorrelationDistance(
    const HdFloatDataSourceHandle &frictionCorrelationDistance)
{
    _frictionCorrelationDistance = frictionCorrelationDistance;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetFrictionOffsetThreshold(
    const HdFloatDataSourceHandle &frictionOffsetThreshold)
{
    _frictionOffsetThreshold = frictionOffsetThreshold;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetFrictionType(
    const HdTokenDataSourceHandle &frictionType)
{
    _frictionType = frictionType;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuCollisionStackSize(
    const HdIntDataSourceHandle &gpuCollisionStackSize)
{
    _gpuCollisionStackSize = gpuCollisionStackSize;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuFoundLostAggregatePairsCapacity(
    const HdIntDataSourceHandle &gpuFoundLostAggregatePairsCapacity)
{
    _gpuFoundLostAggregatePairsCapacity = gpuFoundLostAggregatePairsCapacity;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuFoundLostPairsCapacity(
    const HdIntDataSourceHandle &gpuFoundLostPairsCapacity)
{
    _gpuFoundLostPairsCapacity = gpuFoundLostPairsCapacity;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuHeapCapacity(
    const HdIntDataSourceHandle &gpuHeapCapacity)
{
    _gpuHeapCapacity = gpuHeapCapacity;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxDeformableSurfaceContacts(
    const HdIntDataSourceHandle &gpuMaxDeformableSurfaceContacts)
{
    _gpuMaxDeformableSurfaceContacts = gpuMaxDeformableSurfaceContacts;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxHairContacts(
    const HdIntDataSourceHandle &gpuMaxHairContacts)
{
    _gpuMaxHairContacts = gpuMaxHairContacts;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxNumPartitions(
    const HdIntDataSourceHandle &gpuMaxNumPartitions)
{
    _gpuMaxNumPartitions = gpuMaxNumPartitions;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxParticleContacts(
    const HdIntDataSourceHandle &gpuMaxParticleContacts)
{
    _gpuMaxParticleContacts = gpuMaxParticleContacts;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxRigidContactCount(
    const HdIntDataSourceHandle &gpuMaxRigidContactCount)
{
    _gpuMaxRigidContactCount = gpuMaxRigidContactCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxRigidPatchCount(
    const HdIntDataSourceHandle &gpuMaxRigidPatchCount)
{
    _gpuMaxRigidPatchCount = gpuMaxRigidPatchCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuMaxSoftBodyContacts(
    const HdIntDataSourceHandle &gpuMaxSoftBodyContacts)
{
    _gpuMaxSoftBodyContacts = gpuMaxSoftBodyContacts;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuTempBufferCapacity(
    const HdIntDataSourceHandle &gpuTempBufferCapacity)
{
    _gpuTempBufferCapacity = gpuTempBufferCapacity;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetGpuTotalAggregatePairsCapacity(
    const HdIntDataSourceHandle &gpuTotalAggregatePairsCapacity)
{
    _gpuTotalAggregatePairsCapacity = gpuTotalAggregatePairsCapacity;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetInvertCollisionGroupFilter(
    const HdBoolDataSourceHandle &invertCollisionGroupFilter)
{
    _invertCollisionGroupFilter = invertCollisionGroupFilter;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetMaxBiasCoefficient(
    const HdFloatDataSourceHandle &maxBiasCoefficient)
{
    _maxBiasCoefficient = maxBiasCoefficient;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetMaxPositionIterationCount(
    const HdIntDataSourceHandle &maxPositionIterationCount)
{
    _maxPositionIterationCount = maxPositionIterationCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetMaxVelocityIterationCount(
    const HdIntDataSourceHandle &maxVelocityIterationCount)
{
    _maxVelocityIterationCount = maxVelocityIterationCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetMinPositionIterationCount(
    const HdIntDataSourceHandle &minPositionIterationCount)
{
    _minPositionIterationCount = minPositionIterationCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetMinVelocityIterationCount(
    const HdIntDataSourceHandle &minVelocityIterationCount)
{
    _minVelocityIterationCount = minVelocityIterationCount;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetReportKinematicKinematicPairs(
    const HdBoolDataSourceHandle &reportKinematicKinematicPairs)
{
    _reportKinematicKinematicPairs = reportKinematicKinematicPairs;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetReportKinematicStaticPairs(
    const HdBoolDataSourceHandle &reportKinematicStaticPairs)
{
    _reportKinematicStaticPairs = reportKinematicStaticPairs;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetSolverType(
    const HdTokenDataSourceHandle &solverType)
{
    _solverType = solverType;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetTimeStepsPerSecond(
    const HdIntDataSourceHandle &timeStepsPerSecond)
{
    _timeStepsPerSecond = timeStepsPerSecond;
    return *this;
}

FabricPhysxSceneSchema::Builder &
FabricPhysxSceneSchema::Builder::SetUpdateType(
    const HdTokenDataSourceHandle &updateType)
{
    _updateType = updateType;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxSceneSchema::Builder::Build()
{
    return FabricPhysxSceneSchema::BuildRetained(
        _bounceThreshold,
        _broadphaseType,
        _collisionSystem,
        _enableCCD,
        _enableEnhancedDeterminism,
        _enableExternalForcesEveryIteration,
        _enableGPUDynamics,
        _enableResidualReporting,
        _enableSceneQuerySupport,
        _enableStabilization,
        _frictionCorrelationDistance,
        _frictionOffsetThreshold,
        _frictionType,
        _gpuCollisionStackSize,
        _gpuFoundLostAggregatePairsCapacity,
        _gpuFoundLostPairsCapacity,
        _gpuHeapCapacity,
        _gpuMaxDeformableSurfaceContacts,
        _gpuMaxHairContacts,
        _gpuMaxNumPartitions,
        _gpuMaxParticleContacts,
        _gpuMaxRigidContactCount,
        _gpuMaxRigidPatchCount,
        _gpuMaxSoftBodyContacts,
        _gpuTempBufferCapacity,
        _gpuTotalAggregatePairsCapacity,
        _invertCollisionGroupFilter,
        _maxBiasCoefficient,
        _maxPositionIterationCount,
        _maxVelocityIterationCount,
        _minPositionIterationCount,
        _minVelocityIterationCount,
        _reportKinematicKinematicPairs,
        _reportKinematicStaticPairs,
        _solverType,
        _timeStepsPerSecond,
        _updateType
    );
}

/*static*/
FabricPhysxSceneSchema
FabricPhysxSceneSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxSceneSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxSceneSchemaTokens->physxScene))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxSceneSchema::GetSchemaToken()
{
    return FabricPhysxSceneSchemaTokens->physxScene;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetBounceThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->bounceThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetBroadphaseTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->broadphaseType);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetCollisionSystemLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->collisionSystem);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableEnhancedDeterminismLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableEnhancedDeterminism);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableExternalForcesEveryIterationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableExternalForcesEveryIteration);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableGPUDynamicsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableGPUDynamics);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableResidualReportingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableResidualReporting);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableSceneQuerySupportLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableSceneQuerySupport);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetEnableStabilizationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->enableStabilization);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetFrictionCorrelationDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->frictionCorrelationDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetFrictionOffsetThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->frictionOffsetThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetFrictionTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->frictionType);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuCollisionStackSizeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuCollisionStackSize);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuFoundLostAggregatePairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuFoundLostAggregatePairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuFoundLostPairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuFoundLostPairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuHeapCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuHeapCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxDeformableSurfaceContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxDeformableSurfaceContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxHairContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxHairContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxNumPartitionsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxNumPartitions);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxParticleContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxParticleContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxRigidContactCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxRigidContactCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxRigidPatchCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxRigidPatchCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuMaxSoftBodyContactsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuMaxSoftBodyContacts);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuTempBufferCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuTempBufferCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetGpuTotalAggregatePairsCapacityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->gpuTotalAggregatePairsCapacity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetInvertCollisionGroupFilterLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->invertCollisionGroupFilter);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetMaxBiasCoefficientLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->maxBiasCoefficient);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetMaxPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->maxPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetMaxVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->maxVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetMinPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->minPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetMinVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->minVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetReportKinematicKinematicPairsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->reportKinematicKinematicPairs);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetReportKinematicStaticPairsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->reportKinematicStaticPairs);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetSolverTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->solverType);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetTimeStepsPerSecondLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->timeStepsPerSecond);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSceneSchema::GetUpdateTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSceneSchemaTokens->updateType);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE