//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxCameraSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxCameraSchemaTokens,
    FABRIC_PHYSX_CAMERA_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
FabricPhysxCameraSchema::GetAlwaysUpdateEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxCameraSchemaTokens->alwaysUpdateEnabled);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxCameraSchema::BuildRetained(
        const HdBoolDataSourceHandle &alwaysUpdateEnabled
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (alwaysUpdateEnabled) {
        _names[_count] = FabricPhysxCameraSchemaTokens->alwaysUpdateEnabled;
        _values[_count++] = alwaysUpdateEnabled;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxCameraSchema::Builder &
FabricPhysxCameraSchema::Builder::SetAlwaysUpdateEnabled(
    const HdBoolDataSourceHandle &alwaysUpdateEnabled)
{
    _alwaysUpdateEnabled = alwaysUpdateEnabled;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxCameraSchema::Builder::Build()
{
    return FabricPhysxCameraSchema::BuildRetained(
        _alwaysUpdateEnabled
    );
}

/*static*/
FabricPhysxCameraSchema
FabricPhysxCameraSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxCameraSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxCameraSchemaTokens->physxCamera))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxCameraSchema::GetSchemaToken()
{
    return FabricPhysxCameraSchemaTokens->physxCamera;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxCameraSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCameraSchema::GetAlwaysUpdateEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCameraSchemaTokens->alwaysUpdateEnabled);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE