//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxPhysicsDistanceJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxPhysicsDistanceJointSchemaTokens,
    FABRIC_PHYSX_PHYSICS_DISTANCE_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxPhysicsDistanceJointSchema::GetSpringDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxPhysicsDistanceJointSchemaTokens->springDamping);
}

HdBoolDataSourceHandle
FabricPhysxPhysicsDistanceJointSchema::GetSpringEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxPhysicsDistanceJointSchemaTokens->springEnabled);
}

HdFloatDataSourceHandle
FabricPhysxPhysicsDistanceJointSchema::GetSpringStiffness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxPhysicsDistanceJointSchemaTokens->springStiffness);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxPhysicsDistanceJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &springDamping,
        const HdBoolDataSourceHandle &springEnabled,
        const HdFloatDataSourceHandle &springStiffness
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (springDamping) {
        _names[_count] = FabricPhysxPhysicsDistanceJointSchemaTokens->springDamping;
        _values[_count++] = springDamping;
    }

    if (springEnabled) {
        _names[_count] = FabricPhysxPhysicsDistanceJointSchemaTokens->springEnabled;
        _values[_count++] = springEnabled;
    }

    if (springStiffness) {
        _names[_count] = FabricPhysxPhysicsDistanceJointSchemaTokens->springStiffness;
        _values[_count++] = springStiffness;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxPhysicsDistanceJointSchema::Builder &
FabricPhysxPhysicsDistanceJointSchema::Builder::SetSpringDamping(
    const HdFloatDataSourceHandle &springDamping)
{
    _springDamping = springDamping;
    return *this;
}

FabricPhysxPhysicsDistanceJointSchema::Builder &
FabricPhysxPhysicsDistanceJointSchema::Builder::SetSpringEnabled(
    const HdBoolDataSourceHandle &springEnabled)
{
    _springEnabled = springEnabled;
    return *this;
}

FabricPhysxPhysicsDistanceJointSchema::Builder &
FabricPhysxPhysicsDistanceJointSchema::Builder::SetSpringStiffness(
    const HdFloatDataSourceHandle &springStiffness)
{
    _springStiffness = springStiffness;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxPhysicsDistanceJointSchema::Builder::Build()
{
    return FabricPhysxPhysicsDistanceJointSchema::BuildRetained(
        _springDamping,
        _springEnabled,
        _springStiffness
    );
}

/*static*/
FabricPhysxPhysicsDistanceJointSchema
FabricPhysxPhysicsDistanceJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxPhysicsDistanceJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxPhysicsDistanceJointSchemaTokens->physxPhysicsDistanceJoint))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxPhysicsDistanceJointSchema::GetSchemaToken()
{
    return FabricPhysxPhysicsDistanceJointSchemaTokens->physxPhysicsDistanceJoint;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxPhysicsDistanceJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsDistanceJointSchema::GetSpringDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsDistanceJointSchemaTokens->springDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsDistanceJointSchema::GetSpringEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsDistanceJointSchemaTokens->springEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsDistanceJointSchema::GetSpringStiffnessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsDistanceJointSchemaTokens->springStiffness);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE