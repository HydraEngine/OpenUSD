//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleContextSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleContextSchemaTokens,
    FABRIC_PHYSX_VEHICLE_CONTEXT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
FabricPhysxVehicleContextSchema::GetLongitudinalAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxVehicleContextSchemaTokens->longitudinalAxis);
}

HdTokenDataSourceHandle
FabricPhysxVehicleContextSchema::GetUpdateMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxVehicleContextSchemaTokens->updateMode);
}

HdTokenDataSourceHandle
FabricPhysxVehicleContextSchema::GetVerticalAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxVehicleContextSchemaTokens->verticalAxis);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleContextSchema::BuildRetained(
        const HdTokenDataSourceHandle &longitudinalAxis,
        const HdTokenDataSourceHandle &updateMode,
        const HdTokenDataSourceHandle &verticalAxis
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (longitudinalAxis) {
        _names[_count] = FabricPhysxVehicleContextSchemaTokens->longitudinalAxis;
        _values[_count++] = longitudinalAxis;
    }

    if (updateMode) {
        _names[_count] = FabricPhysxVehicleContextSchemaTokens->updateMode;
        _values[_count++] = updateMode;
    }

    if (verticalAxis) {
        _names[_count] = FabricPhysxVehicleContextSchemaTokens->verticalAxis;
        _values[_count++] = verticalAxis;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleContextSchema::Builder &
FabricPhysxVehicleContextSchema::Builder::SetLongitudinalAxis(
    const HdTokenDataSourceHandle &longitudinalAxis)
{
    _longitudinalAxis = longitudinalAxis;
    return *this;
}

FabricPhysxVehicleContextSchema::Builder &
FabricPhysxVehicleContextSchema::Builder::SetUpdateMode(
    const HdTokenDataSourceHandle &updateMode)
{
    _updateMode = updateMode;
    return *this;
}

FabricPhysxVehicleContextSchema::Builder &
FabricPhysxVehicleContextSchema::Builder::SetVerticalAxis(
    const HdTokenDataSourceHandle &verticalAxis)
{
    _verticalAxis = verticalAxis;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleContextSchema::Builder::Build()
{
    return FabricPhysxVehicleContextSchema::BuildRetained(
        _longitudinalAxis,
        _updateMode,
        _verticalAxis
    );
}

/*static*/
FabricPhysxVehicleContextSchema
FabricPhysxVehicleContextSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleContextSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleContextSchemaTokens->physxVehicleContext))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleContextSchema::GetSchemaToken()
{
    return FabricPhysxVehicleContextSchemaTokens->physxVehicleContext;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleContextSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleContextSchema::GetLongitudinalAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleContextSchemaTokens->longitudinalAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleContextSchema::GetUpdateModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleContextSchemaTokens->updateMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleContextSchema::GetVerticalAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleContextSchemaTokens->verticalAxis);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE