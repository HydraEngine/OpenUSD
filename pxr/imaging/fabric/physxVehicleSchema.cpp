//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleSchemaTokens,
    FABRIC_PHYSX_VEHICLE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntDataSourceHandle
FabricPhysxVehicleSchema::GetHighForwardSpeedSubStepCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLateralStickyTireDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->lateralStickyTireDamping);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLateralStickyTireThresholdSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLateralStickyTireThresholdTime() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime);
}

HdBoolDataSourceHandle
FabricPhysxVehicleSchema::GetLimitSuspensionExpansionVelocity() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLongitudinalStickyTireDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->longitudinalStickyTireDamping);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLongitudinalStickyTireThresholdSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetLongitudinalStickyTireThresholdTime() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime);
}

HdIntDataSourceHandle
FabricPhysxVehicleSchema::GetLowForwardSpeedSubStepCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetMinActiveLongitudinalSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetMinLateralSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->minLateralSlipDenominator);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetMinPassiveLongitudinalSlipDenominator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator);
}

HdFloatDataSourceHandle
FabricPhysxVehicleSchema::GetSubStepThresholdLongitudinalSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed);
}

HdTokenDataSourceHandle
FabricPhysxVehicleSchema::GetSuspensionLineQueryType() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxVehicleSchemaTokens->suspensionLineQueryType);
}

HdBoolDataSourceHandle
FabricPhysxVehicleSchema::GetVehicleEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxVehicleSchemaTokens->vehicleEnabled);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleSchema::BuildRetained(
        const HdIntDataSourceHandle &highForwardSpeedSubStepCount,
        const HdFloatDataSourceHandle &lateralStickyTireDamping,
        const HdFloatDataSourceHandle &lateralStickyTireThresholdSpeed,
        const HdFloatDataSourceHandle &lateralStickyTireThresholdTime,
        const HdBoolDataSourceHandle &limitSuspensionExpansionVelocity,
        const HdFloatDataSourceHandle &longitudinalStickyTireDamping,
        const HdFloatDataSourceHandle &longitudinalStickyTireThresholdSpeed,
        const HdFloatDataSourceHandle &longitudinalStickyTireThresholdTime,
        const HdIntDataSourceHandle &lowForwardSpeedSubStepCount,
        const HdFloatDataSourceHandle &minActiveLongitudinalSlipDenominator,
        const HdFloatDataSourceHandle &minLateralSlipDenominator,
        const HdFloatDataSourceHandle &minPassiveLongitudinalSlipDenominator,
        const HdFloatDataSourceHandle &subStepThresholdLongitudinalSpeed,
        const HdTokenDataSourceHandle &suspensionLineQueryType,
        const HdBoolDataSourceHandle &vehicleEnabled
)
{
    TfToken _names[15];
    HdDataSourceBaseHandle _values[15];

    size_t _count = 0;

    if (highForwardSpeedSubStepCount) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount;
        _values[_count++] = highForwardSpeedSubStepCount;
    }

    if (lateralStickyTireDamping) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->lateralStickyTireDamping;
        _values[_count++] = lateralStickyTireDamping;
    }

    if (lateralStickyTireThresholdSpeed) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed;
        _values[_count++] = lateralStickyTireThresholdSpeed;
    }

    if (lateralStickyTireThresholdTime) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime;
        _values[_count++] = lateralStickyTireThresholdTime;
    }

    if (limitSuspensionExpansionVelocity) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity;
        _values[_count++] = limitSuspensionExpansionVelocity;
    }

    if (longitudinalStickyTireDamping) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->longitudinalStickyTireDamping;
        _values[_count++] = longitudinalStickyTireDamping;
    }

    if (longitudinalStickyTireThresholdSpeed) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed;
        _values[_count++] = longitudinalStickyTireThresholdSpeed;
    }

    if (longitudinalStickyTireThresholdTime) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime;
        _values[_count++] = longitudinalStickyTireThresholdTime;
    }

    if (lowForwardSpeedSubStepCount) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount;
        _values[_count++] = lowForwardSpeedSubStepCount;
    }

    if (minActiveLongitudinalSlipDenominator) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator;
        _values[_count++] = minActiveLongitudinalSlipDenominator;
    }

    if (minLateralSlipDenominator) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->minLateralSlipDenominator;
        _values[_count++] = minLateralSlipDenominator;
    }

    if (minPassiveLongitudinalSlipDenominator) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator;
        _values[_count++] = minPassiveLongitudinalSlipDenominator;
    }

    if (subStepThresholdLongitudinalSpeed) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed;
        _values[_count++] = subStepThresholdLongitudinalSpeed;
    }

    if (suspensionLineQueryType) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->suspensionLineQueryType;
        _values[_count++] = suspensionLineQueryType;
    }

    if (vehicleEnabled) {
        _names[_count] = FabricPhysxVehicleSchemaTokens->vehicleEnabled;
        _values[_count++] = vehicleEnabled;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetHighForwardSpeedSubStepCount(
    const HdIntDataSourceHandle &highForwardSpeedSubStepCount)
{
    _highForwardSpeedSubStepCount = highForwardSpeedSubStepCount;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLateralStickyTireDamping(
    const HdFloatDataSourceHandle &lateralStickyTireDamping)
{
    _lateralStickyTireDamping = lateralStickyTireDamping;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLateralStickyTireThresholdSpeed(
    const HdFloatDataSourceHandle &lateralStickyTireThresholdSpeed)
{
    _lateralStickyTireThresholdSpeed = lateralStickyTireThresholdSpeed;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLateralStickyTireThresholdTime(
    const HdFloatDataSourceHandle &lateralStickyTireThresholdTime)
{
    _lateralStickyTireThresholdTime = lateralStickyTireThresholdTime;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLimitSuspensionExpansionVelocity(
    const HdBoolDataSourceHandle &limitSuspensionExpansionVelocity)
{
    _limitSuspensionExpansionVelocity = limitSuspensionExpansionVelocity;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLongitudinalStickyTireDamping(
    const HdFloatDataSourceHandle &longitudinalStickyTireDamping)
{
    _longitudinalStickyTireDamping = longitudinalStickyTireDamping;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLongitudinalStickyTireThresholdSpeed(
    const HdFloatDataSourceHandle &longitudinalStickyTireThresholdSpeed)
{
    _longitudinalStickyTireThresholdSpeed = longitudinalStickyTireThresholdSpeed;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLongitudinalStickyTireThresholdTime(
    const HdFloatDataSourceHandle &longitudinalStickyTireThresholdTime)
{
    _longitudinalStickyTireThresholdTime = longitudinalStickyTireThresholdTime;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetLowForwardSpeedSubStepCount(
    const HdIntDataSourceHandle &lowForwardSpeedSubStepCount)
{
    _lowForwardSpeedSubStepCount = lowForwardSpeedSubStepCount;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetMinActiveLongitudinalSlipDenominator(
    const HdFloatDataSourceHandle &minActiveLongitudinalSlipDenominator)
{
    _minActiveLongitudinalSlipDenominator = minActiveLongitudinalSlipDenominator;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetMinLateralSlipDenominator(
    const HdFloatDataSourceHandle &minLateralSlipDenominator)
{
    _minLateralSlipDenominator = minLateralSlipDenominator;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetMinPassiveLongitudinalSlipDenominator(
    const HdFloatDataSourceHandle &minPassiveLongitudinalSlipDenominator)
{
    _minPassiveLongitudinalSlipDenominator = minPassiveLongitudinalSlipDenominator;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetSubStepThresholdLongitudinalSpeed(
    const HdFloatDataSourceHandle &subStepThresholdLongitudinalSpeed)
{
    _subStepThresholdLongitudinalSpeed = subStepThresholdLongitudinalSpeed;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetSuspensionLineQueryType(
    const HdTokenDataSourceHandle &suspensionLineQueryType)
{
    _suspensionLineQueryType = suspensionLineQueryType;
    return *this;
}

FabricPhysxVehicleSchema::Builder &
FabricPhysxVehicleSchema::Builder::SetVehicleEnabled(
    const HdBoolDataSourceHandle &vehicleEnabled)
{
    _vehicleEnabled = vehicleEnabled;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleSchema::Builder::Build()
{
    return FabricPhysxVehicleSchema::BuildRetained(
        _highForwardSpeedSubStepCount,
        _lateralStickyTireDamping,
        _lateralStickyTireThresholdSpeed,
        _lateralStickyTireThresholdTime,
        _limitSuspensionExpansionVelocity,
        _longitudinalStickyTireDamping,
        _longitudinalStickyTireThresholdSpeed,
        _longitudinalStickyTireThresholdTime,
        _lowForwardSpeedSubStepCount,
        _minActiveLongitudinalSlipDenominator,
        _minLateralSlipDenominator,
        _minPassiveLongitudinalSlipDenominator,
        _subStepThresholdLongitudinalSpeed,
        _suspensionLineQueryType,
        _vehicleEnabled
    );
}

/*static*/
FabricPhysxVehicleSchema
FabricPhysxVehicleSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleSchemaTokens->physxVehicle))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleSchema::GetSchemaToken()
{
    return FabricPhysxVehicleSchemaTokens->physxVehicle;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetHighForwardSpeedSubStepCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->highForwardSpeedSubStepCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLateralStickyTireDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->lateralStickyTireDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLateralStickyTireThresholdSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLateralStickyTireThresholdTimeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->lateralStickyTireThresholdTime);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLimitSuspensionExpansionVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->limitSuspensionExpansionVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLongitudinalStickyTireDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->longitudinalStickyTireDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLongitudinalStickyTireThresholdSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLongitudinalStickyTireThresholdTimeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->longitudinalStickyTireThresholdTime);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetLowForwardSpeedSubStepCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->lowForwardSpeedSubStepCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetMinActiveLongitudinalSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->minActiveLongitudinalSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetMinLateralSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->minLateralSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetMinPassiveLongitudinalSlipDenominatorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->minPassiveLongitudinalSlipDenominator);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetSubStepThresholdLongitudinalSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->subStepThresholdLongitudinalSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetSuspensionLineQueryTypeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->suspensionLineQueryType);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleSchema::GetVehicleEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleSchemaTokens->vehicleEnabled);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE