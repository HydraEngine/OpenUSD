//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleWheelControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleWheelControllerSchemaTokens,
    FABRIC_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxVehicleWheelControllerSchema::GetBrakeTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelControllerSchemaTokens->brakeTorque);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelControllerSchema::GetDriveTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelControllerSchemaTokens->driveTorque);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelControllerSchema::GetSteerAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelControllerSchemaTokens->steerAngle);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleWheelControllerSchema::BuildRetained(
        const HdFloatDataSourceHandle &brakeTorque,
        const HdFloatDataSourceHandle &driveTorque,
        const HdFloatDataSourceHandle &steerAngle
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (brakeTorque) {
        _names[_count] = FabricPhysxVehicleWheelControllerSchemaTokens->brakeTorque;
        _values[_count++] = brakeTorque;
    }

    if (driveTorque) {
        _names[_count] = FabricPhysxVehicleWheelControllerSchemaTokens->driveTorque;
        _values[_count++] = driveTorque;
    }

    if (steerAngle) {
        _names[_count] = FabricPhysxVehicleWheelControllerSchemaTokens->steerAngle;
        _values[_count++] = steerAngle;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleWheelControllerSchema::Builder &
FabricPhysxVehicleWheelControllerSchema::Builder::SetBrakeTorque(
    const HdFloatDataSourceHandle &brakeTorque)
{
    _brakeTorque = brakeTorque;
    return *this;
}

FabricPhysxVehicleWheelControllerSchema::Builder &
FabricPhysxVehicleWheelControllerSchema::Builder::SetDriveTorque(
    const HdFloatDataSourceHandle &driveTorque)
{
    _driveTorque = driveTorque;
    return *this;
}

FabricPhysxVehicleWheelControllerSchema::Builder &
FabricPhysxVehicleWheelControllerSchema::Builder::SetSteerAngle(
    const HdFloatDataSourceHandle &steerAngle)
{
    _steerAngle = steerAngle;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleWheelControllerSchema::Builder::Build()
{
    return FabricPhysxVehicleWheelControllerSchema::BuildRetained(
        _brakeTorque,
        _driveTorque,
        _steerAngle
    );
}

/*static*/
FabricPhysxVehicleWheelControllerSchema
FabricPhysxVehicleWheelControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleWheelControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleWheelControllerSchemaTokens->physxVehicleWheelController))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleWheelControllerSchema::GetSchemaToken()
{
    return FabricPhysxVehicleWheelControllerSchemaTokens->physxVehicleWheelController;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleWheelControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelControllerSchema::GetBrakeTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelControllerSchemaTokens->brakeTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelControllerSchema::GetDriveTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelControllerSchemaTokens->driveTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelControllerSchema::GetSteerAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelControllerSchemaTokens->steerAngle);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE