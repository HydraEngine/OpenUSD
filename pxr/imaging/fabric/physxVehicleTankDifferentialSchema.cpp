//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleTankDifferentialSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleTankDifferentialSchemaTokens,
    FABRIC_PHYSX_VEHICLE_TANK_DIFFERENTIAL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntArrayDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::GetNumberOfWheelsPerTrack() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        FabricPhysxVehicleTankDifferentialSchemaTokens->numberOfWheelsPerTrack);
}

HdIntArrayDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::GetThrustIndexPerTrack() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        FabricPhysxVehicleTankDifferentialSchemaTokens->thrustIndexPerTrack);
}

HdIntArrayDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::GetTrackToWheelIndices() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        FabricPhysxVehicleTankDifferentialSchemaTokens->trackToWheelIndices);
}

HdIntArrayDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::GetWheelIndicesInTrackOrder() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        FabricPhysxVehicleTankDifferentialSchemaTokens->wheelIndicesInTrackOrder);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::BuildRetained(
        const HdIntArrayDataSourceHandle &numberOfWheelsPerTrack,
        const HdIntArrayDataSourceHandle &thrustIndexPerTrack,
        const HdIntArrayDataSourceHandle &trackToWheelIndices,
        const HdIntArrayDataSourceHandle &wheelIndicesInTrackOrder
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (numberOfWheelsPerTrack) {
        _names[_count] = FabricPhysxVehicleTankDifferentialSchemaTokens->numberOfWheelsPerTrack;
        _values[_count++] = numberOfWheelsPerTrack;
    }

    if (thrustIndexPerTrack) {
        _names[_count] = FabricPhysxVehicleTankDifferentialSchemaTokens->thrustIndexPerTrack;
        _values[_count++] = thrustIndexPerTrack;
    }

    if (trackToWheelIndices) {
        _names[_count] = FabricPhysxVehicleTankDifferentialSchemaTokens->trackToWheelIndices;
        _values[_count++] = trackToWheelIndices;
    }

    if (wheelIndicesInTrackOrder) {
        _names[_count] = FabricPhysxVehicleTankDifferentialSchemaTokens->wheelIndicesInTrackOrder;
        _values[_count++] = wheelIndicesInTrackOrder;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleTankDifferentialSchema::Builder &
FabricPhysxVehicleTankDifferentialSchema::Builder::SetNumberOfWheelsPerTrack(
    const HdIntArrayDataSourceHandle &numberOfWheelsPerTrack)
{
    _numberOfWheelsPerTrack = numberOfWheelsPerTrack;
    return *this;
}

FabricPhysxVehicleTankDifferentialSchema::Builder &
FabricPhysxVehicleTankDifferentialSchema::Builder::SetThrustIndexPerTrack(
    const HdIntArrayDataSourceHandle &thrustIndexPerTrack)
{
    _thrustIndexPerTrack = thrustIndexPerTrack;
    return *this;
}

FabricPhysxVehicleTankDifferentialSchema::Builder &
FabricPhysxVehicleTankDifferentialSchema::Builder::SetTrackToWheelIndices(
    const HdIntArrayDataSourceHandle &trackToWheelIndices)
{
    _trackToWheelIndices = trackToWheelIndices;
    return *this;
}

FabricPhysxVehicleTankDifferentialSchema::Builder &
FabricPhysxVehicleTankDifferentialSchema::Builder::SetWheelIndicesInTrackOrder(
    const HdIntArrayDataSourceHandle &wheelIndicesInTrackOrder)
{
    _wheelIndicesInTrackOrder = wheelIndicesInTrackOrder;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleTankDifferentialSchema::Builder::Build()
{
    return FabricPhysxVehicleTankDifferentialSchema::BuildRetained(
        _numberOfWheelsPerTrack,
        _thrustIndexPerTrack,
        _trackToWheelIndices,
        _wheelIndicesInTrackOrder
    );
}

/*static*/
FabricPhysxVehicleTankDifferentialSchema
FabricPhysxVehicleTankDifferentialSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleTankDifferentialSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleTankDifferentialSchemaTokens->physxVehicleTankDifferential))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleTankDifferentialSchema::GetSchemaToken()
{
    return FabricPhysxVehicleTankDifferentialSchemaTokens->physxVehicleTankDifferential;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleTankDifferentialSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleTankDifferentialSchema::GetNumberOfWheelsPerTrackLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleTankDifferentialSchemaTokens->numberOfWheelsPerTrack);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleTankDifferentialSchema::GetThrustIndexPerTrackLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleTankDifferentialSchemaTokens->thrustIndexPerTrack);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleTankDifferentialSchema::GetTrackToWheelIndicesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleTankDifferentialSchemaTokens->trackToWheelIndices);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleTankDifferentialSchema::GetWheelIndicesInTrackOrderLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleTankDifferentialSchemaTokens->wheelIndicesInTrackOrder);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE