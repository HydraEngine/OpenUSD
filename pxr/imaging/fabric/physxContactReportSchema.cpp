//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxContactReportSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxContactReportSchemaTokens,
    FABRIC_PHYSX_CONTACT_REPORT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxContactReportSchema::GetThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxContactReportSchemaTokens->threshold);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxContactReportSchema::BuildRetained(
        const HdFloatDataSourceHandle &threshold
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (threshold) {
        _names[_count] = FabricPhysxContactReportSchemaTokens->threshold;
        _values[_count++] = threshold;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxContactReportSchema::Builder &
FabricPhysxContactReportSchema::Builder::SetThreshold(
    const HdFloatDataSourceHandle &threshold)
{
    _threshold = threshold;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxContactReportSchema::Builder::Build()
{
    return FabricPhysxContactReportSchema::BuildRetained(
        _threshold
    );
}

/*static*/
FabricPhysxContactReportSchema
FabricPhysxContactReportSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxContactReportSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxContactReportSchemaTokens->physxContactReport))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxContactReportSchema::GetSchemaToken()
{
    return FabricPhysxContactReportSchemaTokens->physxContactReport;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxContactReportSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxContactReportSchema::GetThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxContactReportSchemaTokens->threshold);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE