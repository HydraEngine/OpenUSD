//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleWheelSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleWheelSchemaTokens,
    FABRIC_PHYSX_VEHICLE_WHEEL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxVehicleWheelSchema::GetDampingRate() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelSchemaTokens->dampingRate);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelSchema::GetMass() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelSchemaTokens->mass);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelSchema::GetMoi() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelSchemaTokens->moi);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelSchema::GetRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelSchemaTokens->radius);
}

HdFloatDataSourceHandle
FabricPhysxVehicleWheelSchema::GetWidth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxVehicleWheelSchemaTokens->width);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleWheelSchema::BuildRetained(
        const HdFloatDataSourceHandle &dampingRate,
        const HdFloatDataSourceHandle &mass,
        const HdFloatDataSourceHandle &moi,
        const HdFloatDataSourceHandle &radius,
        const HdFloatDataSourceHandle &width
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (dampingRate) {
        _names[_count] = FabricPhysxVehicleWheelSchemaTokens->dampingRate;
        _values[_count++] = dampingRate;
    }

    if (mass) {
        _names[_count] = FabricPhysxVehicleWheelSchemaTokens->mass;
        _values[_count++] = mass;
    }

    if (moi) {
        _names[_count] = FabricPhysxVehicleWheelSchemaTokens->moi;
        _values[_count++] = moi;
    }

    if (radius) {
        _names[_count] = FabricPhysxVehicleWheelSchemaTokens->radius;
        _values[_count++] = radius;
    }

    if (width) {
        _names[_count] = FabricPhysxVehicleWheelSchemaTokens->width;
        _values[_count++] = width;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleWheelSchema::Builder &
FabricPhysxVehicleWheelSchema::Builder::SetDampingRate(
    const HdFloatDataSourceHandle &dampingRate)
{
    _dampingRate = dampingRate;
    return *this;
}

FabricPhysxVehicleWheelSchema::Builder &
FabricPhysxVehicleWheelSchema::Builder::SetMass(
    const HdFloatDataSourceHandle &mass)
{
    _mass = mass;
    return *this;
}

FabricPhysxVehicleWheelSchema::Builder &
FabricPhysxVehicleWheelSchema::Builder::SetMoi(
    const HdFloatDataSourceHandle &moi)
{
    _moi = moi;
    return *this;
}

FabricPhysxVehicleWheelSchema::Builder &
FabricPhysxVehicleWheelSchema::Builder::SetRadius(
    const HdFloatDataSourceHandle &radius)
{
    _radius = radius;
    return *this;
}

FabricPhysxVehicleWheelSchema::Builder &
FabricPhysxVehicleWheelSchema::Builder::SetWidth(
    const HdFloatDataSourceHandle &width)
{
    _width = width;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleWheelSchema::Builder::Build()
{
    return FabricPhysxVehicleWheelSchema::BuildRetained(
        _dampingRate,
        _mass,
        _moi,
        _radius,
        _width
    );
}

/*static*/
FabricPhysxVehicleWheelSchema
FabricPhysxVehicleWheelSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleWheelSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleWheelSchemaTokens->physxVehicleWheel))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleWheelSchema::GetSchemaToken()
{
    return FabricPhysxVehicleWheelSchemaTokens->physxVehicleWheel;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetDampingRateLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelSchemaTokens->dampingRate);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelSchemaTokens->mass);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetMoiLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelSchemaTokens->moi);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelSchemaTokens->radius);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleWheelSchema::GetWidthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleWheelSchemaTokens->width);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE