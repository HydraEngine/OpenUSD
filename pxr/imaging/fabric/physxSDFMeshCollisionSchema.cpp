//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxSDFMeshCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxSDFMeshCollisionSchemaTokens,
    FABRIC_PHYSX_SDFMESH_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfBitsPerSubgridPixel() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfBitsPerSubgridPixel);
}

HdBoolDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfEnableRemeshing() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfEnableRemeshing);
}

HdFloatDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfMargin() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfMargin);
}

HdFloatDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfNarrowBandThickness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfNarrowBandThickness);
}

HdIntDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfResolution() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfResolution);
}

HdIntDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfSubgridResolution() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfSubgridResolution);
}

HdFloatDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::GetSdfTriangleCountReductionFactor() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxSDFMeshCollisionSchemaTokens->sdfTriangleCountReductionFactor);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::BuildRetained(
        const HdTokenDataSourceHandle &sdfBitsPerSubgridPixel,
        const HdBoolDataSourceHandle &sdfEnableRemeshing,
        const HdFloatDataSourceHandle &sdfMargin,
        const HdFloatDataSourceHandle &sdfNarrowBandThickness,
        const HdIntDataSourceHandle &sdfResolution,
        const HdIntDataSourceHandle &sdfSubgridResolution,
        const HdFloatDataSourceHandle &sdfTriangleCountReductionFactor
)
{
    TfToken _names[7];
    HdDataSourceBaseHandle _values[7];

    size_t _count = 0;

    if (sdfBitsPerSubgridPixel) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfBitsPerSubgridPixel;
        _values[_count++] = sdfBitsPerSubgridPixel;
    }

    if (sdfEnableRemeshing) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfEnableRemeshing;
        _values[_count++] = sdfEnableRemeshing;
    }

    if (sdfMargin) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfMargin;
        _values[_count++] = sdfMargin;
    }

    if (sdfNarrowBandThickness) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfNarrowBandThickness;
        _values[_count++] = sdfNarrowBandThickness;
    }

    if (sdfResolution) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfResolution;
        _values[_count++] = sdfResolution;
    }

    if (sdfSubgridResolution) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfSubgridResolution;
        _values[_count++] = sdfSubgridResolution;
    }

    if (sdfTriangleCountReductionFactor) {
        _names[_count] = FabricPhysxSDFMeshCollisionSchemaTokens->sdfTriangleCountReductionFactor;
        _values[_count++] = sdfTriangleCountReductionFactor;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfBitsPerSubgridPixel(
    const HdTokenDataSourceHandle &sdfBitsPerSubgridPixel)
{
    _sdfBitsPerSubgridPixel = sdfBitsPerSubgridPixel;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfEnableRemeshing(
    const HdBoolDataSourceHandle &sdfEnableRemeshing)
{
    _sdfEnableRemeshing = sdfEnableRemeshing;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfMargin(
    const HdFloatDataSourceHandle &sdfMargin)
{
    _sdfMargin = sdfMargin;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfNarrowBandThickness(
    const HdFloatDataSourceHandle &sdfNarrowBandThickness)
{
    _sdfNarrowBandThickness = sdfNarrowBandThickness;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfResolution(
    const HdIntDataSourceHandle &sdfResolution)
{
    _sdfResolution = sdfResolution;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfSubgridResolution(
    const HdIntDataSourceHandle &sdfSubgridResolution)
{
    _sdfSubgridResolution = sdfSubgridResolution;
    return *this;
}

FabricPhysxSDFMeshCollisionSchema::Builder &
FabricPhysxSDFMeshCollisionSchema::Builder::SetSdfTriangleCountReductionFactor(
    const HdFloatDataSourceHandle &sdfTriangleCountReductionFactor)
{
    _sdfTriangleCountReductionFactor = sdfTriangleCountReductionFactor;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxSDFMeshCollisionSchema::Builder::Build()
{
    return FabricPhysxSDFMeshCollisionSchema::BuildRetained(
        _sdfBitsPerSubgridPixel,
        _sdfEnableRemeshing,
        _sdfMargin,
        _sdfNarrowBandThickness,
        _sdfResolution,
        _sdfSubgridResolution,
        _sdfTriangleCountReductionFactor
    );
}

/*static*/
FabricPhysxSDFMeshCollisionSchema
FabricPhysxSDFMeshCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxSDFMeshCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxSDFMeshCollisionSchemaTokens->physxSDFMeshCollision))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxSDFMeshCollisionSchema::GetSchemaToken()
{
    return FabricPhysxSDFMeshCollisionSchemaTokens->physxSDFMeshCollision;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfBitsPerSubgridPixelLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfBitsPerSubgridPixel);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfEnableRemeshingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfEnableRemeshing);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfMarginLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfMargin);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfNarrowBandThicknessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfNarrowBandThickness);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfResolutionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfResolution);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfSubgridResolutionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfSubgridResolution);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxSDFMeshCollisionSchema::GetSdfTriangleCountReductionFactorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxSDFMeshCollisionSchemaTokens->sdfTriangleCountReductionFactor);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE