//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxVehicleDriveStandardSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxVehicleDriveStandardSchemaTokens,
    FABRIC_PHYSX_VEHICLE_DRIVE_STANDARD_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdPathArrayDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::GetGears() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxVehicleDriveStandardSchemaTokens->gears);
}

HdPathArrayDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::GetEngine() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxVehicleDriveStandardSchemaTokens->engine);
}

HdPathArrayDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::GetAutoGearBox() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxVehicleDriveStandardSchemaTokens->autoGearBox);
}

HdPathArrayDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::GetClutch() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxVehicleDriveStandardSchemaTokens->clutch);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::BuildRetained(
        const HdPathArrayDataSourceHandle &gears,
        const HdPathArrayDataSourceHandle &engine,
        const HdPathArrayDataSourceHandle &autoGearBox,
        const HdPathArrayDataSourceHandle &clutch
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (gears) {
        _names[_count] = FabricPhysxVehicleDriveStandardSchemaTokens->gears;
        _values[_count++] = gears;
    }

    if (engine) {
        _names[_count] = FabricPhysxVehicleDriveStandardSchemaTokens->engine;
        _values[_count++] = engine;
    }

    if (autoGearBox) {
        _names[_count] = FabricPhysxVehicleDriveStandardSchemaTokens->autoGearBox;
        _values[_count++] = autoGearBox;
    }

    if (clutch) {
        _names[_count] = FabricPhysxVehicleDriveStandardSchemaTokens->clutch;
        _values[_count++] = clutch;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxVehicleDriveStandardSchema::Builder &
FabricPhysxVehicleDriveStandardSchema::Builder::SetGears(
    const HdPathArrayDataSourceHandle &gears)
{
    _gears = gears;
    return *this;
}

FabricPhysxVehicleDriveStandardSchema::Builder &
FabricPhysxVehicleDriveStandardSchema::Builder::SetEngine(
    const HdPathArrayDataSourceHandle &engine)
{
    _engine = engine;
    return *this;
}

FabricPhysxVehicleDriveStandardSchema::Builder &
FabricPhysxVehicleDriveStandardSchema::Builder::SetAutoGearBox(
    const HdPathArrayDataSourceHandle &autoGearBox)
{
    _autoGearBox = autoGearBox;
    return *this;
}

FabricPhysxVehicleDriveStandardSchema::Builder &
FabricPhysxVehicleDriveStandardSchema::Builder::SetClutch(
    const HdPathArrayDataSourceHandle &clutch)
{
    _clutch = clutch;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxVehicleDriveStandardSchema::Builder::Build()
{
    return FabricPhysxVehicleDriveStandardSchema::BuildRetained(
        _gears,
        _engine,
        _autoGearBox,
        _clutch
    );
}

/*static*/
FabricPhysxVehicleDriveStandardSchema
FabricPhysxVehicleDriveStandardSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxVehicleDriveStandardSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxVehicleDriveStandardSchemaTokens->physxVehicleDriveStandard))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxVehicleDriveStandardSchema::GetSchemaToken()
{
    return FabricPhysxVehicleDriveStandardSchemaTokens->physxVehicleDriveStandard;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxVehicleDriveStandardSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleDriveStandardSchema::GetGearsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleDriveStandardSchemaTokens->gears);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleDriveStandardSchema::GetEngineLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleDriveStandardSchemaTokens->engine);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleDriveStandardSchema::GetAutoGearBoxLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleDriveStandardSchemaTokens->autoGearBox);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxVehicleDriveStandardSchema::GetClutchLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxVehicleDriveStandardSchemaTokens->clutch);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE