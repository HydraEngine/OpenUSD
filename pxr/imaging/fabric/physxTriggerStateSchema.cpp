//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxTriggerStateSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxTriggerStateSchemaTokens,
    FABRIC_PHYSX_TRIGGER_STATE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdPathArrayDataSourceHandle
FabricPhysxTriggerStateSchema::GetTriggeredCollisions() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxTriggerStateSchemaTokens->triggeredCollisions);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxTriggerStateSchema::BuildRetained(
        const HdPathArrayDataSourceHandle &triggeredCollisions
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (triggeredCollisions) {
        _names[_count] = FabricPhysxTriggerStateSchemaTokens->triggeredCollisions;
        _values[_count++] = triggeredCollisions;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxTriggerStateSchema::Builder &
FabricPhysxTriggerStateSchema::Builder::SetTriggeredCollisions(
    const HdPathArrayDataSourceHandle &triggeredCollisions)
{
    _triggeredCollisions = triggeredCollisions;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxTriggerStateSchema::Builder::Build()
{
    return FabricPhysxTriggerStateSchema::BuildRetained(
        _triggeredCollisions
    );
}

/*static*/
FabricPhysxTriggerStateSchema
FabricPhysxTriggerStateSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxTriggerStateSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxTriggerStateSchemaTokens->physxTriggerState))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxTriggerStateSchema::GetSchemaToken()
{
    return FabricPhysxTriggerStateSchemaTokens->physxTriggerState;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxTriggerStateSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxTriggerStateSchema::GetTriggeredCollisionsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxTriggerStateSchemaTokens->triggeredCollisions);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE