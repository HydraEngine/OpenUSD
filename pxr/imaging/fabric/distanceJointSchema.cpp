//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/distanceJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricDistanceJointSchemaTokens,
    FABRIC_DISTANCE_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricDistanceJointSchema::GetMinDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricDistanceJointSchemaTokens->minDistance);
}

HdFloatDataSourceHandle
FabricDistanceJointSchema::GetMaxDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricDistanceJointSchemaTokens->maxDistance);
}

/*static*/
HdContainerDataSourceHandle
FabricDistanceJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &minDistance,
        const HdFloatDataSourceHandle &maxDistance
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (minDistance) {
        _names[_count] = FabricDistanceJointSchemaTokens->minDistance;
        _values[_count++] = minDistance;
    }

    if (maxDistance) {
        _names[_count] = FabricDistanceJointSchemaTokens->maxDistance;
        _values[_count++] = maxDistance;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricDistanceJointSchema::Builder &
FabricDistanceJointSchema::Builder::SetMinDistance(
    const HdFloatDataSourceHandle &minDistance)
{
    _minDistance = minDistance;
    return *this;
}

FabricDistanceJointSchema::Builder &
FabricDistanceJointSchema::Builder::SetMaxDistance(
    const HdFloatDataSourceHandle &maxDistance)
{
    _maxDistance = maxDistance;
    return *this;
}

HdContainerDataSourceHandle
FabricDistanceJointSchema::Builder::Build()
{
    return FabricDistanceJointSchema::BuildRetained(
        _minDistance,
        _maxDistance
    );
}

/*static*/
FabricDistanceJointSchema
FabricDistanceJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricDistanceJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricDistanceJointSchemaTokens->distanceJoint))
        : nullptr);
}

/*static*/
const TfToken &
FabricDistanceJointSchema::GetSchemaToken()
{
    return FabricDistanceJointSchemaTokens->distanceJoint;
}

/*static*/
const HdDataSourceLocator &
FabricDistanceJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricDistanceJointSchema::GetMinDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricDistanceJointSchemaTokens->minDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricDistanceJointSchema::GetMaxDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricDistanceJointSchemaTokens->maxDistance);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE