//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_IMAGING_FABRIC_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_H
#define PXR_IMAGING_FABRIC_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_H

/// \file

#include "pxr/imaging/fabric/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define FABRIC_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_TOKENS \
    (physxVehicleWheelController) \
    (brakeTorque) \
    (driveTorque) \
    (steerAngle) \

TF_DECLARE_PUBLIC_TOKENS(FabricPhysxVehicleWheelControllerSchemaTokens, FABRIC_API,
    FABRIC_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class FabricPhysxVehicleWheelControllerSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    FabricPhysxVehicleWheelControllerSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "physxVehicleWheelController" from the parent container and constructs a
    /// FabricPhysxVehicleWheelControllerSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    FABRIC_API
    static FabricPhysxVehicleWheelControllerSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    FABRIC_API
    HdFloatDataSourceHandle GetBrakeTorque() const;

    FABRIC_API
    HdFloatDataSourceHandle GetDriveTorque() const;

    FABRIC_API
    HdFloatDataSourceHandle GetSteerAngle() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    FABRIC_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    FABRIC_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate brakeTorque.
    FABRIC_API
    static const HdDataSourceLocator &GetBrakeTorqueLocator();

    /// Prim-level relative data source locator to locate driveTorque.
    FABRIC_API
    static const HdDataSourceLocator &GetDriveTorqueLocator();

    /// Prim-level relative data source locator to locate steerAngle.
    FABRIC_API
    static const HdDataSourceLocator &GetSteerAngleLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    FABRIC_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdFloatDataSourceHandle &brakeTorque,
        const HdFloatDataSourceHandle &driveTorque,
        const HdFloatDataSourceHandle &steerAngle
    );

    /// \class FabricPhysxVehicleWheelControllerSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        FABRIC_API
        Builder &SetBrakeTorque(
            const HdFloatDataSourceHandle &brakeTorque);
        FABRIC_API
        Builder &SetDriveTorque(
            const HdFloatDataSourceHandle &driveTorque);
        FABRIC_API
        Builder &SetSteerAngle(
            const HdFloatDataSourceHandle &steerAngle);

        /// Returns a container data source containing the members set thus far.
        FABRIC_API
        HdContainerDataSourceHandle Build();

    private:
        HdFloatDataSourceHandle _brakeTorque;
        HdFloatDataSourceHandle _driveTorque;
        HdFloatDataSourceHandle _steerAngle;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif