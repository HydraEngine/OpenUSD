//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/rigidBodySchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricRigidBodySchemaTokens,
    FABRIC_RIGID_BODY_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
FabricRigidBodySchema::GetRigidBodyEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricRigidBodySchemaTokens->rigidBodyEnabled);
}

HdBoolDataSourceHandle
FabricRigidBodySchema::GetKinematicEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricRigidBodySchemaTokens->kinematicEnabled);
}

HdBoolDataSourceHandle
FabricRigidBodySchema::GetStartsAsleep() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricRigidBodySchemaTokens->startsAsleep);
}

HdVec3fDataSourceHandle
FabricRigidBodySchema::GetVelocity() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        FabricRigidBodySchemaTokens->velocity);
}

HdVec3fDataSourceHandle
FabricRigidBodySchema::GetAngularVelocity() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        FabricRigidBodySchemaTokens->angularVelocity);
}

HdPathArrayDataSourceHandle
FabricRigidBodySchema::GetSimulationOwner() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricRigidBodySchemaTokens->simulationOwner);
}

/*static*/
HdContainerDataSourceHandle
FabricRigidBodySchema::BuildRetained(
        const HdBoolDataSourceHandle &rigidBodyEnabled,
        const HdBoolDataSourceHandle &kinematicEnabled,
        const HdBoolDataSourceHandle &startsAsleep,
        const HdVec3fDataSourceHandle &velocity,
        const HdVec3fDataSourceHandle &angularVelocity,
        const HdPathArrayDataSourceHandle &simulationOwner
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (rigidBodyEnabled) {
        _names[_count] = FabricRigidBodySchemaTokens->rigidBodyEnabled;
        _values[_count++] = rigidBodyEnabled;
    }

    if (kinematicEnabled) {
        _names[_count] = FabricRigidBodySchemaTokens->kinematicEnabled;
        _values[_count++] = kinematicEnabled;
    }

    if (startsAsleep) {
        _names[_count] = FabricRigidBodySchemaTokens->startsAsleep;
        _values[_count++] = startsAsleep;
    }

    if (velocity) {
        _names[_count] = FabricRigidBodySchemaTokens->velocity;
        _values[_count++] = velocity;
    }

    if (angularVelocity) {
        _names[_count] = FabricRigidBodySchemaTokens->angularVelocity;
        _values[_count++] = angularVelocity;
    }

    if (simulationOwner) {
        _names[_count] = FabricRigidBodySchemaTokens->simulationOwner;
        _values[_count++] = simulationOwner;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetRigidBodyEnabled(
    const HdBoolDataSourceHandle &rigidBodyEnabled)
{
    _rigidBodyEnabled = rigidBodyEnabled;
    return *this;
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetKinematicEnabled(
    const HdBoolDataSourceHandle &kinematicEnabled)
{
    _kinematicEnabled = kinematicEnabled;
    return *this;
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetStartsAsleep(
    const HdBoolDataSourceHandle &startsAsleep)
{
    _startsAsleep = startsAsleep;
    return *this;
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetVelocity(
    const HdVec3fDataSourceHandle &velocity)
{
    _velocity = velocity;
    return *this;
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetAngularVelocity(
    const HdVec3fDataSourceHandle &angularVelocity)
{
    _angularVelocity = angularVelocity;
    return *this;
}

FabricRigidBodySchema::Builder &
FabricRigidBodySchema::Builder::SetSimulationOwner(
    const HdPathArrayDataSourceHandle &simulationOwner)
{
    _simulationOwner = simulationOwner;
    return *this;
}

HdContainerDataSourceHandle
FabricRigidBodySchema::Builder::Build()
{
    return FabricRigidBodySchema::BuildRetained(
        _rigidBodyEnabled,
        _kinematicEnabled,
        _startsAsleep,
        _velocity,
        _angularVelocity,
        _simulationOwner
    );
}

/*static*/
FabricRigidBodySchema
FabricRigidBodySchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricRigidBodySchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricRigidBodySchemaTokens->rigidBody))
        : nullptr);
}

/*static*/
const TfToken &
FabricRigidBodySchema::GetSchemaToken()
{
    return FabricRigidBodySchemaTokens->rigidBody;
}

/*static*/
const HdDataSourceLocator &
FabricRigidBodySchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetRigidBodyEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->rigidBodyEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetKinematicEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->kinematicEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetStartsAsleepLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->startsAsleep);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->velocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetAngularVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->angularVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricRigidBodySchema::GetSimulationOwnerLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricRigidBodySchemaTokens->simulationOwner);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE