//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxRigidBodySchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxRigidBodySchemaTokens,
    FABRIC_PHYSX_RIGID_BODY_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetAngularDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->angularDamping);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetCfmScale() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->cfmScale);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetContactSlopCoefficient() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->contactSlopCoefficient);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetDisableGravity() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->disableGravity);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetEnableCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->enableCCD);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetEnableGyroscopicForces() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->enableGyroscopicForces);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetEnableSpeculativeCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->enableSpeculativeCCD);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetLinearDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->linearDamping);
}

HdIntDataSourceHandle
FabricPhysxRigidBodySchema::GetLockedPosAxis() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxRigidBodySchemaTokens->lockedPosAxis);
}

HdIntDataSourceHandle
FabricPhysxRigidBodySchema::GetLockedRotAxis() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxRigidBodySchemaTokens->lockedRotAxis);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetMaxAngularVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->maxAngularVelocity);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetMaxContactImpulse() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->maxContactImpulse);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetMaxDepenetrationVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->maxDepenetrationVelocity);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetMaxLinearVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->maxLinearVelocity);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetRetainAccelerations() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->retainAccelerations);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetSleepThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->sleepThreshold);
}

HdBoolDataSourceHandle
FabricPhysxRigidBodySchema::GetSolveContact() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxRigidBodySchemaTokens->solveContact);
}

HdIntDataSourceHandle
FabricPhysxRigidBodySchema::GetSolverPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxRigidBodySchemaTokens->solverPositionIterationCount);
}

HdIntDataSourceHandle
FabricPhysxRigidBodySchema::GetSolverVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        FabricPhysxRigidBodySchemaTokens->solverVelocityIterationCount);
}

HdFloatDataSourceHandle
FabricPhysxRigidBodySchema::GetStabilizationThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxRigidBodySchemaTokens->stabilizationThreshold);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxRigidBodySchema::BuildRetained(
        const HdFloatDataSourceHandle &angularDamping,
        const HdFloatDataSourceHandle &cfmScale,
        const HdFloatDataSourceHandle &contactSlopCoefficient,
        const HdBoolDataSourceHandle &disableGravity,
        const HdBoolDataSourceHandle &enableCCD,
        const HdBoolDataSourceHandle &enableGyroscopicForces,
        const HdBoolDataSourceHandle &enableSpeculativeCCD,
        const HdFloatDataSourceHandle &linearDamping,
        const HdIntDataSourceHandle &lockedPosAxis,
        const HdIntDataSourceHandle &lockedRotAxis,
        const HdFloatDataSourceHandle &maxAngularVelocity,
        const HdFloatDataSourceHandle &maxContactImpulse,
        const HdFloatDataSourceHandle &maxDepenetrationVelocity,
        const HdFloatDataSourceHandle &maxLinearVelocity,
        const HdBoolDataSourceHandle &retainAccelerations,
        const HdFloatDataSourceHandle &sleepThreshold,
        const HdBoolDataSourceHandle &solveContact,
        const HdIntDataSourceHandle &solverPositionIterationCount,
        const HdIntDataSourceHandle &solverVelocityIterationCount,
        const HdFloatDataSourceHandle &stabilizationThreshold
)
{
    TfToken _names[20];
    HdDataSourceBaseHandle _values[20];

    size_t _count = 0;

    if (angularDamping) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->angularDamping;
        _values[_count++] = angularDamping;
    }

    if (cfmScale) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->cfmScale;
        _values[_count++] = cfmScale;
    }

    if (contactSlopCoefficient) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->contactSlopCoefficient;
        _values[_count++] = contactSlopCoefficient;
    }

    if (disableGravity) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->disableGravity;
        _values[_count++] = disableGravity;
    }

    if (enableCCD) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->enableCCD;
        _values[_count++] = enableCCD;
    }

    if (enableGyroscopicForces) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->enableGyroscopicForces;
        _values[_count++] = enableGyroscopicForces;
    }

    if (enableSpeculativeCCD) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->enableSpeculativeCCD;
        _values[_count++] = enableSpeculativeCCD;
    }

    if (linearDamping) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->linearDamping;
        _values[_count++] = linearDamping;
    }

    if (lockedPosAxis) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->lockedPosAxis;
        _values[_count++] = lockedPosAxis;
    }

    if (lockedRotAxis) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->lockedRotAxis;
        _values[_count++] = lockedRotAxis;
    }

    if (maxAngularVelocity) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->maxAngularVelocity;
        _values[_count++] = maxAngularVelocity;
    }

    if (maxContactImpulse) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->maxContactImpulse;
        _values[_count++] = maxContactImpulse;
    }

    if (maxDepenetrationVelocity) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->maxDepenetrationVelocity;
        _values[_count++] = maxDepenetrationVelocity;
    }

    if (maxLinearVelocity) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->maxLinearVelocity;
        _values[_count++] = maxLinearVelocity;
    }

    if (retainAccelerations) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->retainAccelerations;
        _values[_count++] = retainAccelerations;
    }

    if (sleepThreshold) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->sleepThreshold;
        _values[_count++] = sleepThreshold;
    }

    if (solveContact) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->solveContact;
        _values[_count++] = solveContact;
    }

    if (solverPositionIterationCount) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->solverPositionIterationCount;
        _values[_count++] = solverPositionIterationCount;
    }

    if (solverVelocityIterationCount) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->solverVelocityIterationCount;
        _values[_count++] = solverVelocityIterationCount;
    }

    if (stabilizationThreshold) {
        _names[_count] = FabricPhysxRigidBodySchemaTokens->stabilizationThreshold;
        _values[_count++] = stabilizationThreshold;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetAngularDamping(
    const HdFloatDataSourceHandle &angularDamping)
{
    _angularDamping = angularDamping;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetCfmScale(
    const HdFloatDataSourceHandle &cfmScale)
{
    _cfmScale = cfmScale;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetContactSlopCoefficient(
    const HdFloatDataSourceHandle &contactSlopCoefficient)
{
    _contactSlopCoefficient = contactSlopCoefficient;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetDisableGravity(
    const HdBoolDataSourceHandle &disableGravity)
{
    _disableGravity = disableGravity;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetEnableCCD(
    const HdBoolDataSourceHandle &enableCCD)
{
    _enableCCD = enableCCD;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetEnableGyroscopicForces(
    const HdBoolDataSourceHandle &enableGyroscopicForces)
{
    _enableGyroscopicForces = enableGyroscopicForces;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetEnableSpeculativeCCD(
    const HdBoolDataSourceHandle &enableSpeculativeCCD)
{
    _enableSpeculativeCCD = enableSpeculativeCCD;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetLinearDamping(
    const HdFloatDataSourceHandle &linearDamping)
{
    _linearDamping = linearDamping;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetLockedPosAxis(
    const HdIntDataSourceHandle &lockedPosAxis)
{
    _lockedPosAxis = lockedPosAxis;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetLockedRotAxis(
    const HdIntDataSourceHandle &lockedRotAxis)
{
    _lockedRotAxis = lockedRotAxis;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetMaxAngularVelocity(
    const HdFloatDataSourceHandle &maxAngularVelocity)
{
    _maxAngularVelocity = maxAngularVelocity;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetMaxContactImpulse(
    const HdFloatDataSourceHandle &maxContactImpulse)
{
    _maxContactImpulse = maxContactImpulse;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetMaxDepenetrationVelocity(
    const HdFloatDataSourceHandle &maxDepenetrationVelocity)
{
    _maxDepenetrationVelocity = maxDepenetrationVelocity;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetMaxLinearVelocity(
    const HdFloatDataSourceHandle &maxLinearVelocity)
{
    _maxLinearVelocity = maxLinearVelocity;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetRetainAccelerations(
    const HdBoolDataSourceHandle &retainAccelerations)
{
    _retainAccelerations = retainAccelerations;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetSleepThreshold(
    const HdFloatDataSourceHandle &sleepThreshold)
{
    _sleepThreshold = sleepThreshold;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetSolveContact(
    const HdBoolDataSourceHandle &solveContact)
{
    _solveContact = solveContact;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetSolverPositionIterationCount(
    const HdIntDataSourceHandle &solverPositionIterationCount)
{
    _solverPositionIterationCount = solverPositionIterationCount;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetSolverVelocityIterationCount(
    const HdIntDataSourceHandle &solverVelocityIterationCount)
{
    _solverVelocityIterationCount = solverVelocityIterationCount;
    return *this;
}

FabricPhysxRigidBodySchema::Builder &
FabricPhysxRigidBodySchema::Builder::SetStabilizationThreshold(
    const HdFloatDataSourceHandle &stabilizationThreshold)
{
    _stabilizationThreshold = stabilizationThreshold;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxRigidBodySchema::Builder::Build()
{
    return FabricPhysxRigidBodySchema::BuildRetained(
        _angularDamping,
        _cfmScale,
        _contactSlopCoefficient,
        _disableGravity,
        _enableCCD,
        _enableGyroscopicForces,
        _enableSpeculativeCCD,
        _linearDamping,
        _lockedPosAxis,
        _lockedRotAxis,
        _maxAngularVelocity,
        _maxContactImpulse,
        _maxDepenetrationVelocity,
        _maxLinearVelocity,
        _retainAccelerations,
        _sleepThreshold,
        _solveContact,
        _solverPositionIterationCount,
        _solverVelocityIterationCount,
        _stabilizationThreshold
    );
}

/*static*/
FabricPhysxRigidBodySchema
FabricPhysxRigidBodySchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxRigidBodySchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxRigidBodySchemaTokens->physxRigidBody))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxRigidBodySchema::GetSchemaToken()
{
    return FabricPhysxRigidBodySchemaTokens->physxRigidBody;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetAngularDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->angularDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetCfmScaleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->cfmScale);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetContactSlopCoefficientLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->contactSlopCoefficient);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetDisableGravityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->disableGravity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetEnableCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->enableCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetEnableGyroscopicForcesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->enableGyroscopicForces);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetEnableSpeculativeCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->enableSpeculativeCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetLinearDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->linearDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetLockedPosAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->lockedPosAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetLockedRotAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->lockedRotAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetMaxAngularVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->maxAngularVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetMaxContactImpulseLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->maxContactImpulse);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetMaxDepenetrationVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->maxDepenetrationVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetMaxLinearVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->maxLinearVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetRetainAccelerationsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->retainAccelerations);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetSleepThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->sleepThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetSolveContactLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->solveContact);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetSolverPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->solverPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetSolverVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->solverVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxRigidBodySchema::GetStabilizationThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxRigidBodySchemaTokens->stabilizationThreshold);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE