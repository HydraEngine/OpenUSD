//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxJointSchemaTokens,
    FABRIC_PHYSX_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxJointSchema::GetArmature() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxJointSchemaTokens->armature);
}

HdBoolDataSourceHandle
FabricPhysxJointSchema::GetEnableProjection() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        FabricPhysxJointSchemaTokens->enableProjection);
}

HdFloatDataSourceHandle
FabricPhysxJointSchema::GetJointFriction() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxJointSchemaTokens->jointFriction);
}

HdFloatDataSourceHandle
FabricPhysxJointSchema::GetMaxJointVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxJointSchemaTokens->maxJointVelocity);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &armature,
        const HdBoolDataSourceHandle &enableProjection,
        const HdFloatDataSourceHandle &jointFriction,
        const HdFloatDataSourceHandle &maxJointVelocity
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (armature) {
        _names[_count] = FabricPhysxJointSchemaTokens->armature;
        _values[_count++] = armature;
    }

    if (enableProjection) {
        _names[_count] = FabricPhysxJointSchemaTokens->enableProjection;
        _values[_count++] = enableProjection;
    }

    if (jointFriction) {
        _names[_count] = FabricPhysxJointSchemaTokens->jointFriction;
        _values[_count++] = jointFriction;
    }

    if (maxJointVelocity) {
        _names[_count] = FabricPhysxJointSchemaTokens->maxJointVelocity;
        _values[_count++] = maxJointVelocity;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxJointSchema::Builder &
FabricPhysxJointSchema::Builder::SetArmature(
    const HdFloatDataSourceHandle &armature)
{
    _armature = armature;
    return *this;
}

FabricPhysxJointSchema::Builder &
FabricPhysxJointSchema::Builder::SetEnableProjection(
    const HdBoolDataSourceHandle &enableProjection)
{
    _enableProjection = enableProjection;
    return *this;
}

FabricPhysxJointSchema::Builder &
FabricPhysxJointSchema::Builder::SetJointFriction(
    const HdFloatDataSourceHandle &jointFriction)
{
    _jointFriction = jointFriction;
    return *this;
}

FabricPhysxJointSchema::Builder &
FabricPhysxJointSchema::Builder::SetMaxJointVelocity(
    const HdFloatDataSourceHandle &maxJointVelocity)
{
    _maxJointVelocity = maxJointVelocity;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxJointSchema::Builder::Build()
{
    return FabricPhysxJointSchema::BuildRetained(
        _armature,
        _enableProjection,
        _jointFriction,
        _maxJointVelocity
    );
}

/*static*/
FabricPhysxJointSchema
FabricPhysxJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxJointSchemaTokens->physxJoint))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxJointSchema::GetSchemaToken()
{
    return FabricPhysxJointSchemaTokens->physxJoint;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointSchema::GetArmatureLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointSchemaTokens->armature);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointSchema::GetEnableProjectionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointSchemaTokens->enableProjection);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointSchema::GetJointFrictionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointSchemaTokens->jointFriction);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointSchema::GetMaxJointVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointSchemaTokens->maxJointVelocity);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE