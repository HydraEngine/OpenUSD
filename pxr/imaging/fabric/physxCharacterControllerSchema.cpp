//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxCharacterControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxCharacterControllerSchemaTokens,
    FABRIC_PHYSX_CHARACTER_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
FabricPhysxCharacterControllerSchema::GetClimbingMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->climbingMode);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetContactOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->contactOffset);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetInvisibleWallHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetMaxJumpHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->maxJumpHeight);
}

HdVec3fDataSourceHandle
FabricPhysxCharacterControllerSchema::GetMoveTarget() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->moveTarget);
}

HdTokenDataSourceHandle
FabricPhysxCharacterControllerSchema::GetNonWalkableMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->nonWalkableMode);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetScaleCoeff() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->scaleCoeff);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetSlopeLimit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->slopeLimit);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetStepOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->stepOffset);
}

HdTokenDataSourceHandle
FabricPhysxCharacterControllerSchema::GetUpAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->upAxis);
}

HdFloatDataSourceHandle
FabricPhysxCharacterControllerSchema::GetVolumeGrowth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCharacterControllerSchemaTokens->volumeGrowth);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxCharacterControllerSchema::BuildRetained(
        const HdTokenDataSourceHandle &climbingMode,
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &invisibleWallHeight,
        const HdFloatDataSourceHandle &maxJumpHeight,
        const HdVec3fDataSourceHandle &moveTarget,
        const HdTokenDataSourceHandle &nonWalkableMode,
        const HdFloatDataSourceHandle &scaleCoeff,
        const HdFloatDataSourceHandle &slopeLimit,
        const HdFloatDataSourceHandle &stepOffset,
        const HdTokenDataSourceHandle &upAxis,
        const HdFloatDataSourceHandle &volumeGrowth
)
{
    TfToken _names[11];
    HdDataSourceBaseHandle _values[11];

    size_t _count = 0;

    if (climbingMode) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->climbingMode;
        _values[_count++] = climbingMode;
    }

    if (contactOffset) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->contactOffset;
        _values[_count++] = contactOffset;
    }

    if (invisibleWallHeight) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->invisibleWallHeight;
        _values[_count++] = invisibleWallHeight;
    }

    if (maxJumpHeight) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->maxJumpHeight;
        _values[_count++] = maxJumpHeight;
    }

    if (moveTarget) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->moveTarget;
        _values[_count++] = moveTarget;
    }

    if (nonWalkableMode) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->nonWalkableMode;
        _values[_count++] = nonWalkableMode;
    }

    if (scaleCoeff) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->scaleCoeff;
        _values[_count++] = scaleCoeff;
    }

    if (slopeLimit) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->slopeLimit;
        _values[_count++] = slopeLimit;
    }

    if (stepOffset) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->stepOffset;
        _values[_count++] = stepOffset;
    }

    if (upAxis) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->upAxis;
        _values[_count++] = upAxis;
    }

    if (volumeGrowth) {
        _names[_count] = FabricPhysxCharacterControllerSchemaTokens->volumeGrowth;
        _values[_count++] = volumeGrowth;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetClimbingMode(
    const HdTokenDataSourceHandle &climbingMode)
{
    _climbingMode = climbingMode;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetContactOffset(
    const HdFloatDataSourceHandle &contactOffset)
{
    _contactOffset = contactOffset;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetInvisibleWallHeight(
    const HdFloatDataSourceHandle &invisibleWallHeight)
{
    _invisibleWallHeight = invisibleWallHeight;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetMaxJumpHeight(
    const HdFloatDataSourceHandle &maxJumpHeight)
{
    _maxJumpHeight = maxJumpHeight;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetMoveTarget(
    const HdVec3fDataSourceHandle &moveTarget)
{
    _moveTarget = moveTarget;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetNonWalkableMode(
    const HdTokenDataSourceHandle &nonWalkableMode)
{
    _nonWalkableMode = nonWalkableMode;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetScaleCoeff(
    const HdFloatDataSourceHandle &scaleCoeff)
{
    _scaleCoeff = scaleCoeff;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetSlopeLimit(
    const HdFloatDataSourceHandle &slopeLimit)
{
    _slopeLimit = slopeLimit;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetStepOffset(
    const HdFloatDataSourceHandle &stepOffset)
{
    _stepOffset = stepOffset;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetUpAxis(
    const HdTokenDataSourceHandle &upAxis)
{
    _upAxis = upAxis;
    return *this;
}

FabricPhysxCharacterControllerSchema::Builder &
FabricPhysxCharacterControllerSchema::Builder::SetVolumeGrowth(
    const HdFloatDataSourceHandle &volumeGrowth)
{
    _volumeGrowth = volumeGrowth;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxCharacterControllerSchema::Builder::Build()
{
    return FabricPhysxCharacterControllerSchema::BuildRetained(
        _climbingMode,
        _contactOffset,
        _invisibleWallHeight,
        _maxJumpHeight,
        _moveTarget,
        _nonWalkableMode,
        _scaleCoeff,
        _slopeLimit,
        _stepOffset,
        _upAxis,
        _volumeGrowth
    );
}

/*static*/
FabricPhysxCharacterControllerSchema
FabricPhysxCharacterControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxCharacterControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxCharacterControllerSchemaTokens->physxCharacterController))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxCharacterControllerSchema::GetSchemaToken()
{
    return FabricPhysxCharacterControllerSchemaTokens->physxCharacterController;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetClimbingModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->climbingMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetContactOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->contactOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetInvisibleWallHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetMaxJumpHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->maxJumpHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetMoveTargetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->moveTarget);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetNonWalkableModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->nonWalkableMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetScaleCoeffLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->scaleCoeff);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetSlopeLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->slopeLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetStepOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->stepOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetUpAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->upAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCharacterControllerSchema::GetVolumeGrowthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCharacterControllerSchemaTokens->volumeGrowth);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE