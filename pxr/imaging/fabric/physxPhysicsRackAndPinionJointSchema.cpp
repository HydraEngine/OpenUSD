//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxPhysicsRackAndPinionJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxPhysicsRackAndPinionJointSchemaTokens,
    FABRIC_PHYSX_PHYSICS_RACK_AND_PINION_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxPhysicsRackAndPinionJointSchema::GetRatio() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxPhysicsRackAndPinionJointSchemaTokens->ratio);
}

HdPathArrayDataSourceHandle
FabricPhysxPhysicsRackAndPinionJointSchema::GetHinge() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxPhysicsRackAndPinionJointSchemaTokens->hinge);
}

HdPathArrayDataSourceHandle
FabricPhysxPhysicsRackAndPinionJointSchema::GetPrismatic() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        FabricPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxPhysicsRackAndPinionJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &ratio,
        const HdPathArrayDataSourceHandle &hinge,
        const HdPathArrayDataSourceHandle &prismatic
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (ratio) {
        _names[_count] = FabricPhysxPhysicsRackAndPinionJointSchemaTokens->ratio;
        _values[_count++] = ratio;
    }

    if (hinge) {
        _names[_count] = FabricPhysxPhysicsRackAndPinionJointSchemaTokens->hinge;
        _values[_count++] = hinge;
    }

    if (prismatic) {
        _names[_count] = FabricPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic;
        _values[_count++] = prismatic;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxPhysicsRackAndPinionJointSchema::Builder &
FabricPhysxPhysicsRackAndPinionJointSchema::Builder::SetRatio(
    const HdFloatDataSourceHandle &ratio)
{
    _ratio = ratio;
    return *this;
}

FabricPhysxPhysicsRackAndPinionJointSchema::Builder &
FabricPhysxPhysicsRackAndPinionJointSchema::Builder::SetHinge(
    const HdPathArrayDataSourceHandle &hinge)
{
    _hinge = hinge;
    return *this;
}

FabricPhysxPhysicsRackAndPinionJointSchema::Builder &
FabricPhysxPhysicsRackAndPinionJointSchema::Builder::SetPrismatic(
    const HdPathArrayDataSourceHandle &prismatic)
{
    _prismatic = prismatic;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxPhysicsRackAndPinionJointSchema::Builder::Build()
{
    return FabricPhysxPhysicsRackAndPinionJointSchema::BuildRetained(
        _ratio,
        _hinge,
        _prismatic
    );
}

/*static*/
FabricPhysxPhysicsRackAndPinionJointSchema
FabricPhysxPhysicsRackAndPinionJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxPhysicsRackAndPinionJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxPhysicsRackAndPinionJointSchemaTokens->physxPhysicsRackAndPinionJoint))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxPhysicsRackAndPinionJointSchema::GetSchemaToken()
{
    return FabricPhysxPhysicsRackAndPinionJointSchemaTokens->physxPhysicsRackAndPinionJoint;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxPhysicsRackAndPinionJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsRackAndPinionJointSchema::GetRatioLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsRackAndPinionJointSchemaTokens->ratio);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsRackAndPinionJointSchema::GetHingeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsRackAndPinionJointSchemaTokens->hinge);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxPhysicsRackAndPinionJointSchema::GetPrismaticLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE