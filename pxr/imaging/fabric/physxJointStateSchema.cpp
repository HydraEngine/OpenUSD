//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxJointStateSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxJointStateSchemaTokens,
    FABRIC_PHYSX_JOINT_STATE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxJointStateSchema::GetPosition() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxJointStateSchemaTokens->position);
}

HdFloatDataSourceHandle
FabricPhysxJointStateSchema::GetVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxJointStateSchemaTokens->velocity);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxJointStateSchema::BuildRetained(
        const HdFloatDataSourceHandle &position,
        const HdFloatDataSourceHandle &velocity
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (position) {
        _names[_count] = FabricPhysxJointStateSchemaTokens->position;
        _values[_count++] = position;
    }

    if (velocity) {
        _names[_count] = FabricPhysxJointStateSchemaTokens->velocity;
        _values[_count++] = velocity;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxJointStateSchema::Builder &
FabricPhysxJointStateSchema::Builder::SetPosition(
    const HdFloatDataSourceHandle &position)
{
    _position = position;
    return *this;
}

FabricPhysxJointStateSchema::Builder &
FabricPhysxJointStateSchema::Builder::SetVelocity(
    const HdFloatDataSourceHandle &velocity)
{
    _velocity = velocity;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxJointStateSchema::Builder::Build()
{
    return FabricPhysxJointStateSchema::BuildRetained(
        _position,
        _velocity
    );
}

/*static*/
FabricPhysxJointStateSchema
FabricPhysxJointStateSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxJointStateSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxJointStateSchemaTokens->physxJointState))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxJointStateSchema::GetSchemaToken()
{
    return FabricPhysxJointStateSchemaTokens->physxJointState;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxJointStateSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointStateSchema::GetPositionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointStateSchemaTokens->position);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxJointStateSchema::GetVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxJointStateSchemaTokens->velocity);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE