//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/fabric/physxCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(FabricPhysxCollisionSchemaTokens,
    FABRIC_PHYSX_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
FabricPhysxCollisionSchema::GetContactOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCollisionSchemaTokens->contactOffset);
}

HdFloatDataSourceHandle
FabricPhysxCollisionSchema::GetMinTorsionalPatchRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCollisionSchemaTokens->minTorsionalPatchRadius);
}

HdFloatDataSourceHandle
FabricPhysxCollisionSchema::GetRestOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCollisionSchemaTokens->restOffset);
}

HdFloatDataSourceHandle
FabricPhysxCollisionSchema::GetTorsionalPatchRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        FabricPhysxCollisionSchemaTokens->torsionalPatchRadius);
}

/*static*/
HdContainerDataSourceHandle
FabricPhysxCollisionSchema::BuildRetained(
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &minTorsionalPatchRadius,
        const HdFloatDataSourceHandle &restOffset,
        const HdFloatDataSourceHandle &torsionalPatchRadius
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (contactOffset) {
        _names[_count] = FabricPhysxCollisionSchemaTokens->contactOffset;
        _values[_count++] = contactOffset;
    }

    if (minTorsionalPatchRadius) {
        _names[_count] = FabricPhysxCollisionSchemaTokens->minTorsionalPatchRadius;
        _values[_count++] = minTorsionalPatchRadius;
    }

    if (restOffset) {
        _names[_count] = FabricPhysxCollisionSchemaTokens->restOffset;
        _values[_count++] = restOffset;
    }

    if (torsionalPatchRadius) {
        _names[_count] = FabricPhysxCollisionSchemaTokens->torsionalPatchRadius;
        _values[_count++] = torsionalPatchRadius;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

FabricPhysxCollisionSchema::Builder &
FabricPhysxCollisionSchema::Builder::SetContactOffset(
    const HdFloatDataSourceHandle &contactOffset)
{
    _contactOffset = contactOffset;
    return *this;
}

FabricPhysxCollisionSchema::Builder &
FabricPhysxCollisionSchema::Builder::SetMinTorsionalPatchRadius(
    const HdFloatDataSourceHandle &minTorsionalPatchRadius)
{
    _minTorsionalPatchRadius = minTorsionalPatchRadius;
    return *this;
}

FabricPhysxCollisionSchema::Builder &
FabricPhysxCollisionSchema::Builder::SetRestOffset(
    const HdFloatDataSourceHandle &restOffset)
{
    _restOffset = restOffset;
    return *this;
}

FabricPhysxCollisionSchema::Builder &
FabricPhysxCollisionSchema::Builder::SetTorsionalPatchRadius(
    const HdFloatDataSourceHandle &torsionalPatchRadius)
{
    _torsionalPatchRadius = torsionalPatchRadius;
    return *this;
}

HdContainerDataSourceHandle
FabricPhysxCollisionSchema::Builder::Build()
{
    return FabricPhysxCollisionSchema::BuildRetained(
        _contactOffset,
        _minTorsionalPatchRadius,
        _restOffset,
        _torsionalPatchRadius
    );
}

/*static*/
FabricPhysxCollisionSchema
FabricPhysxCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return FabricPhysxCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                FabricPhysxCollisionSchemaTokens->physxCollision))
        : nullptr);
}

/*static*/
const TfToken &
FabricPhysxCollisionSchema::GetSchemaToken()
{
    return FabricPhysxCollisionSchemaTokens->physxCollision;
}

/*static*/
const HdDataSourceLocator &
FabricPhysxCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCollisionSchema::GetContactOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCollisionSchemaTokens->contactOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCollisionSchema::GetMinTorsionalPatchRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCollisionSchemaTokens->minTorsionalPatchRadius);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCollisionSchema::GetRestOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCollisionSchemaTokens->restOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
FabricPhysxCollisionSchema::GetTorsionalPatchRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            FabricPhysxCollisionSchemaTokens->torsionalPatchRadius);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE