//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/distanceJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdDistanceJointSchemaTokens,
    HD_DISTANCE_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdDistanceJointSchema::GetMinDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdDistanceJointSchemaTokens->minDistance);
}

HdFloatDataSourceHandle
HdDistanceJointSchema::GetMaxDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdDistanceJointSchemaTokens->maxDistance);
}

/*static*/
HdContainerDataSourceHandle
HdDistanceJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &minDistance,
        const HdFloatDataSourceHandle &maxDistance
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (minDistance) {
        _names[_count] = HdDistanceJointSchemaTokens->minDistance;
        _values[_count++] = minDistance;
    }

    if (maxDistance) {
        _names[_count] = HdDistanceJointSchemaTokens->maxDistance;
        _values[_count++] = maxDistance;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdDistanceJointSchema::Builder &
HdDistanceJointSchema::Builder::SetMinDistance(
    const HdFloatDataSourceHandle &minDistance)
{
    _minDistance = minDistance;
    return *this;
}

HdDistanceJointSchema::Builder &
HdDistanceJointSchema::Builder::SetMaxDistance(
    const HdFloatDataSourceHandle &maxDistance)
{
    _maxDistance = maxDistance;
    return *this;
}

HdContainerDataSourceHandle
HdDistanceJointSchema::Builder::Build()
{
    return HdDistanceJointSchema::BuildRetained(
        _minDistance,
        _maxDistance
    );
}

/*static*/
HdDistanceJointSchema
HdDistanceJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdDistanceJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdDistanceJointSchemaTokens->distanceJoint))
        : nullptr);
}

/*static*/
const TfToken &
HdDistanceJointSchema::GetSchemaToken()
{
    return HdDistanceJointSchemaTokens->distanceJoint;
}

/*static*/
const HdDataSourceLocator &
HdDistanceJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdDistanceJointSchema::GetMinDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdDistanceJointSchemaTokens->minDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdDistanceJointSchema::GetMaxDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdDistanceJointSchemaTokens->maxDistance);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE