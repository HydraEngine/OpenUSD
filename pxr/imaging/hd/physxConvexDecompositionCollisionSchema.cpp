//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxConvexDecompositionCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxConvexDecompositionCollisionSchemaTokens,
    HD_PHYSX_CONVEX_DECOMPOSITION_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetErrorPercentage() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->errorPercentage);
}

HdIntDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetHullVertexLimit() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->hullVertexLimit);
}

HdIntDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetMaxConvexHulls() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->maxConvexHulls);
}

HdFloatDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetMinThickness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->minThickness);
}

HdBoolDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetShrinkWrap() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->shrinkWrap);
}

HdIntDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::GetVoxelResolution() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxConvexDecompositionCollisionSchemaTokens->voxelResolution);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::BuildRetained(
        const HdFloatDataSourceHandle &errorPercentage,
        const HdIntDataSourceHandle &hullVertexLimit,
        const HdIntDataSourceHandle &maxConvexHulls,
        const HdFloatDataSourceHandle &minThickness,
        const HdBoolDataSourceHandle &shrinkWrap,
        const HdIntDataSourceHandle &voxelResolution
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (errorPercentage) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->errorPercentage;
        _values[_count++] = errorPercentage;
    }

    if (hullVertexLimit) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->hullVertexLimit;
        _values[_count++] = hullVertexLimit;
    }

    if (maxConvexHulls) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->maxConvexHulls;
        _values[_count++] = maxConvexHulls;
    }

    if (minThickness) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->minThickness;
        _values[_count++] = minThickness;
    }

    if (shrinkWrap) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->shrinkWrap;
        _values[_count++] = shrinkWrap;
    }

    if (voxelResolution) {
        _names[_count] = HdPhysxConvexDecompositionCollisionSchemaTokens->voxelResolution;
        _values[_count++] = voxelResolution;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetErrorPercentage(
    const HdFloatDataSourceHandle &errorPercentage)
{
    _errorPercentage = errorPercentage;
    return *this;
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetHullVertexLimit(
    const HdIntDataSourceHandle &hullVertexLimit)
{
    _hullVertexLimit = hullVertexLimit;
    return *this;
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetMaxConvexHulls(
    const HdIntDataSourceHandle &maxConvexHulls)
{
    _maxConvexHulls = maxConvexHulls;
    return *this;
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetMinThickness(
    const HdFloatDataSourceHandle &minThickness)
{
    _minThickness = minThickness;
    return *this;
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetShrinkWrap(
    const HdBoolDataSourceHandle &shrinkWrap)
{
    _shrinkWrap = shrinkWrap;
    return *this;
}

HdPhysxConvexDecompositionCollisionSchema::Builder &
HdPhysxConvexDecompositionCollisionSchema::Builder::SetVoxelResolution(
    const HdIntDataSourceHandle &voxelResolution)
{
    _voxelResolution = voxelResolution;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxConvexDecompositionCollisionSchema::Builder::Build()
{
    return HdPhysxConvexDecompositionCollisionSchema::BuildRetained(
        _errorPercentage,
        _hullVertexLimit,
        _maxConvexHulls,
        _minThickness,
        _shrinkWrap,
        _voxelResolution
    );
}

/*static*/
HdPhysxConvexDecompositionCollisionSchema
HdPhysxConvexDecompositionCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxConvexDecompositionCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxConvexDecompositionCollisionSchemaTokens->physxConvexDecompositionCollision))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxConvexDecompositionCollisionSchema::GetSchemaToken()
{
    return HdPhysxConvexDecompositionCollisionSchemaTokens->physxConvexDecompositionCollision;
}

/*static*/
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetErrorPercentageLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->errorPercentage);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetHullVertexLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->hullVertexLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetMaxConvexHullsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->maxConvexHulls);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetMinThicknessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->minThickness);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetShrinkWrapLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->shrinkWrap);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexDecompositionCollisionSchema::GetVoxelResolutionLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexDecompositionCollisionSchemaTokens->voxelResolution);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE