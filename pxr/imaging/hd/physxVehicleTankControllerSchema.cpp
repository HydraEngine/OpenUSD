//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleTankControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleTankControllerSchemaTokens,
    HD_PHYSX_VEHICLE_TANK_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleTankControllerSchema::GetThrust0() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleTankControllerSchemaTokens->thrust0);
}

HdFloatDataSourceHandle
HdPhysxVehicleTankControllerSchema::GetThrust1() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleTankControllerSchemaTokens->thrust1);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleTankControllerSchema::BuildRetained(
        const HdFloatDataSourceHandle &thrust0,
        const HdFloatDataSourceHandle &thrust1
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (thrust0) {
        _names[_count] = HdPhysxVehicleTankControllerSchemaTokens->thrust0;
        _values[_count++] = thrust0;
    }

    if (thrust1) {
        _names[_count] = HdPhysxVehicleTankControllerSchemaTokens->thrust1;
        _values[_count++] = thrust1;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleTankControllerSchema::Builder &
HdPhysxVehicleTankControllerSchema::Builder::SetThrust0(
    const HdFloatDataSourceHandle &thrust0)
{
    _thrust0 = thrust0;
    return *this;
}

HdPhysxVehicleTankControllerSchema::Builder &
HdPhysxVehicleTankControllerSchema::Builder::SetThrust1(
    const HdFloatDataSourceHandle &thrust1)
{
    _thrust1 = thrust1;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleTankControllerSchema::Builder::Build()
{
    return HdPhysxVehicleTankControllerSchema::BuildRetained(
        _thrust0,
        _thrust1
    );
}

/*static*/
HdPhysxVehicleTankControllerSchema
HdPhysxVehicleTankControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleTankControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleTankControllerSchemaTokens->physxVehicleTankController))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleTankControllerSchema::GetSchemaToken()
{
    return HdPhysxVehicleTankControllerSchemaTokens->physxVehicleTankController;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleTankControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleTankControllerSchema::GetThrust0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleTankControllerSchemaTokens->thrust0);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleTankControllerSchema::GetThrust1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleTankControllerSchemaTokens->thrust1);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE