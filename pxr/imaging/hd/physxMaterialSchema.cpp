//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxMaterialSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxMaterialSchemaTokens,
    HD_PHYSX_MATERIAL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
HdPhysxMaterialSchema::GetCompliantContactAccelerationSpring() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxMaterialSchemaTokens->compliantContactAccelerationSpring);
}

HdFloatDataSourceHandle
HdPhysxMaterialSchema::GetCompliantContactDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxMaterialSchemaTokens->compliantContactDamping);
}

HdFloatDataSourceHandle
HdPhysxMaterialSchema::GetCompliantContactStiffness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxMaterialSchemaTokens->compliantContactStiffness);
}

HdTokenDataSourceHandle
HdPhysxMaterialSchema::GetDampingCombineMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxMaterialSchemaTokens->dampingCombineMode);
}

HdTokenDataSourceHandle
HdPhysxMaterialSchema::GetFrictionCombineMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxMaterialSchemaTokens->frictionCombineMode);
}

HdTokenDataSourceHandle
HdPhysxMaterialSchema::GetRestitutionCombineMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxMaterialSchemaTokens->restitutionCombineMode);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxMaterialSchema::BuildRetained(
        const HdBoolDataSourceHandle &compliantContactAccelerationSpring,
        const HdFloatDataSourceHandle &compliantContactDamping,
        const HdFloatDataSourceHandle &compliantContactStiffness,
        const HdTokenDataSourceHandle &dampingCombineMode,
        const HdTokenDataSourceHandle &frictionCombineMode,
        const HdTokenDataSourceHandle &restitutionCombineMode
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (compliantContactAccelerationSpring) {
        _names[_count] = HdPhysxMaterialSchemaTokens->compliantContactAccelerationSpring;
        _values[_count++] = compliantContactAccelerationSpring;
    }

    if (compliantContactDamping) {
        _names[_count] = HdPhysxMaterialSchemaTokens->compliantContactDamping;
        _values[_count++] = compliantContactDamping;
    }

    if (compliantContactStiffness) {
        _names[_count] = HdPhysxMaterialSchemaTokens->compliantContactStiffness;
        _values[_count++] = compliantContactStiffness;
    }

    if (dampingCombineMode) {
        _names[_count] = HdPhysxMaterialSchemaTokens->dampingCombineMode;
        _values[_count++] = dampingCombineMode;
    }

    if (frictionCombineMode) {
        _names[_count] = HdPhysxMaterialSchemaTokens->frictionCombineMode;
        _values[_count++] = frictionCombineMode;
    }

    if (restitutionCombineMode) {
        _names[_count] = HdPhysxMaterialSchemaTokens->restitutionCombineMode;
        _values[_count++] = restitutionCombineMode;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetCompliantContactAccelerationSpring(
    const HdBoolDataSourceHandle &compliantContactAccelerationSpring)
{
    _compliantContactAccelerationSpring = compliantContactAccelerationSpring;
    return *this;
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetCompliantContactDamping(
    const HdFloatDataSourceHandle &compliantContactDamping)
{
    _compliantContactDamping = compliantContactDamping;
    return *this;
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetCompliantContactStiffness(
    const HdFloatDataSourceHandle &compliantContactStiffness)
{
    _compliantContactStiffness = compliantContactStiffness;
    return *this;
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetDampingCombineMode(
    const HdTokenDataSourceHandle &dampingCombineMode)
{
    _dampingCombineMode = dampingCombineMode;
    return *this;
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetFrictionCombineMode(
    const HdTokenDataSourceHandle &frictionCombineMode)
{
    _frictionCombineMode = frictionCombineMode;
    return *this;
}

HdPhysxMaterialSchema::Builder &
HdPhysxMaterialSchema::Builder::SetRestitutionCombineMode(
    const HdTokenDataSourceHandle &restitutionCombineMode)
{
    _restitutionCombineMode = restitutionCombineMode;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxMaterialSchema::Builder::Build()
{
    return HdPhysxMaterialSchema::BuildRetained(
        _compliantContactAccelerationSpring,
        _compliantContactDamping,
        _compliantContactStiffness,
        _dampingCombineMode,
        _frictionCombineMode,
        _restitutionCombineMode
    );
}

/*static*/
HdPhysxMaterialSchema
HdPhysxMaterialSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxMaterialSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxMaterialSchemaTokens->physxMaterial))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxMaterialSchema::GetSchemaToken()
{
    return HdPhysxMaterialSchemaTokens->physxMaterial;
}

/*static*/
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetCompliantContactAccelerationSpringLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->compliantContactAccelerationSpring);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetCompliantContactDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->compliantContactDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetCompliantContactStiffnessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->compliantContactStiffness);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetDampingCombineModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->dampingCombineMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetFrictionCombineModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->frictionCombineMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxMaterialSchema::GetRestitutionCombineModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxMaterialSchemaTokens->restitutionCombineMode);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE