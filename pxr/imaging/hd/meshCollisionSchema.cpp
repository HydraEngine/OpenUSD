//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/meshCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMeshCollisionSchemaTokens,
    HD_MESH_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
HdMeshCollisionSchema::GetApproximation() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdMeshCollisionSchemaTokens->approximation);
}

/*static*/
HdContainerDataSourceHandle
HdMeshCollisionSchema::BuildRetained(
        const HdTokenDataSourceHandle &approximation
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (approximation) {
        _names[_count] = HdMeshCollisionSchemaTokens->approximation;
        _values[_count++] = approximation;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdMeshCollisionSchema::Builder &
HdMeshCollisionSchema::Builder::SetApproximation(
    const HdTokenDataSourceHandle &approximation)
{
    _approximation = approximation;
    return *this;
}

HdContainerDataSourceHandle
HdMeshCollisionSchema::Builder::Build()
{
    return HdMeshCollisionSchema::BuildRetained(
        _approximation
    );
}

/*static*/
HdMeshCollisionSchema
HdMeshCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdMeshCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdMeshCollisionSchemaTokens->meshCollision))
        : nullptr);
}

/*static*/
const TfToken &
HdMeshCollisionSchema::GetSchemaToken()
{
    return HdMeshCollisionSchemaTokens->meshCollision;
}

/*static*/
const HdDataSourceLocator &
HdMeshCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMeshCollisionSchema::GetApproximationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshCollisionSchemaTokens->approximation);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE