//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxArticulationSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxArticulationSchemaTokens,
    HD_PHYSX_ARTICULATION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
HdPhysxArticulationSchema::GetArticulationEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxArticulationSchemaTokens->articulationEnabled);
}

HdBoolDataSourceHandle
HdPhysxArticulationSchema::GetEnabledSelfCollisions() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxArticulationSchemaTokens->enabledSelfCollisions);
}

HdFloatDataSourceHandle
HdPhysxArticulationSchema::GetSleepThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxArticulationSchemaTokens->sleepThreshold);
}

HdIntDataSourceHandle
HdPhysxArticulationSchema::GetSolverPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxArticulationSchemaTokens->solverPositionIterationCount);
}

HdIntDataSourceHandle
HdPhysxArticulationSchema::GetSolverVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxArticulationSchemaTokens->solverVelocityIterationCount);
}

HdFloatDataSourceHandle
HdPhysxArticulationSchema::GetStabilizationThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxArticulationSchemaTokens->stabilizationThreshold);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxArticulationSchema::BuildRetained(
        const HdBoolDataSourceHandle &articulationEnabled,
        const HdBoolDataSourceHandle &enabledSelfCollisions,
        const HdFloatDataSourceHandle &sleepThreshold,
        const HdIntDataSourceHandle &solverPositionIterationCount,
        const HdIntDataSourceHandle &solverVelocityIterationCount,
        const HdFloatDataSourceHandle &stabilizationThreshold
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (articulationEnabled) {
        _names[_count] = HdPhysxArticulationSchemaTokens->articulationEnabled;
        _values[_count++] = articulationEnabled;
    }

    if (enabledSelfCollisions) {
        _names[_count] = HdPhysxArticulationSchemaTokens->enabledSelfCollisions;
        _values[_count++] = enabledSelfCollisions;
    }

    if (sleepThreshold) {
        _names[_count] = HdPhysxArticulationSchemaTokens->sleepThreshold;
        _values[_count++] = sleepThreshold;
    }

    if (solverPositionIterationCount) {
        _names[_count] = HdPhysxArticulationSchemaTokens->solverPositionIterationCount;
        _values[_count++] = solverPositionIterationCount;
    }

    if (solverVelocityIterationCount) {
        _names[_count] = HdPhysxArticulationSchemaTokens->solverVelocityIterationCount;
        _values[_count++] = solverVelocityIterationCount;
    }

    if (stabilizationThreshold) {
        _names[_count] = HdPhysxArticulationSchemaTokens->stabilizationThreshold;
        _values[_count++] = stabilizationThreshold;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetArticulationEnabled(
    const HdBoolDataSourceHandle &articulationEnabled)
{
    _articulationEnabled = articulationEnabled;
    return *this;
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetEnabledSelfCollisions(
    const HdBoolDataSourceHandle &enabledSelfCollisions)
{
    _enabledSelfCollisions = enabledSelfCollisions;
    return *this;
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetSleepThreshold(
    const HdFloatDataSourceHandle &sleepThreshold)
{
    _sleepThreshold = sleepThreshold;
    return *this;
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetSolverPositionIterationCount(
    const HdIntDataSourceHandle &solverPositionIterationCount)
{
    _solverPositionIterationCount = solverPositionIterationCount;
    return *this;
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetSolverVelocityIterationCount(
    const HdIntDataSourceHandle &solverVelocityIterationCount)
{
    _solverVelocityIterationCount = solverVelocityIterationCount;
    return *this;
}

HdPhysxArticulationSchema::Builder &
HdPhysxArticulationSchema::Builder::SetStabilizationThreshold(
    const HdFloatDataSourceHandle &stabilizationThreshold)
{
    _stabilizationThreshold = stabilizationThreshold;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxArticulationSchema::Builder::Build()
{
    return HdPhysxArticulationSchema::BuildRetained(
        _articulationEnabled,
        _enabledSelfCollisions,
        _sleepThreshold,
        _solverPositionIterationCount,
        _solverVelocityIterationCount,
        _stabilizationThreshold
    );
}

/*static*/
HdPhysxArticulationSchema
HdPhysxArticulationSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxArticulationSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxArticulationSchemaTokens->physxArticulation))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxArticulationSchema::GetSchemaToken()
{
    return HdPhysxArticulationSchemaTokens->physxArticulation;
}

/*static*/
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetArticulationEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->articulationEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetEnabledSelfCollisionsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->enabledSelfCollisions);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetSleepThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->sleepThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetSolverPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->solverPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetSolverVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->solverVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxArticulationSchema::GetStabilizationThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxArticulationSchemaTokens->stabilizationThreshold);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE