//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxPhysicsGearJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxPhysicsGearJointSchemaTokens,
    HD_PHYSX_PHYSICS_GEAR_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxPhysicsGearJointSchema::GetGearRatio() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxPhysicsGearJointSchemaTokens->gearRatio);
}

HdPathArrayDataSourceHandle
HdPhysxPhysicsGearJointSchema::GetHinge0() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        HdPhysxPhysicsGearJointSchemaTokens->hinge0);
}

HdPathArrayDataSourceHandle
HdPhysxPhysicsGearJointSchema::GetHinge1() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        HdPhysxPhysicsGearJointSchemaTokens->hinge1);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxPhysicsGearJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &gearRatio,
        const HdPathArrayDataSourceHandle &hinge0,
        const HdPathArrayDataSourceHandle &hinge1
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (gearRatio) {
        _names[_count] = HdPhysxPhysicsGearJointSchemaTokens->gearRatio;
        _values[_count++] = gearRatio;
    }

    if (hinge0) {
        _names[_count] = HdPhysxPhysicsGearJointSchemaTokens->hinge0;
        _values[_count++] = hinge0;
    }

    if (hinge1) {
        _names[_count] = HdPhysxPhysicsGearJointSchemaTokens->hinge1;
        _values[_count++] = hinge1;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxPhysicsGearJointSchema::Builder &
HdPhysxPhysicsGearJointSchema::Builder::SetGearRatio(
    const HdFloatDataSourceHandle &gearRatio)
{
    _gearRatio = gearRatio;
    return *this;
}

HdPhysxPhysicsGearJointSchema::Builder &
HdPhysxPhysicsGearJointSchema::Builder::SetHinge0(
    const HdPathArrayDataSourceHandle &hinge0)
{
    _hinge0 = hinge0;
    return *this;
}

HdPhysxPhysicsGearJointSchema::Builder &
HdPhysxPhysicsGearJointSchema::Builder::SetHinge1(
    const HdPathArrayDataSourceHandle &hinge1)
{
    _hinge1 = hinge1;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxPhysicsGearJointSchema::Builder::Build()
{
    return HdPhysxPhysicsGearJointSchema::BuildRetained(
        _gearRatio,
        _hinge0,
        _hinge1
    );
}

/*static*/
HdPhysxPhysicsGearJointSchema
HdPhysxPhysicsGearJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxPhysicsGearJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxPhysicsGearJointSchemaTokens->physxPhysicsGearJoint))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxPhysicsGearJointSchema::GetSchemaToken()
{
    return HdPhysxPhysicsGearJointSchemaTokens->physxPhysicsGearJoint;
}

/*static*/
const HdDataSourceLocator &
HdPhysxPhysicsGearJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsGearJointSchema::GetGearRatioLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsGearJointSchemaTokens->gearRatio);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsGearJointSchema::GetHinge0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsGearJointSchemaTokens->hinge0);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsGearJointSchema::GetHinge1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsGearJointSchemaTokens->hinge1);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE