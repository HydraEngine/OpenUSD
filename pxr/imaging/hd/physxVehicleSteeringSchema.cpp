//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleSteeringSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleSteeringSchemaTokens,
    HD_PHYSX_VEHICLE_STEERING_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatArrayDataSourceHandle
HdPhysxVehicleSteeringSchema::GetAngleMultipliers() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        HdPhysxVehicleSteeringSchemaTokens->angleMultipliers);
}

HdFloatDataSourceHandle
HdPhysxVehicleSteeringSchema::GetMaxSteerAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleSteeringSchemaTokens->maxSteerAngle);
}

HdIntArrayDataSourceHandle
HdPhysxVehicleSteeringSchema::GetWheels() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdPhysxVehicleSteeringSchemaTokens->wheels);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleSteeringSchema::BuildRetained(
        const HdFloatArrayDataSourceHandle &angleMultipliers,
        const HdFloatDataSourceHandle &maxSteerAngle,
        const HdIntArrayDataSourceHandle &wheels
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (angleMultipliers) {
        _names[_count] = HdPhysxVehicleSteeringSchemaTokens->angleMultipliers;
        _values[_count++] = angleMultipliers;
    }

    if (maxSteerAngle) {
        _names[_count] = HdPhysxVehicleSteeringSchemaTokens->maxSteerAngle;
        _values[_count++] = maxSteerAngle;
    }

    if (wheels) {
        _names[_count] = HdPhysxVehicleSteeringSchemaTokens->wheels;
        _values[_count++] = wheels;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleSteeringSchema::Builder &
HdPhysxVehicleSteeringSchema::Builder::SetAngleMultipliers(
    const HdFloatArrayDataSourceHandle &angleMultipliers)
{
    _angleMultipliers = angleMultipliers;
    return *this;
}

HdPhysxVehicleSteeringSchema::Builder &
HdPhysxVehicleSteeringSchema::Builder::SetMaxSteerAngle(
    const HdFloatDataSourceHandle &maxSteerAngle)
{
    _maxSteerAngle = maxSteerAngle;
    return *this;
}

HdPhysxVehicleSteeringSchema::Builder &
HdPhysxVehicleSteeringSchema::Builder::SetWheels(
    const HdIntArrayDataSourceHandle &wheels)
{
    _wheels = wheels;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleSteeringSchema::Builder::Build()
{
    return HdPhysxVehicleSteeringSchema::BuildRetained(
        _angleMultipliers,
        _maxSteerAngle,
        _wheels
    );
}

/*static*/
HdPhysxVehicleSteeringSchema
HdPhysxVehicleSteeringSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleSteeringSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleSteeringSchemaTokens->physxVehicleSteering))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleSteeringSchema::GetSchemaToken()
{
    return HdPhysxVehicleSteeringSchemaTokens->physxVehicleSteering;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleSteeringSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSteeringSchema::GetAngleMultipliersLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSteeringSchemaTokens->angleMultipliers);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSteeringSchema::GetMaxSteerAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSteeringSchemaTokens->maxSteerAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSteeringSchema::GetWheelsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSteeringSchemaTokens->wheels);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE