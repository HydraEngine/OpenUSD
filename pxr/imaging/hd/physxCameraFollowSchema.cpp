//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxCameraFollowSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxCameraFollowSchemaTokens,
    HD_PHYSX_CAMERA_FOLLOW_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec3fDataSourceHandle
HdPhysxCameraFollowSchema::GetCameraPositionTimeConstant() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdPhysxCameraFollowSchemaTokens->cameraPositionTimeConstant);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetFollowMaxDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->followMaxDistance);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetFollowMaxSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->followMaxSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetFollowMinDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->followMinDistance);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetFollowMinSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->followMinSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetFollowTurnRateGain() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->followTurnRateGain);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookAheadMaxDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookAheadMaxDistance);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookAheadMaxSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookAheadMaxSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookAheadMinDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookAheadMinDistance);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookAheadMinSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookAheadMinSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookAheadTurnRateGain() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookAheadTurnRateGain);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookPositionHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookPositionHeight);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetLookPositionTimeConstant() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->lookPositionTimeConstant);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetPitchAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->pitchAngle);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetPitchAngleTimeConstant() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->pitchAngleTimeConstant);
}

HdVec3fDataSourceHandle
HdPhysxCameraFollowSchema::GetPositionOffset() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdPhysxCameraFollowSchemaTokens->positionOffset);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetSlowPitchAngleSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->slowPitchAngleSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetSlowSpeedPitchAngleScale() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->slowSpeedPitchAngleScale);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetVelocityNormalMinSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->velocityNormalMinSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetYawAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->yawAngle);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowSchema::GetYawRateTimeConstant() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowSchemaTokens->yawRateTimeConstant);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxCameraFollowSchema::BuildRetained(
        const HdVec3fDataSourceHandle &cameraPositionTimeConstant,
        const HdFloatDataSourceHandle &followMaxDistance,
        const HdFloatDataSourceHandle &followMaxSpeed,
        const HdFloatDataSourceHandle &followMinDistance,
        const HdFloatDataSourceHandle &followMinSpeed,
        const HdFloatDataSourceHandle &followTurnRateGain,
        const HdFloatDataSourceHandle &lookAheadMaxDistance,
        const HdFloatDataSourceHandle &lookAheadMaxSpeed,
        const HdFloatDataSourceHandle &lookAheadMinDistance,
        const HdFloatDataSourceHandle &lookAheadMinSpeed,
        const HdFloatDataSourceHandle &lookAheadTurnRateGain,
        const HdFloatDataSourceHandle &lookPositionHeight,
        const HdFloatDataSourceHandle &lookPositionTimeConstant,
        const HdFloatDataSourceHandle &pitchAngle,
        const HdFloatDataSourceHandle &pitchAngleTimeConstant,
        const HdVec3fDataSourceHandle &positionOffset,
        const HdFloatDataSourceHandle &slowPitchAngleSpeed,
        const HdFloatDataSourceHandle &slowSpeedPitchAngleScale,
        const HdFloatDataSourceHandle &velocityNormalMinSpeed,
        const HdFloatDataSourceHandle &yawAngle,
        const HdFloatDataSourceHandle &yawRateTimeConstant
)
{
    TfToken _names[21];
    HdDataSourceBaseHandle _values[21];

    size_t _count = 0;

    if (cameraPositionTimeConstant) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->cameraPositionTimeConstant;
        _values[_count++] = cameraPositionTimeConstant;
    }

    if (followMaxDistance) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->followMaxDistance;
        _values[_count++] = followMaxDistance;
    }

    if (followMaxSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->followMaxSpeed;
        _values[_count++] = followMaxSpeed;
    }

    if (followMinDistance) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->followMinDistance;
        _values[_count++] = followMinDistance;
    }

    if (followMinSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->followMinSpeed;
        _values[_count++] = followMinSpeed;
    }

    if (followTurnRateGain) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->followTurnRateGain;
        _values[_count++] = followTurnRateGain;
    }

    if (lookAheadMaxDistance) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookAheadMaxDistance;
        _values[_count++] = lookAheadMaxDistance;
    }

    if (lookAheadMaxSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookAheadMaxSpeed;
        _values[_count++] = lookAheadMaxSpeed;
    }

    if (lookAheadMinDistance) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookAheadMinDistance;
        _values[_count++] = lookAheadMinDistance;
    }

    if (lookAheadMinSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookAheadMinSpeed;
        _values[_count++] = lookAheadMinSpeed;
    }

    if (lookAheadTurnRateGain) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookAheadTurnRateGain;
        _values[_count++] = lookAheadTurnRateGain;
    }

    if (lookPositionHeight) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookPositionHeight;
        _values[_count++] = lookPositionHeight;
    }

    if (lookPositionTimeConstant) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->lookPositionTimeConstant;
        _values[_count++] = lookPositionTimeConstant;
    }

    if (pitchAngle) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->pitchAngle;
        _values[_count++] = pitchAngle;
    }

    if (pitchAngleTimeConstant) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->pitchAngleTimeConstant;
        _values[_count++] = pitchAngleTimeConstant;
    }

    if (positionOffset) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->positionOffset;
        _values[_count++] = positionOffset;
    }

    if (slowPitchAngleSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->slowPitchAngleSpeed;
        _values[_count++] = slowPitchAngleSpeed;
    }

    if (slowSpeedPitchAngleScale) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->slowSpeedPitchAngleScale;
        _values[_count++] = slowSpeedPitchAngleScale;
    }

    if (velocityNormalMinSpeed) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->velocityNormalMinSpeed;
        _values[_count++] = velocityNormalMinSpeed;
    }

    if (yawAngle) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->yawAngle;
        _values[_count++] = yawAngle;
    }

    if (yawRateTimeConstant) {
        _names[_count] = HdPhysxCameraFollowSchemaTokens->yawRateTimeConstant;
        _values[_count++] = yawRateTimeConstant;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetCameraPositionTimeConstant(
    const HdVec3fDataSourceHandle &cameraPositionTimeConstant)
{
    _cameraPositionTimeConstant = cameraPositionTimeConstant;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetFollowMaxDistance(
    const HdFloatDataSourceHandle &followMaxDistance)
{
    _followMaxDistance = followMaxDistance;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetFollowMaxSpeed(
    const HdFloatDataSourceHandle &followMaxSpeed)
{
    _followMaxSpeed = followMaxSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetFollowMinDistance(
    const HdFloatDataSourceHandle &followMinDistance)
{
    _followMinDistance = followMinDistance;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetFollowMinSpeed(
    const HdFloatDataSourceHandle &followMinSpeed)
{
    _followMinSpeed = followMinSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetFollowTurnRateGain(
    const HdFloatDataSourceHandle &followTurnRateGain)
{
    _followTurnRateGain = followTurnRateGain;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookAheadMaxDistance(
    const HdFloatDataSourceHandle &lookAheadMaxDistance)
{
    _lookAheadMaxDistance = lookAheadMaxDistance;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookAheadMaxSpeed(
    const HdFloatDataSourceHandle &lookAheadMaxSpeed)
{
    _lookAheadMaxSpeed = lookAheadMaxSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookAheadMinDistance(
    const HdFloatDataSourceHandle &lookAheadMinDistance)
{
    _lookAheadMinDistance = lookAheadMinDistance;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookAheadMinSpeed(
    const HdFloatDataSourceHandle &lookAheadMinSpeed)
{
    _lookAheadMinSpeed = lookAheadMinSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookAheadTurnRateGain(
    const HdFloatDataSourceHandle &lookAheadTurnRateGain)
{
    _lookAheadTurnRateGain = lookAheadTurnRateGain;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookPositionHeight(
    const HdFloatDataSourceHandle &lookPositionHeight)
{
    _lookPositionHeight = lookPositionHeight;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetLookPositionTimeConstant(
    const HdFloatDataSourceHandle &lookPositionTimeConstant)
{
    _lookPositionTimeConstant = lookPositionTimeConstant;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetPitchAngle(
    const HdFloatDataSourceHandle &pitchAngle)
{
    _pitchAngle = pitchAngle;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetPitchAngleTimeConstant(
    const HdFloatDataSourceHandle &pitchAngleTimeConstant)
{
    _pitchAngleTimeConstant = pitchAngleTimeConstant;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetPositionOffset(
    const HdVec3fDataSourceHandle &positionOffset)
{
    _positionOffset = positionOffset;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetSlowPitchAngleSpeed(
    const HdFloatDataSourceHandle &slowPitchAngleSpeed)
{
    _slowPitchAngleSpeed = slowPitchAngleSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetSlowSpeedPitchAngleScale(
    const HdFloatDataSourceHandle &slowSpeedPitchAngleScale)
{
    _slowSpeedPitchAngleScale = slowSpeedPitchAngleScale;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetVelocityNormalMinSpeed(
    const HdFloatDataSourceHandle &velocityNormalMinSpeed)
{
    _velocityNormalMinSpeed = velocityNormalMinSpeed;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetYawAngle(
    const HdFloatDataSourceHandle &yawAngle)
{
    _yawAngle = yawAngle;
    return *this;
}

HdPhysxCameraFollowSchema::Builder &
HdPhysxCameraFollowSchema::Builder::SetYawRateTimeConstant(
    const HdFloatDataSourceHandle &yawRateTimeConstant)
{
    _yawRateTimeConstant = yawRateTimeConstant;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxCameraFollowSchema::Builder::Build()
{
    return HdPhysxCameraFollowSchema::BuildRetained(
        _cameraPositionTimeConstant,
        _followMaxDistance,
        _followMaxSpeed,
        _followMinDistance,
        _followMinSpeed,
        _followTurnRateGain,
        _lookAheadMaxDistance,
        _lookAheadMaxSpeed,
        _lookAheadMinDistance,
        _lookAheadMinSpeed,
        _lookAheadTurnRateGain,
        _lookPositionHeight,
        _lookPositionTimeConstant,
        _pitchAngle,
        _pitchAngleTimeConstant,
        _positionOffset,
        _slowPitchAngleSpeed,
        _slowSpeedPitchAngleScale,
        _velocityNormalMinSpeed,
        _yawAngle,
        _yawRateTimeConstant
    );
}

/*static*/
HdPhysxCameraFollowSchema
HdPhysxCameraFollowSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxCameraFollowSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxCameraFollowSchemaTokens->physxCameraFollow))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxCameraFollowSchema::GetSchemaToken()
{
    return HdPhysxCameraFollowSchemaTokens->physxCameraFollow;
}

/*static*/
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetCameraPositionTimeConstantLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->cameraPositionTimeConstant);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetFollowMaxDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->followMaxDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetFollowMaxSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->followMaxSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetFollowMinDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->followMinDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetFollowMinSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->followMinSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetFollowTurnRateGainLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->followTurnRateGain);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookAheadMaxDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookAheadMaxDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookAheadMaxSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookAheadMaxSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookAheadMinDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookAheadMinDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookAheadMinSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookAheadMinSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookAheadTurnRateGainLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookAheadTurnRateGain);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookPositionHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookPositionHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetLookPositionTimeConstantLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->lookPositionTimeConstant);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetPitchAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->pitchAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetPitchAngleTimeConstantLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->pitchAngleTimeConstant);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetPositionOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->positionOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetSlowPitchAngleSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->slowPitchAngleSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetSlowSpeedPitchAngleScaleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->slowSpeedPitchAngleScale);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetVelocityNormalMinSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->velocityNormalMinSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetYawAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->yawAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowSchema::GetYawRateTimeConstantLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowSchemaTokens->yawRateTimeConstant);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE