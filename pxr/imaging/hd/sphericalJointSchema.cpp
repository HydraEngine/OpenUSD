//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/sphericalJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdSphericalJointSchemaTokens,
    HD_SPHERICAL_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
HdSphericalJointSchema::GetAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdSphericalJointSchemaTokens->axis);
}

HdFloatDataSourceHandle
HdSphericalJointSchema::GetConeAngle0Limit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdSphericalJointSchemaTokens->coneAngle0Limit);
}

HdFloatDataSourceHandle
HdSphericalJointSchema::GetConeAngle1Limit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdSphericalJointSchemaTokens->coneAngle1Limit);
}

/*static*/
HdContainerDataSourceHandle
HdSphericalJointSchema::BuildRetained(
        const HdTokenDataSourceHandle &axis,
        const HdFloatDataSourceHandle &coneAngle0Limit,
        const HdFloatDataSourceHandle &coneAngle1Limit
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (axis) {
        _names[_count] = HdSphericalJointSchemaTokens->axis;
        _values[_count++] = axis;
    }

    if (coneAngle0Limit) {
        _names[_count] = HdSphericalJointSchemaTokens->coneAngle0Limit;
        _values[_count++] = coneAngle0Limit;
    }

    if (coneAngle1Limit) {
        _names[_count] = HdSphericalJointSchemaTokens->coneAngle1Limit;
        _values[_count++] = coneAngle1Limit;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdSphericalJointSchema::Builder &
HdSphericalJointSchema::Builder::SetAxis(
    const HdTokenDataSourceHandle &axis)
{
    _axis = axis;
    return *this;
}

HdSphericalJointSchema::Builder &
HdSphericalJointSchema::Builder::SetConeAngle0Limit(
    const HdFloatDataSourceHandle &coneAngle0Limit)
{
    _coneAngle0Limit = coneAngle0Limit;
    return *this;
}

HdSphericalJointSchema::Builder &
HdSphericalJointSchema::Builder::SetConeAngle1Limit(
    const HdFloatDataSourceHandle &coneAngle1Limit)
{
    _coneAngle1Limit = coneAngle1Limit;
    return *this;
}

HdContainerDataSourceHandle
HdSphericalJointSchema::Builder::Build()
{
    return HdSphericalJointSchema::BuildRetained(
        _axis,
        _coneAngle0Limit,
        _coneAngle1Limit
    );
}

/*static*/
HdSphericalJointSchema
HdSphericalJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdSphericalJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdSphericalJointSchemaTokens->sphericalJoint))
        : nullptr);
}

/*static*/
const TfToken &
HdSphericalJointSchema::GetSchemaToken()
{
    return HdSphericalJointSchemaTokens->sphericalJoint;
}

/*static*/
const HdDataSourceLocator &
HdSphericalJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdSphericalJointSchema::GetAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdSphericalJointSchemaTokens->axis);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdSphericalJointSchema::GetConeAngle0LimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdSphericalJointSchemaTokens->coneAngle0Limit);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdSphericalJointSchema::GetConeAngle1LimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdSphericalJointSchemaTokens->coneAngle1Limit);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE