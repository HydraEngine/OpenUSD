//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_IMAGING_HD_PHYSX_RIGID_BODY_SCHEMA_H
#define PXR_IMAGING_HD_PHYSX_RIGID_BODY_SCHEMA_H

/// \file

#include "pxr/imaging/hd/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define HD_PHYSX_RIGID_BODY_SCHEMA_TOKENS \
    (physxRigidBody) \
    (angularDamping) \
    (cfmScale) \
    (contactSlopCoefficient) \
    (disableGravity) \
    (enableCCD) \
    (enableGyroscopicForces) \
    (enableSpeculativeCCD) \
    (linearDamping) \
    (lockedPosAxis) \
    (lockedRotAxis) \
    (maxAngularVelocity) \
    (maxContactImpulse) \
    (maxDepenetrationVelocity) \
    (maxLinearVelocity) \
    (retainAccelerations) \
    (sleepThreshold) \
    (solveContact) \
    (solverPositionIterationCount) \
    (solverVelocityIterationCount) \
    (stabilizationThreshold) \

TF_DECLARE_PUBLIC_TOKENS(HdPhysxRigidBodySchemaTokens, HD_API,
    HD_PHYSX_RIGID_BODY_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class HdPhysxRigidBodySchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    HdPhysxRigidBodySchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "physxRigidBody" from the parent container and constructs a
    /// HdPhysxRigidBodySchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    HD_API
    static HdPhysxRigidBodySchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    HD_API
    HdFloatDataSourceHandle GetAngularDamping() const;

    HD_API
    HdFloatDataSourceHandle GetCfmScale() const;

    HD_API
    HdFloatDataSourceHandle GetContactSlopCoefficient() const;

    HD_API
    HdBoolDataSourceHandle GetDisableGravity() const;

    HD_API
    HdBoolDataSourceHandle GetEnableCCD() const;

    HD_API
    HdBoolDataSourceHandle GetEnableGyroscopicForces() const;

    HD_API
    HdBoolDataSourceHandle GetEnableSpeculativeCCD() const;

    HD_API
    HdFloatDataSourceHandle GetLinearDamping() const;

    HD_API
    HdIntDataSourceHandle GetLockedPosAxis() const;

    HD_API
    HdIntDataSourceHandle GetLockedRotAxis() const;

    HD_API
    HdFloatDataSourceHandle GetMaxAngularVelocity() const;

    HD_API
    HdFloatDataSourceHandle GetMaxContactImpulse() const;

    HD_API
    HdFloatDataSourceHandle GetMaxDepenetrationVelocity() const;

    HD_API
    HdFloatDataSourceHandle GetMaxLinearVelocity() const;

    HD_API
    HdBoolDataSourceHandle GetRetainAccelerations() const;

    HD_API
    HdFloatDataSourceHandle GetSleepThreshold() const;

    HD_API
    HdBoolDataSourceHandle GetSolveContact() const;

    HD_API
    HdIntDataSourceHandle GetSolverPositionIterationCount() const;

    HD_API
    HdIntDataSourceHandle GetSolverVelocityIterationCount() const;

    HD_API
    HdFloatDataSourceHandle GetStabilizationThreshold() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    HD_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    HD_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate angularDamping.
    HD_API
    static const HdDataSourceLocator &GetAngularDampingLocator();

    /// Prim-level relative data source locator to locate cfmScale.
    HD_API
    static const HdDataSourceLocator &GetCfmScaleLocator();

    /// Prim-level relative data source locator to locate contactSlopCoefficient.
    HD_API
    static const HdDataSourceLocator &GetContactSlopCoefficientLocator();

    /// Prim-level relative data source locator to locate disableGravity.
    HD_API
    static const HdDataSourceLocator &GetDisableGravityLocator();

    /// Prim-level relative data source locator to locate enableCCD.
    HD_API
    static const HdDataSourceLocator &GetEnableCCDLocator();

    /// Prim-level relative data source locator to locate enableGyroscopicForces.
    HD_API
    static const HdDataSourceLocator &GetEnableGyroscopicForcesLocator();

    /// Prim-level relative data source locator to locate enableSpeculativeCCD.
    HD_API
    static const HdDataSourceLocator &GetEnableSpeculativeCCDLocator();

    /// Prim-level relative data source locator to locate linearDamping.
    HD_API
    static const HdDataSourceLocator &GetLinearDampingLocator();

    /// Prim-level relative data source locator to locate lockedPosAxis.
    HD_API
    static const HdDataSourceLocator &GetLockedPosAxisLocator();

    /// Prim-level relative data source locator to locate lockedRotAxis.
    HD_API
    static const HdDataSourceLocator &GetLockedRotAxisLocator();

    /// Prim-level relative data source locator to locate maxAngularVelocity.
    HD_API
    static const HdDataSourceLocator &GetMaxAngularVelocityLocator();

    /// Prim-level relative data source locator to locate maxContactImpulse.
    HD_API
    static const HdDataSourceLocator &GetMaxContactImpulseLocator();

    /// Prim-level relative data source locator to locate maxDepenetrationVelocity.
    HD_API
    static const HdDataSourceLocator &GetMaxDepenetrationVelocityLocator();

    /// Prim-level relative data source locator to locate maxLinearVelocity.
    HD_API
    static const HdDataSourceLocator &GetMaxLinearVelocityLocator();

    /// Prim-level relative data source locator to locate retainAccelerations.
    HD_API
    static const HdDataSourceLocator &GetRetainAccelerationsLocator();

    /// Prim-level relative data source locator to locate sleepThreshold.
    HD_API
    static const HdDataSourceLocator &GetSleepThresholdLocator();

    /// Prim-level relative data source locator to locate solveContact.
    HD_API
    static const HdDataSourceLocator &GetSolveContactLocator();

    /// Prim-level relative data source locator to locate solverPositionIterationCount.
    HD_API
    static const HdDataSourceLocator &GetSolverPositionIterationCountLocator();

    /// Prim-level relative data source locator to locate solverVelocityIterationCount.
    HD_API
    static const HdDataSourceLocator &GetSolverVelocityIterationCountLocator();

    /// Prim-level relative data source locator to locate stabilizationThreshold.
    HD_API
    static const HdDataSourceLocator &GetStabilizationThresholdLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    HD_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdFloatDataSourceHandle &angularDamping,
        const HdFloatDataSourceHandle &cfmScale,
        const HdFloatDataSourceHandle &contactSlopCoefficient,
        const HdBoolDataSourceHandle &disableGravity,
        const HdBoolDataSourceHandle &enableCCD,
        const HdBoolDataSourceHandle &enableGyroscopicForces,
        const HdBoolDataSourceHandle &enableSpeculativeCCD,
        const HdFloatDataSourceHandle &linearDamping,
        const HdIntDataSourceHandle &lockedPosAxis,
        const HdIntDataSourceHandle &lockedRotAxis,
        const HdFloatDataSourceHandle &maxAngularVelocity,
        const HdFloatDataSourceHandle &maxContactImpulse,
        const HdFloatDataSourceHandle &maxDepenetrationVelocity,
        const HdFloatDataSourceHandle &maxLinearVelocity,
        const HdBoolDataSourceHandle &retainAccelerations,
        const HdFloatDataSourceHandle &sleepThreshold,
        const HdBoolDataSourceHandle &solveContact,
        const HdIntDataSourceHandle &solverPositionIterationCount,
        const HdIntDataSourceHandle &solverVelocityIterationCount,
        const HdFloatDataSourceHandle &stabilizationThreshold
    );

    /// \class HdPhysxRigidBodySchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        HD_API
        Builder &SetAngularDamping(
            const HdFloatDataSourceHandle &angularDamping);
        HD_API
        Builder &SetCfmScale(
            const HdFloatDataSourceHandle &cfmScale);
        HD_API
        Builder &SetContactSlopCoefficient(
            const HdFloatDataSourceHandle &contactSlopCoefficient);
        HD_API
        Builder &SetDisableGravity(
            const HdBoolDataSourceHandle &disableGravity);
        HD_API
        Builder &SetEnableCCD(
            const HdBoolDataSourceHandle &enableCCD);
        HD_API
        Builder &SetEnableGyroscopicForces(
            const HdBoolDataSourceHandle &enableGyroscopicForces);
        HD_API
        Builder &SetEnableSpeculativeCCD(
            const HdBoolDataSourceHandle &enableSpeculativeCCD);
        HD_API
        Builder &SetLinearDamping(
            const HdFloatDataSourceHandle &linearDamping);
        HD_API
        Builder &SetLockedPosAxis(
            const HdIntDataSourceHandle &lockedPosAxis);
        HD_API
        Builder &SetLockedRotAxis(
            const HdIntDataSourceHandle &lockedRotAxis);
        HD_API
        Builder &SetMaxAngularVelocity(
            const HdFloatDataSourceHandle &maxAngularVelocity);
        HD_API
        Builder &SetMaxContactImpulse(
            const HdFloatDataSourceHandle &maxContactImpulse);
        HD_API
        Builder &SetMaxDepenetrationVelocity(
            const HdFloatDataSourceHandle &maxDepenetrationVelocity);
        HD_API
        Builder &SetMaxLinearVelocity(
            const HdFloatDataSourceHandle &maxLinearVelocity);
        HD_API
        Builder &SetRetainAccelerations(
            const HdBoolDataSourceHandle &retainAccelerations);
        HD_API
        Builder &SetSleepThreshold(
            const HdFloatDataSourceHandle &sleepThreshold);
        HD_API
        Builder &SetSolveContact(
            const HdBoolDataSourceHandle &solveContact);
        HD_API
        Builder &SetSolverPositionIterationCount(
            const HdIntDataSourceHandle &solverPositionIterationCount);
        HD_API
        Builder &SetSolverVelocityIterationCount(
            const HdIntDataSourceHandle &solverVelocityIterationCount);
        HD_API
        Builder &SetStabilizationThreshold(
            const HdFloatDataSourceHandle &stabilizationThreshold);

        /// Returns a container data source containing the members set thus far.
        HD_API
        HdContainerDataSourceHandle Build();

    private:
        HdFloatDataSourceHandle _angularDamping;
        HdFloatDataSourceHandle _cfmScale;
        HdFloatDataSourceHandle _contactSlopCoefficient;
        HdBoolDataSourceHandle _disableGravity;
        HdBoolDataSourceHandle _enableCCD;
        HdBoolDataSourceHandle _enableGyroscopicForces;
        HdBoolDataSourceHandle _enableSpeculativeCCD;
        HdFloatDataSourceHandle _linearDamping;
        HdIntDataSourceHandle _lockedPosAxis;
        HdIntDataSourceHandle _lockedRotAxis;
        HdFloatDataSourceHandle _maxAngularVelocity;
        HdFloatDataSourceHandle _maxContactImpulse;
        HdFloatDataSourceHandle _maxDepenetrationVelocity;
        HdFloatDataSourceHandle _maxLinearVelocity;
        HdBoolDataSourceHandle _retainAccelerations;
        HdFloatDataSourceHandle _sleepThreshold;
        HdBoolDataSourceHandle _solveContact;
        HdIntDataSourceHandle _solverPositionIterationCount;
        HdIntDataSourceHandle _solverVelocityIterationCount;
        HdFloatDataSourceHandle _stabilizationThreshold;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif