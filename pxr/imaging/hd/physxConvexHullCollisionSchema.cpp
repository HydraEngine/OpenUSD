//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxConvexHullCollisionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxConvexHullCollisionSchemaTokens,
    HD_PHYSX_CONVEX_HULL_COLLISION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntDataSourceHandle
HdPhysxConvexHullCollisionSchema::GetHullVertexLimit() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxConvexHullCollisionSchemaTokens->hullVertexLimit);
}

HdFloatDataSourceHandle
HdPhysxConvexHullCollisionSchema::GetMinThickness() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxConvexHullCollisionSchemaTokens->minThickness);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxConvexHullCollisionSchema::BuildRetained(
        const HdIntDataSourceHandle &hullVertexLimit,
        const HdFloatDataSourceHandle &minThickness
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (hullVertexLimit) {
        _names[_count] = HdPhysxConvexHullCollisionSchemaTokens->hullVertexLimit;
        _values[_count++] = hullVertexLimit;
    }

    if (minThickness) {
        _names[_count] = HdPhysxConvexHullCollisionSchemaTokens->minThickness;
        _values[_count++] = minThickness;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxConvexHullCollisionSchema::Builder &
HdPhysxConvexHullCollisionSchema::Builder::SetHullVertexLimit(
    const HdIntDataSourceHandle &hullVertexLimit)
{
    _hullVertexLimit = hullVertexLimit;
    return *this;
}

HdPhysxConvexHullCollisionSchema::Builder &
HdPhysxConvexHullCollisionSchema::Builder::SetMinThickness(
    const HdFloatDataSourceHandle &minThickness)
{
    _minThickness = minThickness;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxConvexHullCollisionSchema::Builder::Build()
{
    return HdPhysxConvexHullCollisionSchema::BuildRetained(
        _hullVertexLimit,
        _minThickness
    );
}

/*static*/
HdPhysxConvexHullCollisionSchema
HdPhysxConvexHullCollisionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxConvexHullCollisionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxConvexHullCollisionSchemaTokens->physxConvexHullCollision))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxConvexHullCollisionSchema::GetSchemaToken()
{
    return HdPhysxConvexHullCollisionSchemaTokens->physxConvexHullCollision;
}

/*static*/
const HdDataSourceLocator &
HdPhysxConvexHullCollisionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexHullCollisionSchema::GetHullVertexLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexHullCollisionSchemaTokens->hullVertexLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxConvexHullCollisionSchema::GetMinThicknessLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxConvexHullCollisionSchemaTokens->minThickness);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE