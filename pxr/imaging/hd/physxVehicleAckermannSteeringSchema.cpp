//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleAckermannSteeringSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleAckermannSteeringSchemaTokens,
    HD_PHYSX_VEHICLE_ACKERMANN_STEERING_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetMaxSteerAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->maxSteerAngle);
}

HdFloatDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetStrength() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->strength);
}

HdFloatDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetTrackWidth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->trackWidth);
}

HdIntDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetWheel0() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->wheel0);
}

HdIntDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetWheel1() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->wheel1);
}

HdFloatDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::GetWheelBase() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleAckermannSteeringSchemaTokens->wheelBase);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::BuildRetained(
        const HdFloatDataSourceHandle &maxSteerAngle,
        const HdFloatDataSourceHandle &strength,
        const HdFloatDataSourceHandle &trackWidth,
        const HdIntDataSourceHandle &wheel0,
        const HdIntDataSourceHandle &wheel1,
        const HdFloatDataSourceHandle &wheelBase
)
{
    TfToken _names[6];
    HdDataSourceBaseHandle _values[6];

    size_t _count = 0;

    if (maxSteerAngle) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->maxSteerAngle;
        _values[_count++] = maxSteerAngle;
    }

    if (strength) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->strength;
        _values[_count++] = strength;
    }

    if (trackWidth) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->trackWidth;
        _values[_count++] = trackWidth;
    }

    if (wheel0) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->wheel0;
        _values[_count++] = wheel0;
    }

    if (wheel1) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->wheel1;
        _values[_count++] = wheel1;
    }

    if (wheelBase) {
        _names[_count] = HdPhysxVehicleAckermannSteeringSchemaTokens->wheelBase;
        _values[_count++] = wheelBase;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetMaxSteerAngle(
    const HdFloatDataSourceHandle &maxSteerAngle)
{
    _maxSteerAngle = maxSteerAngle;
    return *this;
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetStrength(
    const HdFloatDataSourceHandle &strength)
{
    _strength = strength;
    return *this;
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetTrackWidth(
    const HdFloatDataSourceHandle &trackWidth)
{
    _trackWidth = trackWidth;
    return *this;
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetWheel0(
    const HdIntDataSourceHandle &wheel0)
{
    _wheel0 = wheel0;
    return *this;
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetWheel1(
    const HdIntDataSourceHandle &wheel1)
{
    _wheel1 = wheel1;
    return *this;
}

HdPhysxVehicleAckermannSteeringSchema::Builder &
HdPhysxVehicleAckermannSteeringSchema::Builder::SetWheelBase(
    const HdFloatDataSourceHandle &wheelBase)
{
    _wheelBase = wheelBase;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleAckermannSteeringSchema::Builder::Build()
{
    return HdPhysxVehicleAckermannSteeringSchema::BuildRetained(
        _maxSteerAngle,
        _strength,
        _trackWidth,
        _wheel0,
        _wheel1,
        _wheelBase
    );
}

/*static*/
HdPhysxVehicleAckermannSteeringSchema
HdPhysxVehicleAckermannSteeringSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleAckermannSteeringSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleAckermannSteeringSchemaTokens->physxVehicleAckermannSteering))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleAckermannSteeringSchema::GetSchemaToken()
{
    return HdPhysxVehicleAckermannSteeringSchemaTokens->physxVehicleAckermannSteering;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetMaxSteerAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->maxSteerAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetStrengthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->strength);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetTrackWidthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->trackWidth);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetWheel0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->wheel0);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetWheel1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->wheel1);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleAckermannSteeringSchema::GetWheelBaseLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleAckermannSteeringSchemaTokens->wheelBase);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE