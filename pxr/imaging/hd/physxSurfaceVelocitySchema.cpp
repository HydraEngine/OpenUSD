//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxSurfaceVelocitySchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxSurfaceVelocitySchemaTokens,
    HD_PHYSX_SURFACE_VELOCITY_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec3fDataSourceHandle
HdPhysxSurfaceVelocitySchema::GetSurfaceAngularVelocity() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdPhysxSurfaceVelocitySchemaTokens->surfaceAngularVelocity);
}

HdVec3fDataSourceHandle
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocity() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocity);
}

HdBoolDataSourceHandle
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocityEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityEnabled);
}

HdBoolDataSourceHandle
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocityLocalSpace() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityLocalSpace);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxSurfaceVelocitySchema::BuildRetained(
        const HdVec3fDataSourceHandle &surfaceAngularVelocity,
        const HdVec3fDataSourceHandle &surfaceVelocity,
        const HdBoolDataSourceHandle &surfaceVelocityEnabled,
        const HdBoolDataSourceHandle &surfaceVelocityLocalSpace
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (surfaceAngularVelocity) {
        _names[_count] = HdPhysxSurfaceVelocitySchemaTokens->surfaceAngularVelocity;
        _values[_count++] = surfaceAngularVelocity;
    }

    if (surfaceVelocity) {
        _names[_count] = HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocity;
        _values[_count++] = surfaceVelocity;
    }

    if (surfaceVelocityEnabled) {
        _names[_count] = HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityEnabled;
        _values[_count++] = surfaceVelocityEnabled;
    }

    if (surfaceVelocityLocalSpace) {
        _names[_count] = HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityLocalSpace;
        _values[_count++] = surfaceVelocityLocalSpace;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxSurfaceVelocitySchema::Builder &
HdPhysxSurfaceVelocitySchema::Builder::SetSurfaceAngularVelocity(
    const HdVec3fDataSourceHandle &surfaceAngularVelocity)
{
    _surfaceAngularVelocity = surfaceAngularVelocity;
    return *this;
}

HdPhysxSurfaceVelocitySchema::Builder &
HdPhysxSurfaceVelocitySchema::Builder::SetSurfaceVelocity(
    const HdVec3fDataSourceHandle &surfaceVelocity)
{
    _surfaceVelocity = surfaceVelocity;
    return *this;
}

HdPhysxSurfaceVelocitySchema::Builder &
HdPhysxSurfaceVelocitySchema::Builder::SetSurfaceVelocityEnabled(
    const HdBoolDataSourceHandle &surfaceVelocityEnabled)
{
    _surfaceVelocityEnabled = surfaceVelocityEnabled;
    return *this;
}

HdPhysxSurfaceVelocitySchema::Builder &
HdPhysxSurfaceVelocitySchema::Builder::SetSurfaceVelocityLocalSpace(
    const HdBoolDataSourceHandle &surfaceVelocityLocalSpace)
{
    _surfaceVelocityLocalSpace = surfaceVelocityLocalSpace;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxSurfaceVelocitySchema::Builder::Build()
{
    return HdPhysxSurfaceVelocitySchema::BuildRetained(
        _surfaceAngularVelocity,
        _surfaceVelocity,
        _surfaceVelocityEnabled,
        _surfaceVelocityLocalSpace
    );
}

/*static*/
HdPhysxSurfaceVelocitySchema
HdPhysxSurfaceVelocitySchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxSurfaceVelocitySchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxSurfaceVelocitySchemaTokens->physxSurfaceVelocity))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxSurfaceVelocitySchema::GetSchemaToken()
{
    return HdPhysxSurfaceVelocitySchemaTokens->physxSurfaceVelocity;
}

/*static*/
const HdDataSourceLocator &
HdPhysxSurfaceVelocitySchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxSurfaceVelocitySchema::GetSurfaceAngularVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxSurfaceVelocitySchemaTokens->surfaceAngularVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocityEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxSurfaceVelocitySchema::GetSurfaceVelocityLocalSpaceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxSurfaceVelocitySchemaTokens->surfaceVelocityLocalSpace);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE