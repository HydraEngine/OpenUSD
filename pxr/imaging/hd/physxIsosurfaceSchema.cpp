//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxIsosurfaceSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxIsosurfaceSchemaTokens,
    HD_PHYSX_ISOSURFACE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetAnisotropyMax() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->anisotropyMax);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetAnisotropyMin() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->anisotropyMin);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetAnisotropyRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->anisotropyRadius);
}

HdBoolDataSourceHandle
HdPhysxIsosurfaceSchema::GetEnableAnisotropy() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxIsosurfaceSchemaTokens->enableAnisotropy);
}

HdStringDataSourceHandle
HdPhysxIsosurfaceSchema::GetGridFilteringPasses() const
{
    return _GetTypedDataSource<HdStringDataSource>(
        HdPhysxIsosurfaceSchemaTokens->gridFilteringPasses);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetGridSmoothingRadiusRelativeToCellSize() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->gridSmoothingRadiusRelativeToCellSize);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetGridSpacing() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->gridSpacing);
}

HdBoolDataSourceHandle
HdPhysxIsosurfaceSchema::GetIsoSurfaceEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxIsosurfaceSchemaTokens->isoSurfaceEnabled);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetIsosurfaceLevel() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->isosurfaceLevel);
}

HdFloatDataSourceHandle
HdPhysxIsosurfaceSchema::GetKernelRadius() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxIsosurfaceSchemaTokens->kernelRadius);
}

HdIntDataSourceHandle
HdPhysxIsosurfaceSchema::GetMaxSubgrids() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxIsosurfaceSchemaTokens->maxSubgrids);
}

HdIntDataSourceHandle
HdPhysxIsosurfaceSchema::GetMaxTriangles() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxIsosurfaceSchemaTokens->maxTriangles);
}

HdIntDataSourceHandle
HdPhysxIsosurfaceSchema::GetMaxVertices() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxIsosurfaceSchemaTokens->maxVertices);
}

HdIntDataSourceHandle
HdPhysxIsosurfaceSchema::GetNumMeshSmoothingPasses() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxIsosurfaceSchemaTokens->numMeshSmoothingPasses);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxIsosurfaceSchema::BuildRetained(
        const HdFloatDataSourceHandle &anisotropyMax,
        const HdFloatDataSourceHandle &anisotropyMin,
        const HdFloatDataSourceHandle &anisotropyRadius,
        const HdBoolDataSourceHandle &enableAnisotropy,
        const HdStringDataSourceHandle &gridFilteringPasses,
        const HdFloatDataSourceHandle &gridSmoothingRadiusRelativeToCellSize,
        const HdFloatDataSourceHandle &gridSpacing,
        const HdBoolDataSourceHandle &isoSurfaceEnabled,
        const HdFloatDataSourceHandle &isosurfaceLevel,
        const HdFloatDataSourceHandle &kernelRadius,
        const HdIntDataSourceHandle &maxSubgrids,
        const HdIntDataSourceHandle &maxTriangles,
        const HdIntDataSourceHandle &maxVertices,
        const HdIntDataSourceHandle &numMeshSmoothingPasses
)
{
    TfToken _names[14];
    HdDataSourceBaseHandle _values[14];

    size_t _count = 0;

    if (anisotropyMax) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->anisotropyMax;
        _values[_count++] = anisotropyMax;
    }

    if (anisotropyMin) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->anisotropyMin;
        _values[_count++] = anisotropyMin;
    }

    if (anisotropyRadius) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->anisotropyRadius;
        _values[_count++] = anisotropyRadius;
    }

    if (enableAnisotropy) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->enableAnisotropy;
        _values[_count++] = enableAnisotropy;
    }

    if (gridFilteringPasses) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->gridFilteringPasses;
        _values[_count++] = gridFilteringPasses;
    }

    if (gridSmoothingRadiusRelativeToCellSize) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->gridSmoothingRadiusRelativeToCellSize;
        _values[_count++] = gridSmoothingRadiusRelativeToCellSize;
    }

    if (gridSpacing) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->gridSpacing;
        _values[_count++] = gridSpacing;
    }

    if (isoSurfaceEnabled) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->isoSurfaceEnabled;
        _values[_count++] = isoSurfaceEnabled;
    }

    if (isosurfaceLevel) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->isosurfaceLevel;
        _values[_count++] = isosurfaceLevel;
    }

    if (kernelRadius) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->kernelRadius;
        _values[_count++] = kernelRadius;
    }

    if (maxSubgrids) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->maxSubgrids;
        _values[_count++] = maxSubgrids;
    }

    if (maxTriangles) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->maxTriangles;
        _values[_count++] = maxTriangles;
    }

    if (maxVertices) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->maxVertices;
        _values[_count++] = maxVertices;
    }

    if (numMeshSmoothingPasses) {
        _names[_count] = HdPhysxIsosurfaceSchemaTokens->numMeshSmoothingPasses;
        _values[_count++] = numMeshSmoothingPasses;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetAnisotropyMax(
    const HdFloatDataSourceHandle &anisotropyMax)
{
    _anisotropyMax = anisotropyMax;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetAnisotropyMin(
    const HdFloatDataSourceHandle &anisotropyMin)
{
    _anisotropyMin = anisotropyMin;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetAnisotropyRadius(
    const HdFloatDataSourceHandle &anisotropyRadius)
{
    _anisotropyRadius = anisotropyRadius;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetEnableAnisotropy(
    const HdBoolDataSourceHandle &enableAnisotropy)
{
    _enableAnisotropy = enableAnisotropy;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetGridFilteringPasses(
    const HdStringDataSourceHandle &gridFilteringPasses)
{
    _gridFilteringPasses = gridFilteringPasses;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetGridSmoothingRadiusRelativeToCellSize(
    const HdFloatDataSourceHandle &gridSmoothingRadiusRelativeToCellSize)
{
    _gridSmoothingRadiusRelativeToCellSize = gridSmoothingRadiusRelativeToCellSize;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetGridSpacing(
    const HdFloatDataSourceHandle &gridSpacing)
{
    _gridSpacing = gridSpacing;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetIsoSurfaceEnabled(
    const HdBoolDataSourceHandle &isoSurfaceEnabled)
{
    _isoSurfaceEnabled = isoSurfaceEnabled;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetIsosurfaceLevel(
    const HdFloatDataSourceHandle &isosurfaceLevel)
{
    _isosurfaceLevel = isosurfaceLevel;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetKernelRadius(
    const HdFloatDataSourceHandle &kernelRadius)
{
    _kernelRadius = kernelRadius;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetMaxSubgrids(
    const HdIntDataSourceHandle &maxSubgrids)
{
    _maxSubgrids = maxSubgrids;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetMaxTriangles(
    const HdIntDataSourceHandle &maxTriangles)
{
    _maxTriangles = maxTriangles;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetMaxVertices(
    const HdIntDataSourceHandle &maxVertices)
{
    _maxVertices = maxVertices;
    return *this;
}

HdPhysxIsosurfaceSchema::Builder &
HdPhysxIsosurfaceSchema::Builder::SetNumMeshSmoothingPasses(
    const HdIntDataSourceHandle &numMeshSmoothingPasses)
{
    _numMeshSmoothingPasses = numMeshSmoothingPasses;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxIsosurfaceSchema::Builder::Build()
{
    return HdPhysxIsosurfaceSchema::BuildRetained(
        _anisotropyMax,
        _anisotropyMin,
        _anisotropyRadius,
        _enableAnisotropy,
        _gridFilteringPasses,
        _gridSmoothingRadiusRelativeToCellSize,
        _gridSpacing,
        _isoSurfaceEnabled,
        _isosurfaceLevel,
        _kernelRadius,
        _maxSubgrids,
        _maxTriangles,
        _maxVertices,
        _numMeshSmoothingPasses
    );
}

/*static*/
HdPhysxIsosurfaceSchema
HdPhysxIsosurfaceSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxIsosurfaceSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxIsosurfaceSchemaTokens->physxIsosurface))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxIsosurfaceSchema::GetSchemaToken()
{
    return HdPhysxIsosurfaceSchemaTokens->physxIsosurface;
}

/*static*/
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetAnisotropyMaxLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->anisotropyMax);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetAnisotropyMinLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->anisotropyMin);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetAnisotropyRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->anisotropyRadius);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetEnableAnisotropyLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->enableAnisotropy);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetGridFilteringPassesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->gridFilteringPasses);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetGridSmoothingRadiusRelativeToCellSizeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->gridSmoothingRadiusRelativeToCellSize);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetGridSpacingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->gridSpacing);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetIsoSurfaceEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->isoSurfaceEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetIsosurfaceLevelLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->isosurfaceLevel);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetKernelRadiusLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->kernelRadius);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetMaxSubgridsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->maxSubgrids);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetMaxTrianglesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->maxTriangles);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetMaxVerticesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->maxVertices);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxIsosurfaceSchema::GetNumMeshSmoothingPassesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxIsosurfaceSchemaTokens->numMeshSmoothingPasses);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE