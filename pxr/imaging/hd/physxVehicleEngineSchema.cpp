//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleEngineSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleEngineSchemaTokens,
    HD_PHYSX_VEHICLE_ENGINE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetDampingRateFullThrottle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->dampingRateFullThrottle);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetDampingRateZeroThrottleClutchDisengaged() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchDisengaged);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetDampingRateZeroThrottleClutchEngaged() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchEngaged);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetIdleRotationSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->idleRotationSpeed);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetMaxRotationSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->maxRotationSpeed);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetMoi() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->moi);
}

HdFloatDataSourceHandle
HdPhysxVehicleEngineSchema::GetPeakTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleEngineSchemaTokens->peakTorque);
}

HdVec2fDataSourceHandle
HdPhysxVehicleEngineSchema::GetTorqueCurve() const
{
    return _GetTypedDataSource<HdVec2fDataSource>(
        HdPhysxVehicleEngineSchemaTokens->torqueCurve);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleEngineSchema::BuildRetained(
        const HdFloatDataSourceHandle &dampingRateFullThrottle,
        const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchDisengaged,
        const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchEngaged,
        const HdFloatDataSourceHandle &idleRotationSpeed,
        const HdFloatDataSourceHandle &maxRotationSpeed,
        const HdFloatDataSourceHandle &moi,
        const HdFloatDataSourceHandle &peakTorque,
        const HdVec2fDataSourceHandle &torqueCurve
)
{
    TfToken _names[8];
    HdDataSourceBaseHandle _values[8];

    size_t _count = 0;

    if (dampingRateFullThrottle) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->dampingRateFullThrottle;
        _values[_count++] = dampingRateFullThrottle;
    }

    if (dampingRateZeroThrottleClutchDisengaged) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchDisengaged;
        _values[_count++] = dampingRateZeroThrottleClutchDisengaged;
    }

    if (dampingRateZeroThrottleClutchEngaged) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchEngaged;
        _values[_count++] = dampingRateZeroThrottleClutchEngaged;
    }

    if (idleRotationSpeed) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->idleRotationSpeed;
        _values[_count++] = idleRotationSpeed;
    }

    if (maxRotationSpeed) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->maxRotationSpeed;
        _values[_count++] = maxRotationSpeed;
    }

    if (moi) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->moi;
        _values[_count++] = moi;
    }

    if (peakTorque) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->peakTorque;
        _values[_count++] = peakTorque;
    }

    if (torqueCurve) {
        _names[_count] = HdPhysxVehicleEngineSchemaTokens->torqueCurve;
        _values[_count++] = torqueCurve;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetDampingRateFullThrottle(
    const HdFloatDataSourceHandle &dampingRateFullThrottle)
{
    _dampingRateFullThrottle = dampingRateFullThrottle;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetDampingRateZeroThrottleClutchDisengaged(
    const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchDisengaged)
{
    _dampingRateZeroThrottleClutchDisengaged = dampingRateZeroThrottleClutchDisengaged;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetDampingRateZeroThrottleClutchEngaged(
    const HdFloatDataSourceHandle &dampingRateZeroThrottleClutchEngaged)
{
    _dampingRateZeroThrottleClutchEngaged = dampingRateZeroThrottleClutchEngaged;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetIdleRotationSpeed(
    const HdFloatDataSourceHandle &idleRotationSpeed)
{
    _idleRotationSpeed = idleRotationSpeed;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetMaxRotationSpeed(
    const HdFloatDataSourceHandle &maxRotationSpeed)
{
    _maxRotationSpeed = maxRotationSpeed;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetMoi(
    const HdFloatDataSourceHandle &moi)
{
    _moi = moi;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetPeakTorque(
    const HdFloatDataSourceHandle &peakTorque)
{
    _peakTorque = peakTorque;
    return *this;
}

HdPhysxVehicleEngineSchema::Builder &
HdPhysxVehicleEngineSchema::Builder::SetTorqueCurve(
    const HdVec2fDataSourceHandle &torqueCurve)
{
    _torqueCurve = torqueCurve;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleEngineSchema::Builder::Build()
{
    return HdPhysxVehicleEngineSchema::BuildRetained(
        _dampingRateFullThrottle,
        _dampingRateZeroThrottleClutchDisengaged,
        _dampingRateZeroThrottleClutchEngaged,
        _idleRotationSpeed,
        _maxRotationSpeed,
        _moi,
        _peakTorque,
        _torqueCurve
    );
}

/*static*/
HdPhysxVehicleEngineSchema
HdPhysxVehicleEngineSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleEngineSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleEngineSchemaTokens->physxVehicleEngine))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleEngineSchema::GetSchemaToken()
{
    return HdPhysxVehicleEngineSchemaTokens->physxVehicleEngine;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetDampingRateFullThrottleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->dampingRateFullThrottle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetDampingRateZeroThrottleClutchDisengagedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchDisengaged);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetDampingRateZeroThrottleClutchEngagedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->dampingRateZeroThrottleClutchEngaged);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetIdleRotationSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->idleRotationSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetMaxRotationSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->maxRotationSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetMoiLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->moi);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetPeakTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->peakTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleEngineSchema::GetTorqueCurveLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleEngineSchemaTokens->torqueCurve);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE