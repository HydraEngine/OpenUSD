//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/directMaterialBindingsSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdDirectMaterialBindingsSchemaTokens,
    HD_DIRECT_MATERIAL_BINDINGS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--

TfTokenVector
HdDirectMaterialBindingsSchema::GetPurposes()
{
    if (HdContainerDataSourceHandle h = GetContainer()) {
        return h->GetNames();
    }

    return {};
}

HdDirectMaterialBindingSchema
HdDirectMaterialBindingsSchema::GetDirectMaterialBinding()
{
    return GetDirectMaterialBinding(
            HdDirectMaterialBindingsSchemaTokens->allPurpose);
}

HdDirectMaterialBindingSchema
HdDirectMaterialBindingsSchema::GetDirectMaterialBinding(
        const TfToken &purpose)
{
    return HdDirectMaterialBindingSchema(
            _GetTypedDataSource<HdContainerDataSource>(purpose));
}

// --(END CUSTOM CODE: Schema Methods)--

/*static*/
HdDirectMaterialBindingsSchema
HdDirectMaterialBindingsSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdDirectMaterialBindingsSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdDirectMaterialBindingsSchemaTokens->directMaterialBindings))
        : nullptr);
}

/*static*/
const TfToken &
HdDirectMaterialBindingsSchema::GetSchemaToken()
{
    return HdDirectMaterialBindingsSchemaTokens->directMaterialBindings;
}

/*static*/
const HdDataSourceLocator &
HdDirectMaterialBindingsSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE