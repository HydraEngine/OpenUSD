//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleWheelControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleWheelControllerSchemaTokens,
    HD_PHYSX_VEHICLE_WHEEL_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleWheelControllerSchema::GetBrakeTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleWheelControllerSchemaTokens->brakeTorque);
}

HdFloatDataSourceHandle
HdPhysxVehicleWheelControllerSchema::GetDriveTorque() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleWheelControllerSchemaTokens->driveTorque);
}

HdFloatDataSourceHandle
HdPhysxVehicleWheelControllerSchema::GetSteerAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleWheelControllerSchemaTokens->steerAngle);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleWheelControllerSchema::BuildRetained(
        const HdFloatDataSourceHandle &brakeTorque,
        const HdFloatDataSourceHandle &driveTorque,
        const HdFloatDataSourceHandle &steerAngle
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (brakeTorque) {
        _names[_count] = HdPhysxVehicleWheelControllerSchemaTokens->brakeTorque;
        _values[_count++] = brakeTorque;
    }

    if (driveTorque) {
        _names[_count] = HdPhysxVehicleWheelControllerSchemaTokens->driveTorque;
        _values[_count++] = driveTorque;
    }

    if (steerAngle) {
        _names[_count] = HdPhysxVehicleWheelControllerSchemaTokens->steerAngle;
        _values[_count++] = steerAngle;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleWheelControllerSchema::Builder &
HdPhysxVehicleWheelControllerSchema::Builder::SetBrakeTorque(
    const HdFloatDataSourceHandle &brakeTorque)
{
    _brakeTorque = brakeTorque;
    return *this;
}

HdPhysxVehicleWheelControllerSchema::Builder &
HdPhysxVehicleWheelControllerSchema::Builder::SetDriveTorque(
    const HdFloatDataSourceHandle &driveTorque)
{
    _driveTorque = driveTorque;
    return *this;
}

HdPhysxVehicleWheelControllerSchema::Builder &
HdPhysxVehicleWheelControllerSchema::Builder::SetSteerAngle(
    const HdFloatDataSourceHandle &steerAngle)
{
    _steerAngle = steerAngle;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleWheelControllerSchema::Builder::Build()
{
    return HdPhysxVehicleWheelControllerSchema::BuildRetained(
        _brakeTorque,
        _driveTorque,
        _steerAngle
    );
}

/*static*/
HdPhysxVehicleWheelControllerSchema
HdPhysxVehicleWheelControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleWheelControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleWheelControllerSchemaTokens->physxVehicleWheelController))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleWheelControllerSchema::GetSchemaToken()
{
    return HdPhysxVehicleWheelControllerSchemaTokens->physxVehicleWheelController;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleWheelControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleWheelControllerSchema::GetBrakeTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleWheelControllerSchemaTokens->brakeTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleWheelControllerSchema::GetDriveTorqueLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleWheelControllerSchemaTokens->driveTorque);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleWheelControllerSchema::GetSteerAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleWheelControllerSchemaTokens->steerAngle);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE