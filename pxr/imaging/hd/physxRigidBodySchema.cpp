//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxRigidBodySchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxRigidBodySchemaTokens,
    HD_PHYSX_RIGID_BODY_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetAngularDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->angularDamping);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetCfmScale() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->cfmScale);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetContactSlopCoefficient() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->contactSlopCoefficient);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetDisableGravity() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->disableGravity);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetEnableCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->enableCCD);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetEnableGyroscopicForces() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->enableGyroscopicForces);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetEnableSpeculativeCCD() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->enableSpeculativeCCD);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetLinearDamping() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->linearDamping);
}

HdIntDataSourceHandle
HdPhysxRigidBodySchema::GetLockedPosAxis() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxRigidBodySchemaTokens->lockedPosAxis);
}

HdIntDataSourceHandle
HdPhysxRigidBodySchema::GetLockedRotAxis() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxRigidBodySchemaTokens->lockedRotAxis);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetMaxAngularVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->maxAngularVelocity);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetMaxContactImpulse() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->maxContactImpulse);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetMaxDepenetrationVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->maxDepenetrationVelocity);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetMaxLinearVelocity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->maxLinearVelocity);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetRetainAccelerations() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->retainAccelerations);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetSleepThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->sleepThreshold);
}

HdBoolDataSourceHandle
HdPhysxRigidBodySchema::GetSolveContact() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdPhysxRigidBodySchemaTokens->solveContact);
}

HdIntDataSourceHandle
HdPhysxRigidBodySchema::GetSolverPositionIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxRigidBodySchemaTokens->solverPositionIterationCount);
}

HdIntDataSourceHandle
HdPhysxRigidBodySchema::GetSolverVelocityIterationCount() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxRigidBodySchemaTokens->solverVelocityIterationCount);
}

HdFloatDataSourceHandle
HdPhysxRigidBodySchema::GetStabilizationThreshold() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxRigidBodySchemaTokens->stabilizationThreshold);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxRigidBodySchema::BuildRetained(
        const HdFloatDataSourceHandle &angularDamping,
        const HdFloatDataSourceHandle &cfmScale,
        const HdFloatDataSourceHandle &contactSlopCoefficient,
        const HdBoolDataSourceHandle &disableGravity,
        const HdBoolDataSourceHandle &enableCCD,
        const HdBoolDataSourceHandle &enableGyroscopicForces,
        const HdBoolDataSourceHandle &enableSpeculativeCCD,
        const HdFloatDataSourceHandle &linearDamping,
        const HdIntDataSourceHandle &lockedPosAxis,
        const HdIntDataSourceHandle &lockedRotAxis,
        const HdFloatDataSourceHandle &maxAngularVelocity,
        const HdFloatDataSourceHandle &maxContactImpulse,
        const HdFloatDataSourceHandle &maxDepenetrationVelocity,
        const HdFloatDataSourceHandle &maxLinearVelocity,
        const HdBoolDataSourceHandle &retainAccelerations,
        const HdFloatDataSourceHandle &sleepThreshold,
        const HdBoolDataSourceHandle &solveContact,
        const HdIntDataSourceHandle &solverPositionIterationCount,
        const HdIntDataSourceHandle &solverVelocityIterationCount,
        const HdFloatDataSourceHandle &stabilizationThreshold
)
{
    TfToken _names[20];
    HdDataSourceBaseHandle _values[20];

    size_t _count = 0;

    if (angularDamping) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->angularDamping;
        _values[_count++] = angularDamping;
    }

    if (cfmScale) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->cfmScale;
        _values[_count++] = cfmScale;
    }

    if (contactSlopCoefficient) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->contactSlopCoefficient;
        _values[_count++] = contactSlopCoefficient;
    }

    if (disableGravity) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->disableGravity;
        _values[_count++] = disableGravity;
    }

    if (enableCCD) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->enableCCD;
        _values[_count++] = enableCCD;
    }

    if (enableGyroscopicForces) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->enableGyroscopicForces;
        _values[_count++] = enableGyroscopicForces;
    }

    if (enableSpeculativeCCD) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->enableSpeculativeCCD;
        _values[_count++] = enableSpeculativeCCD;
    }

    if (linearDamping) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->linearDamping;
        _values[_count++] = linearDamping;
    }

    if (lockedPosAxis) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->lockedPosAxis;
        _values[_count++] = lockedPosAxis;
    }

    if (lockedRotAxis) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->lockedRotAxis;
        _values[_count++] = lockedRotAxis;
    }

    if (maxAngularVelocity) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->maxAngularVelocity;
        _values[_count++] = maxAngularVelocity;
    }

    if (maxContactImpulse) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->maxContactImpulse;
        _values[_count++] = maxContactImpulse;
    }

    if (maxDepenetrationVelocity) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->maxDepenetrationVelocity;
        _values[_count++] = maxDepenetrationVelocity;
    }

    if (maxLinearVelocity) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->maxLinearVelocity;
        _values[_count++] = maxLinearVelocity;
    }

    if (retainAccelerations) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->retainAccelerations;
        _values[_count++] = retainAccelerations;
    }

    if (sleepThreshold) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->sleepThreshold;
        _values[_count++] = sleepThreshold;
    }

    if (solveContact) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->solveContact;
        _values[_count++] = solveContact;
    }

    if (solverPositionIterationCount) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->solverPositionIterationCount;
        _values[_count++] = solverPositionIterationCount;
    }

    if (solverVelocityIterationCount) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->solverVelocityIterationCount;
        _values[_count++] = solverVelocityIterationCount;
    }

    if (stabilizationThreshold) {
        _names[_count] = HdPhysxRigidBodySchemaTokens->stabilizationThreshold;
        _values[_count++] = stabilizationThreshold;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetAngularDamping(
    const HdFloatDataSourceHandle &angularDamping)
{
    _angularDamping = angularDamping;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetCfmScale(
    const HdFloatDataSourceHandle &cfmScale)
{
    _cfmScale = cfmScale;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetContactSlopCoefficient(
    const HdFloatDataSourceHandle &contactSlopCoefficient)
{
    _contactSlopCoefficient = contactSlopCoefficient;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetDisableGravity(
    const HdBoolDataSourceHandle &disableGravity)
{
    _disableGravity = disableGravity;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetEnableCCD(
    const HdBoolDataSourceHandle &enableCCD)
{
    _enableCCD = enableCCD;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetEnableGyroscopicForces(
    const HdBoolDataSourceHandle &enableGyroscopicForces)
{
    _enableGyroscopicForces = enableGyroscopicForces;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetEnableSpeculativeCCD(
    const HdBoolDataSourceHandle &enableSpeculativeCCD)
{
    _enableSpeculativeCCD = enableSpeculativeCCD;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetLinearDamping(
    const HdFloatDataSourceHandle &linearDamping)
{
    _linearDamping = linearDamping;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetLockedPosAxis(
    const HdIntDataSourceHandle &lockedPosAxis)
{
    _lockedPosAxis = lockedPosAxis;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetLockedRotAxis(
    const HdIntDataSourceHandle &lockedRotAxis)
{
    _lockedRotAxis = lockedRotAxis;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetMaxAngularVelocity(
    const HdFloatDataSourceHandle &maxAngularVelocity)
{
    _maxAngularVelocity = maxAngularVelocity;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetMaxContactImpulse(
    const HdFloatDataSourceHandle &maxContactImpulse)
{
    _maxContactImpulse = maxContactImpulse;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetMaxDepenetrationVelocity(
    const HdFloatDataSourceHandle &maxDepenetrationVelocity)
{
    _maxDepenetrationVelocity = maxDepenetrationVelocity;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetMaxLinearVelocity(
    const HdFloatDataSourceHandle &maxLinearVelocity)
{
    _maxLinearVelocity = maxLinearVelocity;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetRetainAccelerations(
    const HdBoolDataSourceHandle &retainAccelerations)
{
    _retainAccelerations = retainAccelerations;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetSleepThreshold(
    const HdFloatDataSourceHandle &sleepThreshold)
{
    _sleepThreshold = sleepThreshold;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetSolveContact(
    const HdBoolDataSourceHandle &solveContact)
{
    _solveContact = solveContact;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetSolverPositionIterationCount(
    const HdIntDataSourceHandle &solverPositionIterationCount)
{
    _solverPositionIterationCount = solverPositionIterationCount;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetSolverVelocityIterationCount(
    const HdIntDataSourceHandle &solverVelocityIterationCount)
{
    _solverVelocityIterationCount = solverVelocityIterationCount;
    return *this;
}

HdPhysxRigidBodySchema::Builder &
HdPhysxRigidBodySchema::Builder::SetStabilizationThreshold(
    const HdFloatDataSourceHandle &stabilizationThreshold)
{
    _stabilizationThreshold = stabilizationThreshold;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxRigidBodySchema::Builder::Build()
{
    return HdPhysxRigidBodySchema::BuildRetained(
        _angularDamping,
        _cfmScale,
        _contactSlopCoefficient,
        _disableGravity,
        _enableCCD,
        _enableGyroscopicForces,
        _enableSpeculativeCCD,
        _linearDamping,
        _lockedPosAxis,
        _lockedRotAxis,
        _maxAngularVelocity,
        _maxContactImpulse,
        _maxDepenetrationVelocity,
        _maxLinearVelocity,
        _retainAccelerations,
        _sleepThreshold,
        _solveContact,
        _solverPositionIterationCount,
        _solverVelocityIterationCount,
        _stabilizationThreshold
    );
}

/*static*/
HdPhysxRigidBodySchema
HdPhysxRigidBodySchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxRigidBodySchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxRigidBodySchemaTokens->physxRigidBody))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxRigidBodySchema::GetSchemaToken()
{
    return HdPhysxRigidBodySchemaTokens->physxRigidBody;
}

/*static*/
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetAngularDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->angularDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetCfmScaleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->cfmScale);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetContactSlopCoefficientLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->contactSlopCoefficient);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetDisableGravityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->disableGravity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetEnableCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->enableCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetEnableGyroscopicForcesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->enableGyroscopicForces);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetEnableSpeculativeCCDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->enableSpeculativeCCD);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetLinearDampingLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->linearDamping);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetLockedPosAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->lockedPosAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetLockedRotAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->lockedRotAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetMaxAngularVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->maxAngularVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetMaxContactImpulseLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->maxContactImpulse);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetMaxDepenetrationVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->maxDepenetrationVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetMaxLinearVelocityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->maxLinearVelocity);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetRetainAccelerationsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->retainAccelerations);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetSleepThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->sleepThreshold);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetSolveContactLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->solveContact);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetSolverPositionIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->solverPositionIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetSolverVelocityIterationCountLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->solverVelocityIterationCount);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxRigidBodySchema::GetStabilizationThresholdLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxRigidBodySchemaTokens->stabilizationThreshold);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE