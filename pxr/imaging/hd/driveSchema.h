//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_IMAGING_HD_DRIVE_SCHEMA_H
#define PXR_IMAGING_HD_DRIVE_SCHEMA_H

/// \file

#include "pxr/imaging/hd/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
// --(END CUSTOM CODE: Declares)--

#define HD_DRIVE_SCHEMA_TOKENS \
    (drive) \
    (name) \
    (type) \
    (maxForce) \
    (targetPosition) \
    (targetVelocity) \
    (damping) \
    (stiffness) \

TF_DECLARE_PUBLIC_TOKENS(HdDriveSchemaTokens, HD_API,
    HD_DRIVE_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class HdDriveSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    HdDriveSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "drive" from the parent container and constructs a
    /// HdDriveSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    HD_API
    static HdDriveSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{

    HD_API
    HdTokenDataSourceHandle GetName() const;

    HD_API
    HdTokenDataSourceHandle GetType() const;

    HD_API
    HdFloatDataSourceHandle GetMaxForce() const;

    HD_API
    HdFloatDataSourceHandle GetTargetPosition() const;

    HD_API
    HdFloatDataSourceHandle GetTargetVelocity() const;

    HD_API
    HdFloatDataSourceHandle GetDamping() const;

    HD_API
    HdFloatDataSourceHandle GetStiffness() const; 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    HD_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    HD_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate name.
    HD_API
    static const HdDataSourceLocator &GetNameLocator();

    /// Prim-level relative data source locator to locate type.
    HD_API
    static const HdDataSourceLocator &GetTypeLocator();

    /// Prim-level relative data source locator to locate maxForce.
    HD_API
    static const HdDataSourceLocator &GetMaxForceLocator();

    /// Prim-level relative data source locator to locate targetPosition.
    HD_API
    static const HdDataSourceLocator &GetTargetPositionLocator();

    /// Prim-level relative data source locator to locate targetVelocity.
    HD_API
    static const HdDataSourceLocator &GetTargetVelocityLocator();

    /// Prim-level relative data source locator to locate damping.
    HD_API
    static const HdDataSourceLocator &GetDampingLocator();

    /// Prim-level relative data source locator to locate stiffness.
    HD_API
    static const HdDataSourceLocator &GetStiffnessLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    HD_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdTokenDataSourceHandle &name,
        const HdTokenDataSourceHandle &type,
        const HdFloatDataSourceHandle &maxForce,
        const HdFloatDataSourceHandle &targetPosition,
        const HdFloatDataSourceHandle &targetVelocity,
        const HdFloatDataSourceHandle &damping,
        const HdFloatDataSourceHandle &stiffness
    );

    /// \class HdDriveSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        HD_API
        Builder &SetName(
            const HdTokenDataSourceHandle &name);
        HD_API
        Builder &SetType(
            const HdTokenDataSourceHandle &type);
        HD_API
        Builder &SetMaxForce(
            const HdFloatDataSourceHandle &maxForce);
        HD_API
        Builder &SetTargetPosition(
            const HdFloatDataSourceHandle &targetPosition);
        HD_API
        Builder &SetTargetVelocity(
            const HdFloatDataSourceHandle &targetVelocity);
        HD_API
        Builder &SetDamping(
            const HdFloatDataSourceHandle &damping);
        HD_API
        Builder &SetStiffness(
            const HdFloatDataSourceHandle &stiffness);

        /// Returns a container data source containing the members set thus far.
        HD_API
        HdContainerDataSourceHandle Build();

    private:
        HdTokenDataSourceHandle _name;
        HdTokenDataSourceHandle _type;
        HdFloatDataSourceHandle _maxForce;
        HdFloatDataSourceHandle _targetPosition;
        HdFloatDataSourceHandle _targetVelocity;
        HdFloatDataSourceHandle _damping;
        HdFloatDataSourceHandle _stiffness;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif