//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxPhysicsRackAndPinionJointSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxPhysicsRackAndPinionJointSchemaTokens,
    HD_PHYSX_PHYSICS_RACK_AND_PINION_JOINT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxPhysicsRackAndPinionJointSchema::GetRatio() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxPhysicsRackAndPinionJointSchemaTokens->ratio);
}

HdPathArrayDataSourceHandle
HdPhysxPhysicsRackAndPinionJointSchema::GetHinge() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        HdPhysxPhysicsRackAndPinionJointSchemaTokens->hinge);
}

HdPathArrayDataSourceHandle
HdPhysxPhysicsRackAndPinionJointSchema::GetPrismatic() const
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        HdPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxPhysicsRackAndPinionJointSchema::BuildRetained(
        const HdFloatDataSourceHandle &ratio,
        const HdPathArrayDataSourceHandle &hinge,
        const HdPathArrayDataSourceHandle &prismatic
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (ratio) {
        _names[_count] = HdPhysxPhysicsRackAndPinionJointSchemaTokens->ratio;
        _values[_count++] = ratio;
    }

    if (hinge) {
        _names[_count] = HdPhysxPhysicsRackAndPinionJointSchemaTokens->hinge;
        _values[_count++] = hinge;
    }

    if (prismatic) {
        _names[_count] = HdPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic;
        _values[_count++] = prismatic;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxPhysicsRackAndPinionJointSchema::Builder &
HdPhysxPhysicsRackAndPinionJointSchema::Builder::SetRatio(
    const HdFloatDataSourceHandle &ratio)
{
    _ratio = ratio;
    return *this;
}

HdPhysxPhysicsRackAndPinionJointSchema::Builder &
HdPhysxPhysicsRackAndPinionJointSchema::Builder::SetHinge(
    const HdPathArrayDataSourceHandle &hinge)
{
    _hinge = hinge;
    return *this;
}

HdPhysxPhysicsRackAndPinionJointSchema::Builder &
HdPhysxPhysicsRackAndPinionJointSchema::Builder::SetPrismatic(
    const HdPathArrayDataSourceHandle &prismatic)
{
    _prismatic = prismatic;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxPhysicsRackAndPinionJointSchema::Builder::Build()
{
    return HdPhysxPhysicsRackAndPinionJointSchema::BuildRetained(
        _ratio,
        _hinge,
        _prismatic
    );
}

/*static*/
HdPhysxPhysicsRackAndPinionJointSchema
HdPhysxPhysicsRackAndPinionJointSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxPhysicsRackAndPinionJointSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxPhysicsRackAndPinionJointSchemaTokens->physxPhysicsRackAndPinionJoint))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxPhysicsRackAndPinionJointSchema::GetSchemaToken()
{
    return HdPhysxPhysicsRackAndPinionJointSchemaTokens->physxPhysicsRackAndPinionJoint;
}

/*static*/
const HdDataSourceLocator &
HdPhysxPhysicsRackAndPinionJointSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsRackAndPinionJointSchema::GetRatioLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsRackAndPinionJointSchemaTokens->ratio);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsRackAndPinionJointSchema::GetHingeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsRackAndPinionJointSchemaTokens->hinge);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxPhysicsRackAndPinionJointSchema::GetPrismaticLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxPhysicsRackAndPinionJointSchemaTokens->prismatic);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE