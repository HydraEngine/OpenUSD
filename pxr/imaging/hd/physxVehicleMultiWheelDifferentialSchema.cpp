//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleMultiWheelDifferentialSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleMultiWheelDifferentialSchemaTokens,
    HD_PHYSX_VEHICLE_MULTI_WHEEL_DIFFERENTIAL_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatArrayDataSourceHandle
HdPhysxVehicleMultiWheelDifferentialSchema::GetAverageWheelSpeedRatios() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        HdPhysxVehicleMultiWheelDifferentialSchemaTokens->averageWheelSpeedRatios);
}

HdFloatArrayDataSourceHandle
HdPhysxVehicleMultiWheelDifferentialSchema::GetTorqueRatios() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        HdPhysxVehicleMultiWheelDifferentialSchemaTokens->torqueRatios);
}

HdIntArrayDataSourceHandle
HdPhysxVehicleMultiWheelDifferentialSchema::GetWheels() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdPhysxVehicleMultiWheelDifferentialSchemaTokens->wheels);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleMultiWheelDifferentialSchema::BuildRetained(
        const HdFloatArrayDataSourceHandle &averageWheelSpeedRatios,
        const HdFloatArrayDataSourceHandle &torqueRatios,
        const HdIntArrayDataSourceHandle &wheels
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (averageWheelSpeedRatios) {
        _names[_count] = HdPhysxVehicleMultiWheelDifferentialSchemaTokens->averageWheelSpeedRatios;
        _values[_count++] = averageWheelSpeedRatios;
    }

    if (torqueRatios) {
        _names[_count] = HdPhysxVehicleMultiWheelDifferentialSchemaTokens->torqueRatios;
        _values[_count++] = torqueRatios;
    }

    if (wheels) {
        _names[_count] = HdPhysxVehicleMultiWheelDifferentialSchemaTokens->wheels;
        _values[_count++] = wheels;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleMultiWheelDifferentialSchema::Builder &
HdPhysxVehicleMultiWheelDifferentialSchema::Builder::SetAverageWheelSpeedRatios(
    const HdFloatArrayDataSourceHandle &averageWheelSpeedRatios)
{
    _averageWheelSpeedRatios = averageWheelSpeedRatios;
    return *this;
}

HdPhysxVehicleMultiWheelDifferentialSchema::Builder &
HdPhysxVehicleMultiWheelDifferentialSchema::Builder::SetTorqueRatios(
    const HdFloatArrayDataSourceHandle &torqueRatios)
{
    _torqueRatios = torqueRatios;
    return *this;
}

HdPhysxVehicleMultiWheelDifferentialSchema::Builder &
HdPhysxVehicleMultiWheelDifferentialSchema::Builder::SetWheels(
    const HdIntArrayDataSourceHandle &wheels)
{
    _wheels = wheels;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleMultiWheelDifferentialSchema::Builder::Build()
{
    return HdPhysxVehicleMultiWheelDifferentialSchema::BuildRetained(
        _averageWheelSpeedRatios,
        _torqueRatios,
        _wheels
    );
}

/*static*/
HdPhysxVehicleMultiWheelDifferentialSchema
HdPhysxVehicleMultiWheelDifferentialSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleMultiWheelDifferentialSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleMultiWheelDifferentialSchemaTokens->physxVehicleMultiWheelDifferential))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleMultiWheelDifferentialSchema::GetSchemaToken()
{
    return HdPhysxVehicleMultiWheelDifferentialSchemaTokens->physxVehicleMultiWheelDifferential;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleMultiWheelDifferentialSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleMultiWheelDifferentialSchema::GetAverageWheelSpeedRatiosLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleMultiWheelDifferentialSchemaTokens->averageWheelSpeedRatios);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleMultiWheelDifferentialSchema::GetTorqueRatiosLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleMultiWheelDifferentialSchemaTokens->torqueRatios);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleMultiWheelDifferentialSchema::GetWheelsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleMultiWheelDifferentialSchemaTokens->wheels);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE