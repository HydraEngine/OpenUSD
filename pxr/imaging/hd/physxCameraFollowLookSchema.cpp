//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxCameraFollowLookSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxCameraFollowLookSchemaTokens,
    HD_PHYSX_CAMERA_FOLLOW_LOOK_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetDownHillGroundAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->downHillGroundAngle);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetDownHillGroundPitch() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->downHillGroundPitch);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetFollowReverseDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->followReverseDistance);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetFollowReverseSpeed() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->followReverseSpeed);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetUpHillGroundAngle() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->upHillGroundAngle);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetUpHillGroundPitch() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->upHillGroundPitch);
}

HdFloatDataSourceHandle
HdPhysxCameraFollowLookSchema::GetVelocityBlendTimeConstant() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCameraFollowLookSchemaTokens->velocityBlendTimeConstant);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxCameraFollowLookSchema::BuildRetained(
        const HdFloatDataSourceHandle &downHillGroundAngle,
        const HdFloatDataSourceHandle &downHillGroundPitch,
        const HdFloatDataSourceHandle &followReverseDistance,
        const HdFloatDataSourceHandle &followReverseSpeed,
        const HdFloatDataSourceHandle &upHillGroundAngle,
        const HdFloatDataSourceHandle &upHillGroundPitch,
        const HdFloatDataSourceHandle &velocityBlendTimeConstant
)
{
    TfToken _names[7];
    HdDataSourceBaseHandle _values[7];

    size_t _count = 0;

    if (downHillGroundAngle) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->downHillGroundAngle;
        _values[_count++] = downHillGroundAngle;
    }

    if (downHillGroundPitch) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->downHillGroundPitch;
        _values[_count++] = downHillGroundPitch;
    }

    if (followReverseDistance) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->followReverseDistance;
        _values[_count++] = followReverseDistance;
    }

    if (followReverseSpeed) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->followReverseSpeed;
        _values[_count++] = followReverseSpeed;
    }

    if (upHillGroundAngle) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->upHillGroundAngle;
        _values[_count++] = upHillGroundAngle;
    }

    if (upHillGroundPitch) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->upHillGroundPitch;
        _values[_count++] = upHillGroundPitch;
    }

    if (velocityBlendTimeConstant) {
        _names[_count] = HdPhysxCameraFollowLookSchemaTokens->velocityBlendTimeConstant;
        _values[_count++] = velocityBlendTimeConstant;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetDownHillGroundAngle(
    const HdFloatDataSourceHandle &downHillGroundAngle)
{
    _downHillGroundAngle = downHillGroundAngle;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetDownHillGroundPitch(
    const HdFloatDataSourceHandle &downHillGroundPitch)
{
    _downHillGroundPitch = downHillGroundPitch;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetFollowReverseDistance(
    const HdFloatDataSourceHandle &followReverseDistance)
{
    _followReverseDistance = followReverseDistance;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetFollowReverseSpeed(
    const HdFloatDataSourceHandle &followReverseSpeed)
{
    _followReverseSpeed = followReverseSpeed;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetUpHillGroundAngle(
    const HdFloatDataSourceHandle &upHillGroundAngle)
{
    _upHillGroundAngle = upHillGroundAngle;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetUpHillGroundPitch(
    const HdFloatDataSourceHandle &upHillGroundPitch)
{
    _upHillGroundPitch = upHillGroundPitch;
    return *this;
}

HdPhysxCameraFollowLookSchema::Builder &
HdPhysxCameraFollowLookSchema::Builder::SetVelocityBlendTimeConstant(
    const HdFloatDataSourceHandle &velocityBlendTimeConstant)
{
    _velocityBlendTimeConstant = velocityBlendTimeConstant;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxCameraFollowLookSchema::Builder::Build()
{
    return HdPhysxCameraFollowLookSchema::BuildRetained(
        _downHillGroundAngle,
        _downHillGroundPitch,
        _followReverseDistance,
        _followReverseSpeed,
        _upHillGroundAngle,
        _upHillGroundPitch,
        _velocityBlendTimeConstant
    );
}

/*static*/
HdPhysxCameraFollowLookSchema
HdPhysxCameraFollowLookSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxCameraFollowLookSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxCameraFollowLookSchemaTokens->physxCameraFollowLook))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxCameraFollowLookSchema::GetSchemaToken()
{
    return HdPhysxCameraFollowLookSchemaTokens->physxCameraFollowLook;
}

/*static*/
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetDownHillGroundAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->downHillGroundAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetDownHillGroundPitchLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->downHillGroundPitch);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetFollowReverseDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->followReverseDistance);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetFollowReverseSpeedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->followReverseSpeed);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetUpHillGroundAngleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->upHillGroundAngle);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetUpHillGroundPitchLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->upHillGroundPitch);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCameraFollowLookSchema::GetVelocityBlendTimeConstantLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCameraFollowLookSchemaTokens->velocityBlendTimeConstant);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE