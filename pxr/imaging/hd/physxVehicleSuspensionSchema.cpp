//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleSuspensionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleSuspensionSchemaTokens,
    HD_PHYSX_VEHICLE_SUSPENSION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleSuspensionSchema::GetSpringDamperRate() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleSuspensionSchemaTokens->springDamperRate);
}

HdFloatDataSourceHandle
HdPhysxVehicleSuspensionSchema::GetSpringStrength() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleSuspensionSchemaTokens->springStrength);
}

HdFloatDataSourceHandle
HdPhysxVehicleSuspensionSchema::GetSprungMass() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleSuspensionSchemaTokens->sprungMass);
}

HdFloatDataSourceHandle
HdPhysxVehicleSuspensionSchema::GetTravelDistance() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleSuspensionSchemaTokens->travelDistance);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleSuspensionSchema::BuildRetained(
        const HdFloatDataSourceHandle &springDamperRate,
        const HdFloatDataSourceHandle &springStrength,
        const HdFloatDataSourceHandle &sprungMass,
        const HdFloatDataSourceHandle &travelDistance
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (springDamperRate) {
        _names[_count] = HdPhysxVehicleSuspensionSchemaTokens->springDamperRate;
        _values[_count++] = springDamperRate;
    }

    if (springStrength) {
        _names[_count] = HdPhysxVehicleSuspensionSchemaTokens->springStrength;
        _values[_count++] = springStrength;
    }

    if (sprungMass) {
        _names[_count] = HdPhysxVehicleSuspensionSchemaTokens->sprungMass;
        _values[_count++] = sprungMass;
    }

    if (travelDistance) {
        _names[_count] = HdPhysxVehicleSuspensionSchemaTokens->travelDistance;
        _values[_count++] = travelDistance;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleSuspensionSchema::Builder &
HdPhysxVehicleSuspensionSchema::Builder::SetSpringDamperRate(
    const HdFloatDataSourceHandle &springDamperRate)
{
    _springDamperRate = springDamperRate;
    return *this;
}

HdPhysxVehicleSuspensionSchema::Builder &
HdPhysxVehicleSuspensionSchema::Builder::SetSpringStrength(
    const HdFloatDataSourceHandle &springStrength)
{
    _springStrength = springStrength;
    return *this;
}

HdPhysxVehicleSuspensionSchema::Builder &
HdPhysxVehicleSuspensionSchema::Builder::SetSprungMass(
    const HdFloatDataSourceHandle &sprungMass)
{
    _sprungMass = sprungMass;
    return *this;
}

HdPhysxVehicleSuspensionSchema::Builder &
HdPhysxVehicleSuspensionSchema::Builder::SetTravelDistance(
    const HdFloatDataSourceHandle &travelDistance)
{
    _travelDistance = travelDistance;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleSuspensionSchema::Builder::Build()
{
    return HdPhysxVehicleSuspensionSchema::BuildRetained(
        _springDamperRate,
        _springStrength,
        _sprungMass,
        _travelDistance
    );
}

/*static*/
HdPhysxVehicleSuspensionSchema
HdPhysxVehicleSuspensionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleSuspensionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleSuspensionSchemaTokens->physxVehicleSuspension))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleSuspensionSchema::GetSchemaToken()
{
    return HdPhysxVehicleSuspensionSchemaTokens->physxVehicleSuspension;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleSuspensionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSuspensionSchema::GetSpringDamperRateLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSuspensionSchemaTokens->springDamperRate);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSuspensionSchema::GetSpringStrengthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSuspensionSchemaTokens->springStrength);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSuspensionSchema::GetSprungMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSuspensionSchemaTokens->sprungMass);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleSuspensionSchema::GetTravelDistanceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleSuspensionSchemaTokens->travelDistance);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE