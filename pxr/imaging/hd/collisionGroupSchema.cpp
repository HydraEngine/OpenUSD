//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/collisionGroupSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdCollisionGroupSchemaTokens,
    HD_COLLISION_GROUP_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdStringDataSourceHandle
HdCollisionGroupSchema::GetMergeGroupName() const
{
    return _GetTypedDataSource<HdStringDataSource>(
        HdCollisionGroupSchemaTokens->mergeGroupName);
}

HdBoolDataSourceHandle
HdCollisionGroupSchema::GetInvertFilteredGroups() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdCollisionGroupSchemaTokens->invertFilteredGroups);
}

HdPathDataSourceHandle
HdCollisionGroupSchema::GetFilteredGroups() const
{
    return _GetTypedDataSource<HdPathDataSource>(
        HdCollisionGroupSchemaTokens->filteredGroups);
}

/*static*/
HdContainerDataSourceHandle
HdCollisionGroupSchema::BuildRetained(
        const HdStringDataSourceHandle &mergeGroupName,
        const HdBoolDataSourceHandle &invertFilteredGroups,
        const HdPathDataSourceHandle &filteredGroups
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (mergeGroupName) {
        _names[_count] = HdCollisionGroupSchemaTokens->mergeGroupName;
        _values[_count++] = mergeGroupName;
    }

    if (invertFilteredGroups) {
        _names[_count] = HdCollisionGroupSchemaTokens->invertFilteredGroups;
        _values[_count++] = invertFilteredGroups;
    }

    if (filteredGroups) {
        _names[_count] = HdCollisionGroupSchemaTokens->filteredGroups;
        _values[_count++] = filteredGroups;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdCollisionGroupSchema::Builder &
HdCollisionGroupSchema::Builder::SetMergeGroupName(
    const HdStringDataSourceHandle &mergeGroupName)
{
    _mergeGroupName = mergeGroupName;
    return *this;
}

HdCollisionGroupSchema::Builder &
HdCollisionGroupSchema::Builder::SetInvertFilteredGroups(
    const HdBoolDataSourceHandle &invertFilteredGroups)
{
    _invertFilteredGroups = invertFilteredGroups;
    return *this;
}

HdCollisionGroupSchema::Builder &
HdCollisionGroupSchema::Builder::SetFilteredGroups(
    const HdPathDataSourceHandle &filteredGroups)
{
    _filteredGroups = filteredGroups;
    return *this;
}

HdContainerDataSourceHandle
HdCollisionGroupSchema::Builder::Build()
{
    return HdCollisionGroupSchema::BuildRetained(
        _mergeGroupName,
        _invertFilteredGroups,
        _filteredGroups
    );
}

/*static*/
HdCollisionGroupSchema
HdCollisionGroupSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdCollisionGroupSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdCollisionGroupSchemaTokens->collisionGroup))
        : nullptr);
}

/*static*/
const TfToken &
HdCollisionGroupSchema::GetSchemaToken()
{
    return HdCollisionGroupSchemaTokens->collisionGroup;
}

/*static*/
const HdDataSourceLocator &
HdCollisionGroupSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdCollisionGroupSchema::GetMergeGroupNameLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdCollisionGroupSchemaTokens->mergeGroupName);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdCollisionGroupSchema::GetInvertFilteredGroupsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdCollisionGroupSchemaTokens->invertFilteredGroups);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdCollisionGroupSchema::GetFilteredGroupsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdCollisionGroupSchemaTokens->filteredGroups);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE