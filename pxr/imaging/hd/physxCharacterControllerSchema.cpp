//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxCharacterControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxCharacterControllerSchemaTokens,
    HD_PHYSX_CHARACTER_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
HdPhysxCharacterControllerSchema::GetClimbingMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxCharacterControllerSchemaTokens->climbingMode);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetContactOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->contactOffset);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetInvisibleWallHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetMaxJumpHeight() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->maxJumpHeight);
}

HdVec3fDataSourceHandle
HdPhysxCharacterControllerSchema::GetMoveTarget() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdPhysxCharacterControllerSchemaTokens->moveTarget);
}

HdTokenDataSourceHandle
HdPhysxCharacterControllerSchema::GetNonWalkableMode() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxCharacterControllerSchemaTokens->nonWalkableMode);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetScaleCoeff() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->scaleCoeff);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetSlopeLimit() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->slopeLimit);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetStepOffset() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->stepOffset);
}

HdTokenDataSourceHandle
HdPhysxCharacterControllerSchema::GetUpAxis() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxCharacterControllerSchemaTokens->upAxis);
}

HdFloatDataSourceHandle
HdPhysxCharacterControllerSchema::GetVolumeGrowth() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxCharacterControllerSchemaTokens->volumeGrowth);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxCharacterControllerSchema::BuildRetained(
        const HdTokenDataSourceHandle &climbingMode,
        const HdFloatDataSourceHandle &contactOffset,
        const HdFloatDataSourceHandle &invisibleWallHeight,
        const HdFloatDataSourceHandle &maxJumpHeight,
        const HdVec3fDataSourceHandle &moveTarget,
        const HdTokenDataSourceHandle &nonWalkableMode,
        const HdFloatDataSourceHandle &scaleCoeff,
        const HdFloatDataSourceHandle &slopeLimit,
        const HdFloatDataSourceHandle &stepOffset,
        const HdTokenDataSourceHandle &upAxis,
        const HdFloatDataSourceHandle &volumeGrowth
)
{
    TfToken _names[11];
    HdDataSourceBaseHandle _values[11];

    size_t _count = 0;

    if (climbingMode) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->climbingMode;
        _values[_count++] = climbingMode;
    }

    if (contactOffset) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->contactOffset;
        _values[_count++] = contactOffset;
    }

    if (invisibleWallHeight) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->invisibleWallHeight;
        _values[_count++] = invisibleWallHeight;
    }

    if (maxJumpHeight) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->maxJumpHeight;
        _values[_count++] = maxJumpHeight;
    }

    if (moveTarget) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->moveTarget;
        _values[_count++] = moveTarget;
    }

    if (nonWalkableMode) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->nonWalkableMode;
        _values[_count++] = nonWalkableMode;
    }

    if (scaleCoeff) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->scaleCoeff;
        _values[_count++] = scaleCoeff;
    }

    if (slopeLimit) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->slopeLimit;
        _values[_count++] = slopeLimit;
    }

    if (stepOffset) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->stepOffset;
        _values[_count++] = stepOffset;
    }

    if (upAxis) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->upAxis;
        _values[_count++] = upAxis;
    }

    if (volumeGrowth) {
        _names[_count] = HdPhysxCharacterControllerSchemaTokens->volumeGrowth;
        _values[_count++] = volumeGrowth;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetClimbingMode(
    const HdTokenDataSourceHandle &climbingMode)
{
    _climbingMode = climbingMode;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetContactOffset(
    const HdFloatDataSourceHandle &contactOffset)
{
    _contactOffset = contactOffset;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetInvisibleWallHeight(
    const HdFloatDataSourceHandle &invisibleWallHeight)
{
    _invisibleWallHeight = invisibleWallHeight;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetMaxJumpHeight(
    const HdFloatDataSourceHandle &maxJumpHeight)
{
    _maxJumpHeight = maxJumpHeight;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetMoveTarget(
    const HdVec3fDataSourceHandle &moveTarget)
{
    _moveTarget = moveTarget;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetNonWalkableMode(
    const HdTokenDataSourceHandle &nonWalkableMode)
{
    _nonWalkableMode = nonWalkableMode;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetScaleCoeff(
    const HdFloatDataSourceHandle &scaleCoeff)
{
    _scaleCoeff = scaleCoeff;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetSlopeLimit(
    const HdFloatDataSourceHandle &slopeLimit)
{
    _slopeLimit = slopeLimit;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetStepOffset(
    const HdFloatDataSourceHandle &stepOffset)
{
    _stepOffset = stepOffset;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetUpAxis(
    const HdTokenDataSourceHandle &upAxis)
{
    _upAxis = upAxis;
    return *this;
}

HdPhysxCharacterControllerSchema::Builder &
HdPhysxCharacterControllerSchema::Builder::SetVolumeGrowth(
    const HdFloatDataSourceHandle &volumeGrowth)
{
    _volumeGrowth = volumeGrowth;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxCharacterControllerSchema::Builder::Build()
{
    return HdPhysxCharacterControllerSchema::BuildRetained(
        _climbingMode,
        _contactOffset,
        _invisibleWallHeight,
        _maxJumpHeight,
        _moveTarget,
        _nonWalkableMode,
        _scaleCoeff,
        _slopeLimit,
        _stepOffset,
        _upAxis,
        _volumeGrowth
    );
}

/*static*/
HdPhysxCharacterControllerSchema
HdPhysxCharacterControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxCharacterControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxCharacterControllerSchemaTokens->physxCharacterController))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxCharacterControllerSchema::GetSchemaToken()
{
    return HdPhysxCharacterControllerSchemaTokens->physxCharacterController;
}

/*static*/
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetClimbingModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->climbingMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetContactOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->contactOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetInvisibleWallHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->invisibleWallHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetMaxJumpHeightLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->maxJumpHeight);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetMoveTargetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->moveTarget);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetNonWalkableModeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->nonWalkableMode);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetScaleCoeffLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->scaleCoeff);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetSlopeLimitLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->slopeLimit);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetStepOffsetLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->stepOffset);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetUpAxisLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->upAxis);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCharacterControllerSchema::GetVolumeGrowthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCharacterControllerSchemaTokens->volumeGrowth);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE