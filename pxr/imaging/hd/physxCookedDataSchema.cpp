//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxCookedDataSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxCookedDataSchemaTokens,
    HD_PHYSX_COOKED_DATA_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle
HdPhysxCookedDataSchema::GetName() const
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPhysxCookedDataSchemaTokens->name);
}

HdIntArrayDataSourceHandle
HdPhysxCookedDataSchema::GetBuffer() const
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdPhysxCookedDataSchemaTokens->buffer);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxCookedDataSchema::BuildRetained(
        const HdTokenDataSourceHandle &name,
        const HdIntArrayDataSourceHandle &buffer
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (name) {
        _names[_count] = HdPhysxCookedDataSchemaTokens->name;
        _values[_count++] = name;
    }

    if (buffer) {
        _names[_count] = HdPhysxCookedDataSchemaTokens->buffer;
        _values[_count++] = buffer;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxCookedDataSchema::Builder &
HdPhysxCookedDataSchema::Builder::SetName(
    const HdTokenDataSourceHandle &name)
{
    _name = name;
    return *this;
}

HdPhysxCookedDataSchema::Builder &
HdPhysxCookedDataSchema::Builder::SetBuffer(
    const HdIntArrayDataSourceHandle &buffer)
{
    _buffer = buffer;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxCookedDataSchema::Builder::Build()
{
    return HdPhysxCookedDataSchema::BuildRetained(
        _name,
        _buffer
    );
}

/*static*/
HdPhysxCookedDataSchema
HdPhysxCookedDataSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxCookedDataSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxCookedDataSchemaTokens->physxCookedData))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxCookedDataSchema::GetSchemaToken()
{
    return HdPhysxCookedDataSchemaTokens->physxCookedData;
}

/*static*/
const HdDataSourceLocator &
HdPhysxCookedDataSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCookedDataSchema::GetNameLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCookedDataSchemaTokens->name);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxCookedDataSchema::GetBufferLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxCookedDataSchemaTokens->buffer);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE