//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleControllerSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleControllerSchemaTokens,
    HD_PHYSX_VEHICLE_CONTROLLER_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdPhysxVehicleControllerSchema::GetAccelerator() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleControllerSchemaTokens->accelerator);
}

HdFloatDataSourceHandle
HdPhysxVehicleControllerSchema::GetBrake0() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleControllerSchemaTokens->brake0);
}

HdFloatDataSourceHandle
HdPhysxVehicleControllerSchema::GetBrake1() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleControllerSchemaTokens->brake1);
}

HdFloatDataSourceHandle
HdPhysxVehicleControllerSchema::GetSteer() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleControllerSchemaTokens->steer);
}

HdIntDataSourceHandle
HdPhysxVehicleControllerSchema::GetTargetGear() const
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdPhysxVehicleControllerSchemaTokens->targetGear);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleControllerSchema::BuildRetained(
        const HdFloatDataSourceHandle &accelerator,
        const HdFloatDataSourceHandle &brake0,
        const HdFloatDataSourceHandle &brake1,
        const HdFloatDataSourceHandle &steer,
        const HdIntDataSourceHandle &targetGear
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (accelerator) {
        _names[_count] = HdPhysxVehicleControllerSchemaTokens->accelerator;
        _values[_count++] = accelerator;
    }

    if (brake0) {
        _names[_count] = HdPhysxVehicleControllerSchemaTokens->brake0;
        _values[_count++] = brake0;
    }

    if (brake1) {
        _names[_count] = HdPhysxVehicleControllerSchemaTokens->brake1;
        _values[_count++] = brake1;
    }

    if (steer) {
        _names[_count] = HdPhysxVehicleControllerSchemaTokens->steer;
        _values[_count++] = steer;
    }

    if (targetGear) {
        _names[_count] = HdPhysxVehicleControllerSchemaTokens->targetGear;
        _values[_count++] = targetGear;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleControllerSchema::Builder &
HdPhysxVehicleControllerSchema::Builder::SetAccelerator(
    const HdFloatDataSourceHandle &accelerator)
{
    _accelerator = accelerator;
    return *this;
}

HdPhysxVehicleControllerSchema::Builder &
HdPhysxVehicleControllerSchema::Builder::SetBrake0(
    const HdFloatDataSourceHandle &brake0)
{
    _brake0 = brake0;
    return *this;
}

HdPhysxVehicleControllerSchema::Builder &
HdPhysxVehicleControllerSchema::Builder::SetBrake1(
    const HdFloatDataSourceHandle &brake1)
{
    _brake1 = brake1;
    return *this;
}

HdPhysxVehicleControllerSchema::Builder &
HdPhysxVehicleControllerSchema::Builder::SetSteer(
    const HdFloatDataSourceHandle &steer)
{
    _steer = steer;
    return *this;
}

HdPhysxVehicleControllerSchema::Builder &
HdPhysxVehicleControllerSchema::Builder::SetTargetGear(
    const HdIntDataSourceHandle &targetGear)
{
    _targetGear = targetGear;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleControllerSchema::Builder::Build()
{
    return HdPhysxVehicleControllerSchema::BuildRetained(
        _accelerator,
        _brake0,
        _brake1,
        _steer,
        _targetGear
    );
}

/*static*/
HdPhysxVehicleControllerSchema
HdPhysxVehicleControllerSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleControllerSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleControllerSchemaTokens->physxVehicleController))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleControllerSchema::GetSchemaToken()
{
    return HdPhysxVehicleControllerSchemaTokens->physxVehicleController;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetAcceleratorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleControllerSchemaTokens->accelerator);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetBrake0Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleControllerSchemaTokens->brake0);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetBrake1Locator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleControllerSchemaTokens->brake1);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetSteerLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleControllerSchemaTokens->steer);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleControllerSchema::GetTargetGearLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleControllerSchemaTokens->targetGear);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE