//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/massSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMassSchemaTokens,
    HD_MASS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatDataSourceHandle
HdMassSchema::GetMass() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdMassSchemaTokens->mass);
}

HdFloatDataSourceHandle
HdMassSchema::GetDensity() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdMassSchemaTokens->density);
}

HdVec3fDataSourceHandle
HdMassSchema::GetCenterOfMass() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdMassSchemaTokens->centerOfMass);
}

HdVec3fDataSourceHandle
HdMassSchema::GetDiagonalInertia() const
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        HdMassSchemaTokens->diagonalInertia);
}

HdQuatfDataSourceHandle
HdMassSchema::GetPrincipalAxes() const
{
    return _GetTypedDataSource<HdQuatfDataSource>(
        HdMassSchemaTokens->principalAxes);
}

/*static*/
HdContainerDataSourceHandle
HdMassSchema::BuildRetained(
        const HdFloatDataSourceHandle &mass,
        const HdFloatDataSourceHandle &density,
        const HdVec3fDataSourceHandle &centerOfMass,
        const HdVec3fDataSourceHandle &diagonalInertia,
        const HdQuatfDataSourceHandle &principalAxes
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;

    if (mass) {
        _names[_count] = HdMassSchemaTokens->mass;
        _values[_count++] = mass;
    }

    if (density) {
        _names[_count] = HdMassSchemaTokens->density;
        _values[_count++] = density;
    }

    if (centerOfMass) {
        _names[_count] = HdMassSchemaTokens->centerOfMass;
        _values[_count++] = centerOfMass;
    }

    if (diagonalInertia) {
        _names[_count] = HdMassSchemaTokens->diagonalInertia;
        _values[_count++] = diagonalInertia;
    }

    if (principalAxes) {
        _names[_count] = HdMassSchemaTokens->principalAxes;
        _values[_count++] = principalAxes;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdMassSchema::Builder &
HdMassSchema::Builder::SetMass(
    const HdFloatDataSourceHandle &mass)
{
    _mass = mass;
    return *this;
}

HdMassSchema::Builder &
HdMassSchema::Builder::SetDensity(
    const HdFloatDataSourceHandle &density)
{
    _density = density;
    return *this;
}

HdMassSchema::Builder &
HdMassSchema::Builder::SetCenterOfMass(
    const HdVec3fDataSourceHandle &centerOfMass)
{
    _centerOfMass = centerOfMass;
    return *this;
}

HdMassSchema::Builder &
HdMassSchema::Builder::SetDiagonalInertia(
    const HdVec3fDataSourceHandle &diagonalInertia)
{
    _diagonalInertia = diagonalInertia;
    return *this;
}

HdMassSchema::Builder &
HdMassSchema::Builder::SetPrincipalAxes(
    const HdQuatfDataSourceHandle &principalAxes)
{
    _principalAxes = principalAxes;
    return *this;
}

HdContainerDataSourceHandle
HdMassSchema::Builder::Build()
{
    return HdMassSchema::BuildRetained(
        _mass,
        _density,
        _centerOfMass,
        _diagonalInertia,
        _principalAxes
    );
}

/*static*/
HdMassSchema
HdMassSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdMassSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdMassSchemaTokens->mass))
        : nullptr);
}

/*static*/
const TfToken &
HdMassSchema::GetSchemaToken()
{
    return HdMassSchemaTokens->mass;
}

/*static*/
const HdDataSourceLocator &
HdMassSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMassSchema::GetMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMassSchemaTokens->mass);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMassSchema::GetDensityLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMassSchemaTokens->density);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMassSchema::GetCenterOfMassLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMassSchemaTokens->centerOfMass);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMassSchema::GetDiagonalInertiaLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMassSchemaTokens->diagonalInertia);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMassSchema::GetPrincipalAxesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMassSchemaTokens->principalAxes);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE