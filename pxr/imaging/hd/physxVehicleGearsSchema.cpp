//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/physxVehicleGearsSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPhysxVehicleGearsSchemaTokens,
    HD_PHYSX_VEHICLE_GEARS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdFloatArrayDataSourceHandle
HdPhysxVehicleGearsSchema::GetRatios() const
{
    return _GetTypedDataSource<HdFloatArrayDataSource>(
        HdPhysxVehicleGearsSchemaTokens->ratios);
}

HdFloatDataSourceHandle
HdPhysxVehicleGearsSchema::GetRatioScale() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleGearsSchemaTokens->ratioScale);
}

HdFloatDataSourceHandle
HdPhysxVehicleGearsSchema::GetSwitchTime() const
{
    return _GetTypedDataSource<HdFloatDataSource>(
        HdPhysxVehicleGearsSchemaTokens->switchTime);
}

/*static*/
HdContainerDataSourceHandle
HdPhysxVehicleGearsSchema::BuildRetained(
        const HdFloatArrayDataSourceHandle &ratios,
        const HdFloatDataSourceHandle &ratioScale,
        const HdFloatDataSourceHandle &switchTime
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (ratios) {
        _names[_count] = HdPhysxVehicleGearsSchemaTokens->ratios;
        _values[_count++] = ratios;
    }

    if (ratioScale) {
        _names[_count] = HdPhysxVehicleGearsSchemaTokens->ratioScale;
        _values[_count++] = ratioScale;
    }

    if (switchTime) {
        _names[_count] = HdPhysxVehicleGearsSchemaTokens->switchTime;
        _values[_count++] = switchTime;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPhysxVehicleGearsSchema::Builder &
HdPhysxVehicleGearsSchema::Builder::SetRatios(
    const HdFloatArrayDataSourceHandle &ratios)
{
    _ratios = ratios;
    return *this;
}

HdPhysxVehicleGearsSchema::Builder &
HdPhysxVehicleGearsSchema::Builder::SetRatioScale(
    const HdFloatDataSourceHandle &ratioScale)
{
    _ratioScale = ratioScale;
    return *this;
}

HdPhysxVehicleGearsSchema::Builder &
HdPhysxVehicleGearsSchema::Builder::SetSwitchTime(
    const HdFloatDataSourceHandle &switchTime)
{
    _switchTime = switchTime;
    return *this;
}

HdContainerDataSourceHandle
HdPhysxVehicleGearsSchema::Builder::Build()
{
    return HdPhysxVehicleGearsSchema::BuildRetained(
        _ratios,
        _ratioScale,
        _switchTime
    );
}

/*static*/
HdPhysxVehicleGearsSchema
HdPhysxVehicleGearsSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPhysxVehicleGearsSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPhysxVehicleGearsSchemaTokens->physxVehicleGears))
        : nullptr);
}

/*static*/
const TfToken &
HdPhysxVehicleGearsSchema::GetSchemaToken()
{
    return HdPhysxVehicleGearsSchemaTokens->physxVehicleGears;
}

/*static*/
const HdDataSourceLocator &
HdPhysxVehicleGearsSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleGearsSchema::GetRatiosLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleGearsSchemaTokens->ratios);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleGearsSchema::GetRatioScaleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleGearsSchemaTokens->ratioScale);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPhysxVehicleGearsSchema::GetSwitchTimeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPhysxVehicleGearsSchemaTokens->switchTime);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE